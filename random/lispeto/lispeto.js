/* Generated by the Nim Compiler v1.6.0 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
var NTI603980107 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI33555126 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1778385557 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637534217 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1778385334 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1778385217 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1778385288 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1778385282 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1778385211 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI33555115 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI637534295 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI603980047 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI452985127 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1426063367 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1426063366 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1426063573 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1392509016 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1392509013 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1392509010 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1610612740 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1610612922 = {size: 0, kind: 19, base: null, node: null, finalizer: null};
var NTI1426063877 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1426063876 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1426063875 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1426063872 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI1426063969 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1426063971 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1426063970 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1627389974 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1627389968 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1627389957 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1627391782 = {size: 0, kind: 19, base: null, node: null, finalizer: null};
var NTI1627391233 = {size: 0, kind: 19, base: null, node: null, finalizer: null};
var NTI1627390630 = {size: 0, kind: 19, base: null, node: null, finalizer: null};
var NTI1426063571 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI1627390530 = {size: 0, kind: 19, base: null, node: null, finalizer: null};
var NTI33554459 = {size: 0,kind: 34,base: null,node: null,finalizer: null};
var NTI1174405171 = {size: 0, kind: 16, base: null, node: null, finalizer: null};
var NTI33554458 = {size: 0,kind: 33,base: null,node: null,finalizer: null};
var NTI1526726797 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI788529213 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1426063363 = {size: 0,kind: 34,base: null,node: null,finalizer: null};
var NTI1426063869 = {size: 0,kind: 33,base: null,node: null,finalizer: null};
var NTI1426063871 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1426063907 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI603980025 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI33555121 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI637534287 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1744830658 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637535046 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33555124 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33554438 = {size: 0,kind: 2,base: null,node: null,finalizer: null};
var NTI654312627 = {size: 0, kind: 19, base: null, node: null, finalizer: null};
var NTI973088455 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI973088934 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33555114 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555125 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI637534241 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI637534216 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33554466 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI637534242 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI33554456 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI687865859 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI637534235 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI637534232 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637534229 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33554435 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI637534221 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637534220 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI637534213 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI1778386429 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI637534211 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI33555129 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555128 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555130 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555083 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555165 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33554439 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI33554440 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI33555164 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33555112 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555113 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555120 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555122 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI33555122 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555122.node = NNI33555122;
var NNI33555120 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555120.node = NNI33555120;
var NNI33555113 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555113.node = NNI33555113;
NTI33555164.base = NTI33555112;
NTI33555165.base = NTI33555112;
var NNI33555112 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI33555164, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI33554440, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI33554439, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI33554439, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI33555165, name: "up", sons: null}]};
NTI33555112.node = NNI33555112;
var NNI33555083 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555083.node = NNI33555083;
NTI33555112.base = NTI33555083;
NTI33555113.base = NTI33555112;
NTI33555120.base = NTI33555113;
NTI33555122.base = NTI33555120;
var NNI33555130 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555130.node = NNI33555130;
NTI33555130.base = NTI33555113;
var NNI33555128 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555128.node = NNI33555128;
NTI33555128.base = NTI33555113;
var NNI33555129 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555129.node = NNI33555129;
NTI33555129.base = NTI33555113;
var NNI637534211 = {kind: 2, offset: 0, typ: null, name: null, len: 12, sons: {"0": {kind: 1, offset: 0, typ: NTI637534211, name: "List", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI637534211, name: "Atom", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI637534211, name: "Number", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI637534211, name: "Nil", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI637534211, name: "True", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI637534211, name: "False", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI637534211, name: "Symbol", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI637534211, name: "String", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI637534211, name: "Vector", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI637534211, name: "HashMap", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI637534211, name: "Fun", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI637534211, name: "Fn", len: 0, sons: null}}};
NTI637534211.node = NNI637534211;
NTI637534221.base = NTI637534213;
var NNI637534235 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI687865859, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554439, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI637534213, name: "Field2", sons: null}]};
NTI637534235.node = NNI637534235;
NTI637534232.base = NTI637534235;
var NNI637534229 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI637534232, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI33554456, name: "counter", sons: null}]};
NTI637534229.node = NNI637534229;
var NNI637534241 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "outer", len: 0, typ: NTI637534216, name: "outer", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI637534229, name: "data", sons: null}]};
NTI637534241.node = NNI637534241;
NTI637534216.base = NTI637534241;
var NNI637534220 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "kind", len: 12, typ: NTI637534211, name: "kind", sons: [[setConstr(3, 4, 5), {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []}], 
[setConstr(0, 8), {kind: 1, offset: "list", len: 0, typ: NTI637534221, name: "list", sons: null}], 
[setConstr(1), {kind: 1, offset: "val", len: 0, typ: NTI637534213, name: "val", sons: null}], 
[setConstr(2), {kind: 1, offset: "number", len: 0, typ: NTI33554435, name: "number", sons: null}], 
[setConstr(6, 7), {kind: 1, offset: "str", len: 0, typ: NTI33554439, name: "str", sons: null}], 
[setConstr(9), {kind: 1, offset: "hashmap", len: 0, typ: NTI637534229, name: "hashmap", sons: null}], 
[setConstr(10), {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "fun", len: 0, typ: NTI637534242, name: "fun", sons: null}, 
{kind: 1, offset: "is_macro", len: 0, typ: NTI33554466, name: "is_macro", sons: null}]}], 
[setConstr(11), {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "ffun", len: 0, typ: NTI637534242, name: "ffun", sons: null}, 
{kind: 1, offset: "fis_macro", len: 0, typ: NTI33554466, name: "fis_macro", sons: null}, 
{kind: 1, offset: "ast", len: 0, typ: NTI637534213, name: "ast", sons: null}, 
{kind: 1, offset: "params", len: 0, typ: NTI637534213, name: "params", sons: null}, 
{kind: 1, offset: "env", len: 0, typ: NTI637534216, name: "env", sons: null}]}]]}, 
{kind: 1, offset: "meta", len: 0, typ: NTI637534213, name: "meta", sons: null}]};
NTI637534220.node = NNI637534220;
NTI637534213.base = NTI637534220;
var NNI1778386429 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554439, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI637534213, name: "Field1", sons: null}]};
NTI1778386429.node = NNI1778386429;
var NNI33555125 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555125.node = NNI33555125;
var NNI33555114 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555114.node = NNI33555114;
NTI33555114.base = NTI33555112;
NTI33555125.base = NTI33555114;
var NNI973088934 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI973088455, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI33554456, name: "b", sons: null}]};
NTI973088934.node = NNI973088934;
NTI654312627.base = NTI33554438;
var NNI33555124 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555124.node = NNI33555124;
NTI33555124.base = NTI33555113;
var NNI637535046 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554439, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI637534213, name: "Field1", sons: null}]};
NTI637535046.node = NNI637535046;
NTI1744830658.base = NTI637535046;
NTI637534287.base = NTI637534213;
var NNI33555121 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555121.node = NNI33555121;
NTI33555121.base = NTI33555120;
NTI603980025.base = NTI33554439;
var NNI788529213 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI33554456, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI33554456, name: "b", sons: null}]};
NTI788529213.node = NNI788529213;
var NNI1426063871 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI1426063869, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI1426063363, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI788529213, name: "Field2", sons: null}]};
NTI1426063871.node = NNI1426063871;
NTI1426063907.base = NTI1426063871;
NTI1526726797.base = NTI33554458;
NTI1174405171.base = NTI33554459;
var NNI1426063571 = {kind: 2, offset: 0, typ: null, name: null, len: 7, sons: {"0": {kind: 1, offset: 0, typ: NTI1426063571, name: "mfShortestMatch", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI1426063571, name: "mfNoCaptures", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI1426063571, name: "mfFindMatch", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI1426063571, name: "mfFindMatchOpt", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI1426063571, name: "mfAnchored", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI1426063571, name: "mfBwMatch", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI1426063571, name: "mfReverseCapts", len: 0, sons: null}}};
NTI1426063571.node = NNI1426063571;
NTI1627390530.base = NTI1426063571;
NTI1627390630.base = NTI1426063571;
NTI1627391233.base = NTI1426063571;
NTI1627391782.base = NTI1426063571;
NTI1426063876.base = NTI1426063871;
NTI1426063877.base = NTI33554458;
var NNI1426063875 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "sx", len: 0, typ: NTI1426063876, name: "sx", sons: null}, 
{kind: 1, offset: "ss", len: 0, typ: NTI1426063877, name: "ss", sons: null}, 
{kind: 1, offset: "si", len: 0, typ: NTI33554458, name: "si", sons: null}]};
NTI1426063875.node = NNI1426063875;
NTI1426063872.base = NTI1426063875;
var NNI1426063969 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI1426063872, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI1426063872, name: "b", sons: null}]};
NTI1426063969.node = NNI1426063969;
NTI1426063971.base = NTI1426063969;
var NNI1426063970 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "s", len: 0, typ: NTI1426063971, name: "s", sons: null}, 
{kind: 1, offset: "i", len: 0, typ: NTI33554456, name: "i", sons: null}]};
NTI1426063970.node = NNI1426063970;
var NNI1627389957 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "ahead", len: 0, typ: NTI1627389968, name: "ahead", sons: null}, 
{kind: 1, offset: "behind", len: 0, typ: NTI1627389974, name: "behind", sons: null}, 
{kind: 1, offset: "smL", len: 0, typ: NTI1426063970, name: "smL", sons: null}]};
NTI1627389957.node = NNI1627389957;
NTI1610612922.base = NTI1426063571;
var NNI1610612740 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI1426063363, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI788529213, name: "Field1", sons: null}]};
NTI1610612740.node = NNI1610612740;
var NNI1392509016 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI687865859, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554456, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI33554439, name: "Field2", sons: null}, 
{kind: 1, offset: "Field3", len: 0, typ: NTI33554458, name: "Field3", sons: null}]};
NTI1392509016.node = NNI1392509016;
NTI1392509013.base = NTI1392509016;
var NNI1392509010 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI1392509013, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI33554456, name: "counter", sons: null}, 
{kind: 1, offset: "first", len: 0, typ: NTI33554456, name: "first", sons: null}, 
{kind: 1, offset: "last", len: 0, typ: NTI33554456, name: "last", sons: null}]};
NTI1392509010.node = NNI1392509010;
NTI1426063367.base = NTI788529213;
NTI1426063366.base = NTI1426063367;
var NNI1426063573 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "captures", len: 0, typ: NTI1426063366, name: "captures", sons: null}, 
{kind: 1, offset: "namedGroups", len: 0, typ: NTI1392509010, name: "namedGroups", sons: null}, 
{kind: 1, offset: "boundaries", len: 0, typ: NTI788529213, name: "boundaries", sons: null}]};
NTI1426063573.node = NNI1426063573;
NTI452985127.base = NTI33554439;
NTI603980047.base = NTI637534213;
NTI637534295.base = NTI637534213;
var NNI33555115 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555115.node = NNI33555115;
NTI33555115.base = NTI33555114;
NTI1778385211.base = NTI637534213;
NTI1778385282.base = NTI637534213;
NTI1778385288.base = NTI637534213;
NTI1778385217.base = NTI637534213;
NTI1778385334.base = NTI637534213;
var NNI637534217 = {kind: 1, offset: "t", len: 0, typ: NTI637534213, name: "t", sons: null};
NTI637534217.node = NNI637534217;
NTI637534217.base = NTI33555125;
NTI1778385557.base = NTI637534213;
var NNI33555126 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555126.node = NNI33555126;
NTI33555126.base = NTI33555125;
NTI603980107.base = NTI637534213;

function makeNimstrLit(c_33556802) {
      var result = [];
  for (var i = 0; i < c_33556802.length; ++i) {
    result[i] = c_33556802.charCodeAt(i);
  }
  return result;
  

  
}

function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(2);

function mnewString(len_33556894) {
        return new Array(len_33556894);
  

  
}

function toJSStr(s_33556808) {
                    var Temporary5;
            var Temporary7;

  var result_33556809 = null;

    var res_33556843 = newSeq_33556826((s_33556808).length);
    var i_33556844 = 0;
    var j_33556845 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(i_33556844 < (s_33556808).length)) break Label2;
          var c_33556846 = s_33556808[i_33556844];
          if ((c_33556846 < 128)) {
          res_33556843[j_33556845] = String.fromCharCode(c_33556846);
          i_33556844 += 1;
          }
          else {
            var helper_33556858 = newSeq_33556826(0);
            Label3: do {
                Label4: while (true) {
                if (!true) break Label4;
                  var code_33556859 = c_33556846.toString(16);
                  if ((((code_33556859) == null ? 0 : (code_33556859).length) == 1)) {
                  helper_33556858.push("%0");;
                  }
                  else {
                  helper_33556858.push("%");;
                  }
                  
                  helper_33556858.push(code_33556859);;
                  i_33556844 += 1;
                    if (((s_33556808).length <= i_33556844)) Temporary5 = true; else {                      Temporary5 = (s_33556808[i_33556844] < 128);                    }                  if (Temporary5) {
                  break Label3;
                  }
                  
                  c_33556846 = s_33556808[i_33556844];
                }
            } while (false);
++excHandler;
            Temporary7 = framePtr;
            try {
            res_33556843[j_33556845] = decodeURIComponent(helper_33556858.join(""));
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
            framePtr = Temporary7;
            res_33556843[j_33556845] = helper_33556858.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Temporary7;
            }
          }
          
          j_33556845 += 1;
        }
    } while (false);
    if (res_33556843.length < j_33556845) { for (var i = res_33556843.length ; i < j_33556845 ; ++i) res_33556843.push(null); }
               else { res_33556843.length = j_33556845; };
    result_33556809 = res_33556843.join("");

  return result_33556809;

}

function raiseException(e_33556668, ename_33556669) {
    e_33556668.name = ename_33556669;
    if ((excHandler == 0)) {
    unhandledException(e_33556668);
    }
    
    throw e_33556668;

  
}

function addInt(a_33556941, b_33556942) {
        var result = a_33556941 + b_33556942;
    checkOverflowInt(result);
    return result;
  

  
}

function chckRange(i_33557190, a_33557191, b_33557192) {
      var Temporary1;

  var result_33557193 = 0;

  BeforeRet: do {
      if (!(a_33557191 <= i_33557190)) Temporary1 = false; else {        Temporary1 = (i_33557190 <= b_33557192);      }    if (Temporary1) {
    result_33557193 = i_33557190;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  } while (false);

  return result_33557193;

}
var ConstSet2 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_33557141, src_33557142, ti_33557143) {
  var result_33557152 = null;

    switch (ti_33557143.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(isFatPointer_33557132(ti_33557143))) {
      result_33557152 = src_33557142;
      }
      else {
        result_33557152 = [src_33557142[0], src_33557142[1]];
      }
      
      break;
    case 19:
            if (dest_33557141 === null || dest_33557141 === undefined) {
        dest_33557141 = {};
      }
      else {
        for (var key in dest_33557141) { delete dest_33557141[key]; }
      }
      for (var key in src_33557142) { dest_33557141[key] = src_33557142[key]; }
      result_33557152 = dest_33557141;
    
      break;
    case 18:
    case 17:
      if (!((ti_33557143.base == null))) {
      result_33557152 = nimCopy(dest_33557141, src_33557142, ti_33557143.base);
      }
      else {
      if ((ti_33557143.kind == 17)) {
      result_33557152 = (dest_33557141 === null || dest_33557141 === undefined) ? {m_type: ti_33557143} : dest_33557141;
      }
      else {
        result_33557152 = (dest_33557141 === null || dest_33557141 === undefined) ? {} : dest_33557141;
      }
      }
      nimCopyAux(result_33557152, src_33557142, ti_33557143.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_33557142 === null) {
        result_33557152 = null;
      }
      else {
        if (dest_33557141 === null || dest_33557141 === undefined || dest_33557141.length != src_33557142.length) {
          dest_33557141 = new Array(src_33557142.length);
        }
        result_33557152 = dest_33557141;
        for (var i = 0; i < src_33557142.length; ++i) {
          result_33557152[i] = nimCopy(result_33557152[i], src_33557142[i], ti_33557143.base);
        }
      }
    
      break;
    case 28:
            if (src_33557142 !== null) {
        result_33557152 = src_33557142.slice(0);
      }
    
      break;
    default: 
      result_33557152 = src_33557142;
      break;
    }

  return result_33557152;

}

function chckIndx(i_33557185, a_33557186, b_33557187) {
      var Temporary1;

  var result_33557188 = 0;

  BeforeRet: do {
      if (!(a_33557186 <= i_33557185)) Temporary1 = false; else {        Temporary1 = (i_33557185 <= b_33557187);      }    if (Temporary1) {
    result_33557188 = i_33557185;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_33557185, a_33557186, b_33557187);
    }
    
  } while (false);

  return result_33557188;

}

function raiseFieldError2(f_33556779, discVal_33556780) {
    raiseException({message: (f_33556779 || []).concat(discVal_33556780 || [],makeNimstrLit("\'") || []), parent: null, m_type: NTI33555129, name: null, trace: [], up: null}, "FieldDefect");

  
}

function nimBoolToStr(x_33556515) {
  var result_33556516 = [];

    if (x_33556515) {
    result_33556516 = nimCopy(null, makeNimstrLit("true"), NTI33554439);
    }
    else {
      result_33556516 = nimCopy(null, makeNimstrLit("false"), NTI33554439);
    }
    

  return result_33556516;

}

function reprDiscriminant(e_33557410, typ_33557411) {
    var Temporary1;

  var result_33557412 = [];

    switch (typ_33557411.kind) {
    case 14:
      Temporary1 = reprEnum(e_33557410, typ_33557411);
      break;
    case 1:
      Temporary1 = nimBoolToStr(!((e_33557410 == 0)));
      break;
    default: 
      Temporary1 = HEX24_335544323(e_33557410);
      break;
    }
    result_33557412 = nimCopy(null, Temporary1, NTI33554439);

  return result_33557412;

}
var ConstSet3 = setConstr(2);
var ConstSet4 = setConstr(2);
var ConstSet5 = setConstr(2);
var ConstSet6 = setConstr(2);
var ConstSet7 = setConstr(2);
var ConstSet8 = setConstr(2);
var ConstSet9 = setConstr(2);
var ConstSet10 = setConstr(2);
var ConstSet11 = setConstr(2);
var ConstSet12 = setConstr(2);
var ConstSet13 = setConstr(2);
var ConstSet14 = setConstr(2);
var ConstSet15 = setConstr(2);
var ConstSet16 = setConstr(2);
var ConstSet17 = setConstr(2);
var ConstSet18 = setConstr(2);
var ConstSet19 = setConstr(3, 5);

function eqStrings(a_33556932, b_33556933) {
        if (a_33556932 == b_33556933) return true;
    if (a_33556932 === null && b_33556933.length == 0) return true;
    if (b_33556933 === null && a_33556932.length == 0) return true;
    if ((!a_33556932) || (!b_33556933)) return false;
    var alen = a_33556932.length;
    if (alen != b_33556933.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_33556932[i] != b_33556933[i]) return false;
    return true;
  

  
}
var ConstSet20 = setConstr(2);
var ConstSet21 = setConstr(6, 7);

function subInt(a_33556945, b_33556946) {
        var result = a_33556945 - b_33556946;
    checkOverflowInt(result);
    return result;
  

  
}
var ConstSet22 = setConstr();

function addChar(x_33557256, c_33557257) {
    x_33557256.push(c_33557257);

  
}
var ConstSet23 = setConstr(6, 7);

function mulInt(a_33556949, b_33556950) {
        var result = a_33556949 * b_33556950;
    checkOverflowInt(result);
    return result;
  

  
}
var ConstSet24 = setConstr(0, 8);
var ConstSet25 = setConstr(0, 8);
var ConstSet26 = setConstr(9);
var ConstSet27 = setConstr(1);

function rawEcho() {
          var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

  
}
var ConstSet28 = setConstr(6, 7);
var ConstSet29 = setConstr(0, 8);
var ConstSet30 = setConstr(0, 8);
var ConstSet31 = setConstr(0, 8);
var ConstSet32 = setConstr(0, 8);
var ConstSet33 = setConstr(2);
var ConstSet34 = setConstr(0, 8);
var ConstSet35 = setConstr(0, 8);
var ConstSet36 = setConstr(0, 8);
var ConstSet37 = setConstr(0, 8);
var ConstSet38 = setConstr(0, 8);
var ConstSet39 = setConstr(0, 8);
var ConstSet40 = setConstr(2);
var ConstSet41 = setConstr(2);
var ConstSet42 = setConstr(6, 7);
var ConstSet43 = setConstr(6, 7);
var ConstSet44 = setConstr(0, 8);
var ConstSet45 = setConstr(0, 8);

function divInt(a_33556953, b_33556954) {
        if (b_33556954 == 0) raiseDivByZero();
    if (b_33556954 == -1 && a_33556953 == 2147483647) raiseOverflow();
    return Math.trunc(a_33556953 / b_33556954);
  

  
}

function modInt(a_33556957, b_33556958) {
        if (b_33556958 == 0) raiseDivByZero();
    if (b_33556958 == -1 && a_33556957 == 2147483647) raiseOverflow();
    return Math.trunc(a_33556957 % b_33556958);
  

  
}
var ConstSet46 = setConstr(9);
var ConstSet47 = setConstr(9);
var ConstSet48 = setConstr(10);
var ConstSet49 = setConstr(10);
var ConstSet50 = setConstr(10);
var ConstSet51 = setConstr(10);
var ConstSet52 = setConstr(11);
var ConstSet53 = setConstr(11);
var ConstSet54 = setConstr(11);
var ConstSet55 = setConstr(11);
var ConstSet56 = setConstr(1);
var ConstSet57 = setConstr(1);
              var TOKEN_RE_603980061 = {nfa: {s: [{kind: 44, cp: 35, next: [1, 2, 3, 4, 5, 6, 7], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}, {kind: 38, cp: 35, next: [1, 2, 3, 4, 5, 6, 7], isGreedy: false, uid: 1, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [{Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: -751318948, Field1: 44}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}], counter: 1}, ranges: [], shorthands: [{kind: 20, cp: 115, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}, {kind: 0, cp: 126, next: [8], isGreedy: false, uid: 4, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}, {kind: 38, cp: 35, next: [7], isGreedy: false, uid: 7, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [{Field0: -1436098992, Field1: 64}, {Field0: -1366179556, Field1: 123}, {Field0: 10687518, Field1: 125}, {Field0: 720261795, Field1: 96}, {Field0: 2019811060, Field1: 40}, {Field0: -1823011404, Field1: 41}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: -1177551624, Field1: 94}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 379191148, Field1: 93}, {Field0: -1839864179, Field1: 39}, {Field0: 34035516, Field1: 91}, {Field0: -755927793, Field1: 126}], counter: 11}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}, {kind: 0, cp: 34, next: [9, 10, 11, 7], isGreedy: false, uid: 9, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}, {kind: 0, cp: 59, next: [12, 7], isGreedy: false, uid: 20, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}, {kind: 39, cp: 35, next: [6, 7], isGreedy: false, uid: 24, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [{Field0: 10687518, Field1: 125}, {Field0: -751318948, Field1: 44}, {Field0: 0, Field1: 0}, {Field0: 720261795, Field1: 96}, {Field0: 2019811060, Field1: 40}, {Field0: -1823011404, Field1: 41}, {Field0: 1751968454, Field1: 59}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: -431180709, Field1: 34}, {Field0: 379191148, Field1: 93}, {Field0: -1839864179, Field1: 39}, {Field0: 34035516, Field1: 91}, {Field0: -1366179556, Field1: 123}], counter: 11}, ranges: [], shorthands: [{kind: 20, cp: 115, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}, {kind: 45, cp: 35, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}, {kind: 0, cp: 64, next: [7], isGreedy: false, uid: 5, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}, {kind: 0, cp: 92, next: [13], isGreedy: false, uid: 11, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}, {kind: 39, cp: 35, next: [9, 10, 11, 7], isGreedy: false, uid: 14, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [{Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: -431180709, Field1: 34}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: -2008392537, Field1: 92}], counter: 2}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}, {kind: 0, cp: 34, next: [7], isGreedy: false, uid: 17, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}, {kind: 26, cp: 46, next: [12, 7], isGreedy: false, uid: 21, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}, {kind: 26, cp: 46, next: [9, 10, 11, 7], isGreedy: false, uid: 12, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}], t: {allZ: [[-1, 0, 1, 2, 3, 4, 5], [-1, 6, 7, 8, 9, 10, 11], [-1], [12], [-1, -1, -1, 13], [-1, 14], [-1, 15], [], [16], [-1], [-1, -1, -1, 17], [18], [-1, 19], [-1, -1, -1, 20]], z: [[{kind: 3, cp: 40, next: [24], isGreedy: false, uid: 3, idx: 0, isCapturing: true, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}], [{kind: 3, cp: 40, next: [24], isGreedy: false, uid: 3, idx: 0, isCapturing: true, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}], [{kind: 3, cp: 40, next: [24], isGreedy: false, uid: 3, idx: 0, isCapturing: true, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}], [{kind: 3, cp: 40, next: [24], isGreedy: false, uid: 3, idx: 0, isCapturing: true, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}], [{kind: 3, cp: 40, next: [24], isGreedy: false, uid: 3, idx: 0, isCapturing: true, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}], [{kind: 3, cp: 40, next: [24], isGreedy: false, uid: 3, idx: 0, isCapturing: true, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}, {kind: 4, cp: 41, next: [0], isGreedy: false, uid: 26, idx: 0, isCapturing: true, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}], [{kind: 3, cp: 40, next: [24], isGreedy: false, uid: 3, idx: 0, isCapturing: true, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}], [{kind: 3, cp: 40, next: [24], isGreedy: false, uid: 3, idx: 0, isCapturing: true, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}], [{kind: 3, cp: 40, next: [24], isGreedy: false, uid: 3, idx: 0, isCapturing: true, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}], [{kind: 3, cp: 40, next: [24], isGreedy: false, uid: 3, idx: 0, isCapturing: true, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}], [{kind: 3, cp: 40, next: [24], isGreedy: false, uid: 3, idx: 0, isCapturing: true, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}], [{kind: 3, cp: 40, next: [24], isGreedy: false, uid: 3, idx: 0, isCapturing: true, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}, {kind: 4, cp: 41, next: [0], isGreedy: false, uid: 26, idx: 0, isCapturing: true, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}], [{kind: 4, cp: 41, next: [0], isGreedy: false, uid: 26, idx: 0, isCapturing: true, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}], [{kind: 4, cp: 41, next: [0], isGreedy: false, uid: 26, idx: 0, isCapturing: true, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}], [{kind: 4, cp: 41, next: [0], isGreedy: false, uid: 26, idx: 0, isCapturing: true, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}], [{kind: 4, cp: 41, next: [0], isGreedy: false, uid: 26, idx: 0, isCapturing: true, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}], [{kind: 4, cp: 41, next: [0], isGreedy: false, uid: 26, idx: 0, isCapturing: true, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}], [{kind: 4, cp: 41, next: [0], isGreedy: false, uid: 26, idx: 0, isCapturing: true, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}], [{kind: 4, cp: 41, next: [0], isGreedy: false, uid: 26, idx: 0, isCapturing: true, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}], [{kind: 4, cp: 41, next: [0], isGreedy: false, uid: 26, idx: 0, isCapturing: true, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}], [{kind: 4, cp: 41, next: [0], isGreedy: false, uid: 26, idx: 0, isCapturing: true, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}]]}}, groupsCount: 1, namedGroups: {data: [{Field0: 0, Field1: 0, Field2: [], Field3: 0}, {Field0: 0, Field1: 0, Field2: [], Field3: 0}, {Field0: 0, Field1: 0, Field2: [], Field3: 0}, {Field0: 0, Field1: 0, Field2: [], Field3: 0}, {Field0: 0, Field1: 0, Field2: [], Field3: 0}, {Field0: 0, Field1: 0, Field2: [], Field3: 0}, {Field0: 0, Field1: 0, Field2: [], Field3: 0}, {Field0: 0, Field1: 0, Field2: [], Field3: 0}], counter: 0, first: -1, last: -1}, litOpt: {lit: 0, nfa: {s: [], t: {allZ: [], z: []}}}};

function nimMax(a_33556999, b_33557000) {
    var Temporary1;

  var result_33557001 = 0;

  BeforeRet: do {
    if ((b_33557000 <= a_33556999)) {
    Temporary1 = a_33556999;
    }
    else {
    Temporary1 = b_33557000;
    }
    
    result_33557001 = Temporary1;
    break BeforeRet;
  } while (false);

  return result_33557001;

}
    var typesOffsets_1493172234 = new Int16Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 12, 26, 27, 28, 29, 30, 31, 32, 33, 34, 12, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 12, 62, 63, 64, 12, 12, 12, 12, 12, 65, 66, 67, 68, 69, 70, 71, 72, 12, 12, 12, 12, 12, 12, 12, 12, 73, 74, 75, 76, 77, 12, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 12, 91, 92, 93, 94, 95, 96, 97, 98, 98, 98, 99, 100, 100, 101, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 114, 115, 116, 113, 113, 113, 113, 113, 113, 113, 113, 113, 117, 118, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 119, 120, 100, 121, 122, 123, 124, 125, 126, 113, 113, 113, 113, 113, 113, 113, 127, 72, 128, 129, 130, 12, 131, 132, 133, 134, 135, 113, 113, 113, 113, 113, 136, 12, 137, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 138, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 139, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 113, 140, 141, 142, 143, 139, 144, 12, 12, 12, 12, 12, 12, 145, 146, 12, 12, 12, 12, 12, 12, 12, 147, 12, 148, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 149, 12, 12, 12, 12, 12, 12, 12, 150, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 151, 12, 152, 153, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 154, 12, 155, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 156, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 157, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 158, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 154, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 157, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 159, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 160, 12, 144, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 161, 162, 12, 163, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 164, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 165, 166, 12, 12, 12, 12, 167, 168, 169, 170, 171, 172, 173, 174, 175, 93, 12, 176, 177, 178, 12, 179, 180, 181, 12, 182, 183, 184, 98, 185, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 186, 187, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 12, 188, 189, 190, 12, 191, 12, 192, 193, 194, 29, 195, 12, 12, 12, 12, 196, 27, 197, 198, 199, 200, 12, 164, 201, 202, 203, 204, 205, 206, 12, 207, 208, 209, 210, 211, 113, 113, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 113, 113, 12, 12, 12, 12, 180, 224, 113, 113, 225, 226, 227, 228, 229, 113, 230, 231, 232, 233, 234, 235, 82, 236, 237, 113, 12, 238, 239, 240, 241, 113, 113, 113, 113, 242, 243, 113, 244, 245, 132, 246, 12, 247, 207, 248, 249, 250, 12, 251, 252, 113, 253, 254, 255, 256, 113, 113, 12, 257, 12, 258, 113, 113, 259, 260, 12, 261, 80, 262, 263, 113, 113, 113, 207, 113, 264, 265, 266, 267, 268, 269, 203, 270, 271, 80, 113, 113, 113, 113, 272, 273, 274, 113, 275, 276, 277, 113, 113, 113, 113, 278, 113, 113, 279, 280, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 192, 113, 281, 282, 12, 12, 12, 283, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 284, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 12, 12, 12, 12, 12, 12, 12, 12, 12, 285, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 12, 12, 12, 12, 12, 12, 12, 12, 80, 286, 113, 287, 180, 288, 289, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 290, 291, 113, 12, 292, 293, 294, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 94, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 295, 238, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 12, 12, 12, 12, 296, 297, 12, 12, 12, 12, 12, 298, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 12, 299, 300, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 301, 302, 113, 113, 303, 113, 304, 113, 305, 113, 113, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 113, 113, 113, 113, 113, 113, 113, 113, 322, 323, 324, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 325, 113, 113, 113, 326, 327, 113, 113, 113, 113, 113, 328, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 12, 12, 12, 329, 330, 331, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 332, 333, 113, 334, 113, 113, 113, 335, 336, 337, 113, 113, 113, 113, 113, 113, 113, 113, 113, 338, 339, 340, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 341, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 342, 343, 12, 344, 161, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 138, 12, 345, 12, 12, 12, 12, 346, 347, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 348, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 349, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 149, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 350, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 351, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 352, 12, 12, 12, 216, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 353, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 354, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 12, 12, 348, 12, 12, 12, 12, 12, 351, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 355, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 12, 12, 12, 356, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113]);
    var typesIndices_1493172235 = new Int8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 4, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 5, 0, 0, 0, 6, 5, 0, 7, 7, 7, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 3, 5, 3, 5, 3, 5, 5, 5, 3, 3, 5, 3, 5, 3, 3, 5, 3, 3, 3, 5, 5, 3, 3, 3, 3, 5, 3, 3, 5, 3, 3, 3, 5, 5, 5, 3, 3, 5, 3, 3, 5, 3, 5, 3, 5, 3, 3, 5, 3, 5, 5, 3, 5, 3, 3, 5, 3, 3, 3, 5, 3, 5, 3, 3, 5, 5, 4, 3, 5, 5, 5, 4, 4, 4, 4, 3, 8, 5, 3, 8, 5, 3, 8, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 3, 8, 5, 3, 5, 3, 3, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 5, 5, 5, 5, 3, 3, 5, 3, 3, 5, 5, 3, 5, 3, 3, 3, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 5, 5, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 5, 3, 5, 4, 0, 3, 5, 0, 0, 5, 5, 5, 5, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 3, 3, 3, 0, 3, 0, 3, 3, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 5, 3, 3, 3, 5, 5, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 5, 5, 3, 5, 0, 3, 5, 3, 3, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 0, 4, 4, 4, 4, 4, 4, 4, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 4, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 0, 4, 4, 0, 4, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 0, 0, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 0, 0, 0, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 4, 4, 0, 4, 4, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 0, 0, 7, 7, 7, 7, 7, 7, 0, 0, 4, 0, 4, 0, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 4, 0, 4, 4, 0, 0, 4, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 0, 0, 4, 4, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 4, 4, 0, 4, 4, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 4, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 0, 4, 4, 4, 4, 0, 0, 0, 4, 4, 0, 4, 0, 4, 4, 0, 0, 0, 4, 4, 0, 0, 0, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 0, 4, 4, 4, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 4, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 0, 4, 0, 4, 4, 4, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 4, 0, 4, 0, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 4, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 0, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 0, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 5, 5, 5, 5, 5, 5, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 0, 0, 0, 0, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 0, 3, 0, 3, 0, 3, 0, 3, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 0, 5, 5, 3, 3, 3, 3, 8, 0, 5, 0, 0, 0, 5, 5, 5, 0, 5, 5, 3, 3, 3, 3, 8, 0, 0, 0, 5, 5, 5, 5, 0, 0, 5, 5, 3, 3, 3, 3, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 5, 5, 5, 0, 5, 5, 3, 3, 3, 3, 8, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 5, 0, 0, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 0, 5, 3, 3, 3, 5, 5, 3, 3, 3, 5, 0, 3, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 3, 0, 3, 3, 3, 3, 0, 5, 3, 3, 3, 3, 5, 4, 4, 4, 4, 5, 0, 0, 5, 5, 3, 3, 0, 0, 0, 0, 0, 3, 5, 5, 5, 5, 0, 0, 0, 0, 5, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 9, 9, 9, 3, 5, 9, 9, 9, 9, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 3, 5, 3, 3, 3, 5, 5, 3, 5, 3, 5, 3, 5, 3, 3, 3, 3, 5, 3, 5, 5, 3, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 0, 0, 0, 0, 0, 0, 3, 5, 3, 5, 4, 4, 4, 3, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 4, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 0, 9, 9, 9, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 0, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 9, 4, 4, 4, 9, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 9, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 9, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 9, 9, 9, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9, 9, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 3, 5, 3, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 4, 0, 0, 3, 5, 3, 5, 4, 3, 5, 3, 5, 5, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 3, 3, 3, 3, 5, 3, 3, 3, 3, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 0, 0, 3, 5, 3, 3, 3, 3, 5, 3, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 5, 4, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 0, 0, 0, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 0, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 4, 0, 4, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 4, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 9, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 9, 9, 9, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 0, 0, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 7, 7, 4, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 0, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 0, 0, 0, 0, 4, 6, 6, 6, 6, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 0, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 0, 4, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 0, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 0, 0, 4, 4, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 7, 7, 7, 7, 7, 7, 7, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 0, 3, 3, 0, 0, 3, 0, 0, 3, 3, 0, 0, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 0, 5, 0, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 0, 3, 3, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 0, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 0, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 3, 5, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 7, 7, 7, 0, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 0, 0, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 4, 0, 4, 0, 4, 0, 4, 4, 4, 0, 4, 4, 0, 4, 0, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 4, 0, 4, 0, 0, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    var typesData_1493172236 = new Int16Array([0, 64, 129, 176, 128, 168, 2, 4, 160, 132, 180, 172]);
    var toLowerRanges_973079451 = new Int32Array([65, 90, 532, 192, 214, 532, 216, 222, 532, 393, 394, 705, 433, 434, 717, 904, 906, 537, 910, 911, 563, 913, 929, 532, 931, 939, 532, 1021, 1023, 370, 1024, 1039, 580, 1040, 1071, 532, 1329, 1366, 548, 4256, 4293, 7764, 5024, 5103, 39364, 5104, 5109, 508, 7312, 7354, -2508, 7357, 7359, -2508, 7944, 7951, 492, 7960, 7965, 492, 7976, 7983, 492, 7992, 7999, 492, 8008, 8013, 492, 8040, 8047, 492, 8072, 8079, 492, 8088, 8095, 492, 8104, 8111, 492, 8120, 8121, 492, 8122, 8123, 426, 8136, 8139, 414, 8152, 8153, 492, 8154, 8155, 400, 8168, 8169, 492, 8170, 8171, 388, 8184, 8185, 372, 8186, 8187, 374, 11264, 11310, 548, 11390, 11391, -10315, 65313, 65338, 532, 66560, 66599, 540, 66736, 66771, 540, 68736, 68786, 564, 71840, 71871, 532, 93760, 93791, 532, 125184, 125217, 534]);
    var toLowerSinglets_973079452 = new Int32Array([256, 501, 258, 501, 260, 501, 262, 501, 264, 501, 266, 501, 268, 501, 270, 501, 272, 501, 274, 501, 276, 501, 278, 501, 280, 501, 282, 501, 284, 501, 286, 501, 288, 501, 290, 501, 292, 501, 294, 501, 296, 501, 298, 501, 300, 501, 302, 501, 304, 301, 306, 501, 308, 501, 310, 501, 313, 501, 315, 501, 317, 501, 319, 501, 321, 501, 323, 501, 325, 501, 327, 501, 330, 501, 332, 501, 334, 501, 336, 501, 338, 501, 340, 501, 342, 501, 344, 501, 346, 501, 348, 501, 350, 501, 352, 501, 354, 501, 356, 501, 358, 501, 360, 501, 362, 501, 364, 501, 366, 501, 368, 501, 370, 501, 372, 501, 374, 501, 376, 379, 377, 501, 379, 501, 381, 501, 385, 710, 386, 501, 388, 501, 390, 706, 391, 501, 395, 501, 398, 579, 399, 702, 400, 703, 401, 501, 403, 705, 404, 707, 406, 711, 407, 709, 408, 501, 412, 711, 413, 713, 415, 714, 416, 501, 418, 501, 420, 501, 422, 718, 423, 501, 425, 718, 428, 501, 430, 718, 431, 501, 435, 501, 437, 501, 439, 719, 440, 501, 444, 501, 452, 502, 453, 501, 455, 502, 456, 501, 458, 502, 459, 501, 461, 501, 463, 501, 465, 501, 467, 501, 469, 501, 471, 501, 473, 501, 475, 501, 478, 501, 480, 501, 482, 501, 484, 501, 486, 501, 488, 501, 490, 501, 492, 501, 494, 501, 497, 502, 498, 501, 500, 501, 502, 403, 503, 444, 504, 501, 506, 501, 508, 501, 510, 501, 512, 501, 514, 501, 516, 501, 518, 501, 520, 501, 522, 501, 524, 501, 526, 501, 528, 501, 530, 501, 532, 501, 534, 501, 536, 501, 538, 501, 540, 501, 542, 501, 544, 370, 546, 501, 548, 501, 550, 501, 552, 501, 554, 501, 556, 501, 558, 501, 560, 501, 562, 501, 570, 11295, 571, 501, 573, 337, 574, 11292, 577, 501, 579, 305, 580, 569, 581, 571, 582, 501, 584, 501, 586, 501, 588, 501, 590, 501, 880, 501, 882, 501, 886, 501, 895, 616, 902, 538, 908, 564, 975, 508, 984, 501, 986, 501, 988, 501, 990, 501, 992, 501, 994, 501, 996, 501, 998, 501, 1000, 501, 1002, 501, 1004, 501, 1006, 501, 1012, 440, 1015, 501, 1017, 493, 1018, 501, 1120, 501, 1122, 501, 1124, 501, 1126, 501, 1128, 501, 1130, 501, 1132, 501, 1134, 501, 1136, 501, 1138, 501, 1140, 501, 1142, 501, 1144, 501, 1146, 501, 1148, 501, 1150, 501, 1152, 501, 1162, 501, 1164, 501, 1166, 501, 1168, 501, 1170, 501, 1172, 501, 1174, 501, 1176, 501, 1178, 501, 1180, 501, 1182, 501, 1184, 501, 1186, 501, 1188, 501, 1190, 501, 1192, 501, 1194, 501, 1196, 501, 1198, 501, 1200, 501, 1202, 501, 1204, 501, 1206, 501, 1208, 501, 1210, 501, 1212, 501, 1214, 501, 1216, 515, 1217, 501, 1219, 501, 1221, 501, 1223, 501, 1225, 501, 1227, 501, 1229, 501, 1232, 501, 1234, 501, 1236, 501, 1238, 501, 1240, 501, 1242, 501, 1244, 501, 1246, 501, 1248, 501, 1250, 501, 1252, 501, 1254, 501, 1256, 501, 1258, 501, 1260, 501, 1262, 501, 1264, 501, 1266, 501, 1268, 501, 1270, 501, 1272, 501, 1274, 501, 1276, 501, 1278, 501, 1280, 501, 1282, 501, 1284, 501, 1286, 501, 1288, 501, 1290, 501, 1292, 501, 1294, 501, 1296, 501, 1298, 501, 1300, 501, 1302, 501, 1304, 501, 1306, 501, 1308, 501, 1310, 501, 1312, 501, 1314, 501, 1316, 501, 1318, 501, 1320, 501, 1322, 501, 1324, 501, 1326, 501, 4295, 7764, 4301, 7764, 7680, 501, 7682, 501, 7684, 501, 7686, 501, 7688, 501, 7690, 501, 7692, 501, 7694, 501, 7696, 501, 7698, 501, 7700, 501, 7702, 501, 7704, 501, 7706, 501, 7708, 501, 7710, 501, 7712, 501, 7714, 501, 7716, 501, 7718, 501, 7720, 501, 7722, 501, 7724, 501, 7726, 501, 7728, 501, 7730, 501, 7732, 501, 7734, 501, 7736, 501, 7738, 501, 7740, 501, 7742, 501, 7744, 501, 7746, 501, 7748, 501, 7750, 501, 7752, 501, 7754, 501, 7756, 501, 7758, 501, 7760, 501, 7762, 501, 7764, 501, 7766, 501, 7768, 501, 7770, 501, 7772, 501, 7774, 501, 7776, 501, 7778, 501, 7780, 501, 7782, 501, 7784, 501, 7786, 501, 7788, 501, 7790, 501, 7792, 501, 7794, 501, 7796, 501, 7798, 501, 7800, 501, 7802, 501, 7804, 501, 7806, 501, 7808, 501, 7810, 501, 7812, 501, 7814, 501, 7816, 501, 7818, 501, 7820, 501, 7822, 501, 7824, 501, 7826, 501, 7828, 501, 7838, -7115, 7840, 501, 7842, 501, 7844, 501, 7846, 501, 7848, 501, 7850, 501, 7852, 501, 7854, 501, 7856, 501, 7858, 501, 7860, 501, 7862, 501, 7864, 501, 7866, 501, 7868, 501, 7870, 501, 7872, 501, 7874, 501, 7876, 501, 7878, 501, 7880, 501, 7882, 501, 7884, 501, 7886, 501, 7888, 501, 7890, 501, 7892, 501, 7894, 501, 7896, 501, 7898, 501, 7900, 501, 7902, 501, 7904, 501, 7906, 501, 7908, 501, 7910, 501, 7912, 501, 7914, 501, 7916, 501, 7918, 501, 7920, 501, 7922, 501, 7924, 501, 7926, 501, 7928, 501, 7930, 501, 7932, 501, 7934, 501, 8025, 492, 8027, 492, 8029, 492, 8031, 492, 8124, 491, 8140, 491, 8172, 493, 8188, 491, 8486, -7017, 8490, -7883, 8491, -7762, 8498, 528, 8579, 501, 11360, 501, 11362, -10243, 11363, -3314, 11364, -10227, 11367, 501, 11369, 501, 11371, 501, 11373, -10280, 11374, -10249, 11375, -10283, 11376, -10282, 11378, 501, 11381, 501, 11392, 501, 11394, 501, 11396, 501, 11398, 501, 11400, 501, 11402, 501, 11404, 501, 11406, 501, 11408, 501, 11410, 501, 11412, 501, 11414, 501, 11416, 501, 11418, 501, 11420, 501, 11422, 501, 11424, 501, 11426, 501, 11428, 501, 11430, 501, 11432, 501, 11434, 501, 11436, 501, 11438, 501, 11440, 501, 11442, 501, 11444, 501, 11446, 501, 11448, 501, 11450, 501, 11452, 501, 11454, 501, 11456, 501, 11458, 501, 11460, 501, 11462, 501, 11464, 501, 11466, 501, 11468, 501, 11470, 501, 11472, 501, 11474, 501, 11476, 501, 11478, 501, 11480, 501, 11482, 501, 11484, 501, 11486, 501, 11488, 501, 11490, 501, 11499, 501, 11501, 501, 11506, 501, 42560, 501, 42562, 501, 42564, 501, 42566, 501, 42568, 501, 42570, 501, 42572, 501, 42574, 501, 42576, 501, 42578, 501, 42580, 501, 42582, 501, 42584, 501, 42586, 501, 42588, 501, 42590, 501, 42592, 501, 42594, 501, 42596, 501, 42598, 501, 42600, 501, 42602, 501, 42604, 501, 42624, 501, 42626, 501, 42628, 501, 42630, 501, 42632, 501, 42634, 501, 42636, 501, 42638, 501, 42640, 501, 42642, 501, 42644, 501, 42646, 501, 42648, 501, 42650, 501, 42786, 501, 42788, 501, 42790, 501, 42792, 501, 42794, 501, 42796, 501, 42798, 501, 42802, 501, 42804, 501, 42806, 501, 42808, 501, 42810, 501, 42812, 501, 42814, 501, 42816, 501, 42818, 501, 42820, 501, 42822, 501, 42824, 501, 42826, 501, 42828, 501, 42830, 501, 42832, 501, 42834, 501, 42836, 501, 42838, 501, 42840, 501, 42842, 501, 42844, 501, 42846, 501, 42848, 501, 42850, 501, 42852, 501, 42854, 501, 42856, 501, 42858, 501, 42860, 501, 42862, 501, 42873, 501, 42875, 501, 42877, -34832, 42878, 501, 42880, 501, 42882, 501, 42884, 501, 42886, 501, 42891, 501, 42893, -41780, 42896, 501, 42898, 501, 42902, 501, 42904, 501, 42906, 501, 42908, 501, 42910, 501, 42912, 501, 42914, 501, 42916, 501, 42918, 501, 42920, 501, 42922, -41808, 42923, -41819, 42924, -41815, 42925, -41805, 42926, -41808, 42928, -41758, 42929, -41782, 42930, -41761, 42931, 1428, 42932, 501, 42934, 501, 42936, 501, 42938, 501, 42940, 501, 42942, 501, 42946, 501, 42948, 452, 42949, -41807, 42950, -34884]);
    var toUpperRanges_973079453 = new Int32Array([97, 122, 468, 224, 246, 468, 248, 254, 468, 575, 576, 11315, 598, 599, 295, 650, 651, 283, 891, 893, 630, 941, 943, 463, 945, 961, 468, 963, 971, 468, 973, 974, 437, 1072, 1103, 468, 1104, 1119, 420, 1377, 1414, 452, 4304, 4346, 3508, 4349, 4351, 3508, 5112, 5117, 492, 7299, 7300, -5742, 7936, 7943, 508, 7952, 7957, 508, 7968, 7975, 508, 7984, 7991, 508, 8000, 8005, 508, 8032, 8039, 508, 8048, 8049, 574, 8050, 8053, 586, 8054, 8055, 600, 8056, 8057, 628, 8058, 8059, 612, 8060, 8061, 626, 8064, 8071, 508, 8080, 8087, 508, 8096, 8103, 508, 8112, 8113, 508, 8144, 8145, 508, 8160, 8161, 508, 11312, 11358, 452, 11520, 11557, -6764, 43888, 43967, -38364, 65345, 65370, 468, 66600, 66639, 460, 66776, 66811, 460, 68800, 68850, 436, 71872, 71903, 468, 93792, 93823, 468, 125218, 125251, 466]);
    var toUpperSinglets_973079454 = new Int32Array([181, 1243, 255, 621, 257, 499, 259, 499, 261, 499, 263, 499, 265, 499, 267, 499, 269, 499, 271, 499, 273, 499, 275, 499, 277, 499, 279, 499, 281, 499, 283, 499, 285, 499, 287, 499, 289, 499, 291, 499, 293, 499, 295, 499, 297, 499, 299, 499, 301, 499, 303, 499, 305, 268, 307, 499, 309, 499, 311, 499, 314, 499, 316, 499, 318, 499, 320, 499, 322, 499, 324, 499, 326, 499, 328, 499, 331, 499, 333, 499, 335, 499, 337, 499, 339, 499, 341, 499, 343, 499, 345, 499, 347, 499, 349, 499, 351, 499, 353, 499, 355, 499, 357, 499, 359, 499, 361, 499, 363, 499, 365, 499, 367, 499, 369, 499, 371, 499, 373, 499, 375, 499, 378, 499, 380, 499, 382, 499, 383, 200, 384, 695, 387, 499, 389, 499, 392, 499, 396, 499, 402, 499, 405, 597, 409, 499, 410, 663, 414, 630, 417, 499, 419, 499, 421, 499, 424, 499, 429, 499, 432, 499, 436, 499, 438, 499, 441, 499, 445, 499, 447, 556, 453, 499, 454, 498, 456, 499, 457, 498, 459, 499, 460, 498, 462, 499, 464, 499, 466, 499, 468, 499, 470, 499, 472, 499, 474, 499, 476, 499, 477, 421, 479, 499, 481, 499, 483, 499, 485, 499, 487, 499, 489, 499, 491, 499, 493, 499, 495, 499, 498, 499, 499, 498, 501, 499, 505, 499, 507, 499, 509, 499, 511, 499, 513, 499, 515, 499, 517, 499, 519, 499, 521, 499, 523, 499, 525, 499, 527, 499, 529, 499, 531, 499, 533, 499, 535, 499, 537, 499, 539, 499, 541, 499, 543, 499, 547, 499, 549, 499, 551, 499, 553, 499, 555, 499, 557, 499, 559, 499, 561, 499, 563, 499, 572, 499, 578, 499, 583, 499, 585, 499, 587, 499, 589, 499, 591, 499, 592, 11283, 593, 11280, 594, 11282, 595, 290, 596, 294, 601, 298, 603, 297, 604, 42819, 608, 295, 609, 42815, 611, 293, 613, 42780, 614, 42808, 616, 291, 617, 289, 618, 42808, 619, 11243, 620, 42805, 623, 289, 625, 11249, 626, 287, 629, 286, 637, 11227, 640, 282, 642, 42807, 643, 282, 647, 42782, 648, 282, 649, 431, 652, 429, 658, 281, 669, 42761, 670, 42758, 881, 499, 883, 499, 887, 499, 940, 462, 962, 469, 972, 436, 976, 438, 977, 443, 981, 453, 982, 446, 983, 492, 985, 499, 987, 499, 989, 499, 991, 499, 993, 499, 995, 499, 997, 499, 999, 499, 1001, 499, 1003, 499, 1005, 499, 1007, 499, 1008, 414, 1009, 420, 1010, 507, 1011, 384, 1013, 404, 1016, 499, 1019, 499, 1121, 499, 1123, 499, 1125, 499, 1127, 499, 1129, 499, 1131, 499, 1133, 499, 1135, 499, 1137, 499, 1139, 499, 1141, 499, 1143, 499, 1145, 499, 1147, 499, 1149, 499, 1151, 499, 1153, 499, 1163, 499, 1165, 499, 1167, 499, 1169, 499, 1171, 499, 1173, 499, 1175, 499, 1177, 499, 1179, 499, 1181, 499, 1183, 499, 1185, 499, 1187, 499, 1189, 499, 1191, 499, 1193, 499, 1195, 499, 1197, 499, 1199, 499, 1201, 499, 1203, 499, 1205, 499, 1207, 499, 1209, 499, 1211, 499, 1213, 499, 1215, 499, 1218, 499, 1220, 499, 1222, 499, 1224, 499, 1226, 499, 1228, 499, 1230, 499, 1231, 485, 1233, 499, 1235, 499, 1237, 499, 1239, 499, 1241, 499, 1243, 499, 1245, 499, 1247, 499, 1249, 499, 1251, 499, 1253, 499, 1255, 499, 1257, 499, 1259, 499, 1261, 499, 1263, 499, 1265, 499, 1267, 499, 1269, 499, 1271, 499, 1273, 499, 1275, 499, 1277, 499, 1279, 499, 1281, 499, 1283, 499, 1285, 499, 1287, 499, 1289, 499, 1291, 499, 1293, 499, 1295, 499, 1297, 499, 1299, 499, 1301, 499, 1303, 499, 1305, 499, 1307, 499, 1309, 499, 1311, 499, 1313, 499, 1315, 499, 1317, 499, 1319, 499, 1321, 499, 1323, 499, 1325, 499, 1327, 499, 7296, -5754, 7297, -5753, 7298, -5744, 7301, -5743, 7302, -5736, 7303, -5681, 7304, 35766, 7545, 35832, 7549, 4314, 7566, 35884, 7681, 499, 7683, 499, 7685, 499, 7687, 499, 7689, 499, 7691, 499, 7693, 499, 7695, 499, 7697, 499, 7699, 499, 7701, 499, 7703, 499, 7705, 499, 7707, 499, 7709, 499, 7711, 499, 7713, 499, 7715, 499, 7717, 499, 7719, 499, 7721, 499, 7723, 499, 7725, 499, 7727, 499, 7729, 499, 7731, 499, 7733, 499, 7735, 499, 7737, 499, 7739, 499, 7741, 499, 7743, 499, 7745, 499, 7747, 499, 7749, 499, 7751, 499, 7753, 499, 7755, 499, 7757, 499, 7759, 499, 7761, 499, 7763, 499, 7765, 499, 7767, 499, 7769, 499, 7771, 499, 7773, 499, 7775, 499, 7777, 499, 7779, 499, 7781, 499, 7783, 499, 7785, 499, 7787, 499, 7789, 499, 7791, 499, 7793, 499, 7795, 499, 7797, 499, 7799, 499, 7801, 499, 7803, 499, 7805, 499, 7807, 499, 7809, 499, 7811, 499, 7813, 499, 7815, 499, 7817, 499, 7819, 499, 7821, 499, 7823, 499, 7825, 499, 7827, 499, 7829, 499, 7835, 441, 7841, 499, 7843, 499, 7845, 499, 7847, 499, 7849, 499, 7851, 499, 7853, 499, 7855, 499, 7857, 499, 7859, 499, 7861, 499, 7863, 499, 7865, 499, 7867, 499, 7869, 499, 7871, 499, 7873, 499, 7875, 499, 7877, 499, 7879, 499, 7881, 499, 7883, 499, 7885, 499, 7887, 499, 7889, 499, 7891, 499, 7893, 499, 7895, 499, 7897, 499, 7899, 499, 7901, 499, 7903, 499, 7905, 499, 7907, 499, 7909, 499, 7911, 499, 7913, 499, 7915, 499, 7917, 499, 7919, 499, 7921, 499, 7923, 499, 7925, 499, 7927, 499, 7929, 499, 7931, 499, 7933, 499, 7935, 499, 8017, 508, 8019, 508, 8021, 508, 8023, 508, 8115, 509, 8126, -6705, 8131, 509, 8165, 507, 8179, 509, 8526, 472, 8580, 499, 11361, 499, 11365, -10295, 11366, -10292, 11368, 499, 11370, 499, 11372, 499, 11379, 499, 11382, 499, 11393, 499, 11395, 499, 11397, 499, 11399, 499, 11401, 499, 11403, 499, 11405, 499, 11407, 499, 11409, 499, 11411, 499, 11413, 499, 11415, 499, 11417, 499, 11419, 499, 11421, 499, 11423, 499, 11425, 499, 11427, 499, 11429, 499, 11431, 499, 11433, 499, 11435, 499, 11437, 499, 11439, 499, 11441, 499, 11443, 499, 11445, 499, 11447, 499, 11449, 499, 11451, 499, 11453, 499, 11455, 499, 11457, 499, 11459, 499, 11461, 499, 11463, 499, 11465, 499, 11467, 499, 11469, 499, 11471, 499, 11473, 499, 11475, 499, 11477, 499, 11479, 499, 11481, 499, 11483, 499, 11485, 499, 11487, 499, 11489, 499, 11491, 499, 11500, 499, 11502, 499, 11507, 499, 11559, -6764, 11565, -6764, 42561, 499, 42563, 499, 42565, 499, 42567, 499, 42569, 499, 42571, 499, 42573, 499, 42575, 499, 42577, 499, 42579, 499, 42581, 499, 42583, 499, 42585, 499, 42587, 499, 42589, 499, 42591, 499, 42593, 499, 42595, 499, 42597, 499, 42599, 499, 42601, 499, 42603, 499, 42605, 499, 42625, 499, 42627, 499, 42629, 499, 42631, 499, 42633, 499, 42635, 499, 42637, 499, 42639, 499, 42641, 499, 42643, 499, 42645, 499, 42647, 499, 42649, 499, 42651, 499, 42787, 499, 42789, 499, 42791, 499, 42793, 499, 42795, 499, 42797, 499, 42799, 499, 42803, 499, 42805, 499, 42807, 499, 42809, 499, 42811, 499, 42813, 499, 42815, 499, 42817, 499, 42819, 499, 42821, 499, 42823, 499, 42825, 499, 42827, 499, 42829, 499, 42831, 499, 42833, 499, 42835, 499, 42837, 499, 42839, 499, 42841, 499, 42843, 499, 42845, 499, 42847, 499, 42849, 499, 42851, 499, 42853, 499, 42855, 499, 42857, 499, 42859, 499, 42861, 499, 42863, 499, 42874, 499, 42876, 499, 42879, 499, 42881, 499, 42883, 499, 42885, 499, 42887, 499, 42892, 499, 42897, 499, 42899, 499, 42900, 548, 42903, 499, 42905, 499, 42907, 499, 42909, 499, 42911, 499, 42913, 499, 42915, 499, 42917, 499, 42919, 499, 42921, 499, 42933, 499, 42935, 499, 42937, 499, 42939, 499, 42941, 499, 42943, 499, 42947, 499, 43859, -428]);
    var propsOffsets_1191182379 = new Int16Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 41, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 101, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 102, 103, 41, 41, 41, 41, 41, 41, 41, 41, 104, 41, 41, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 118, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 121, 121, 122, 123, 124, 125, 126, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 137, 41, 41, 144, 137, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 137, 168, 169, 137, 170, 171, 172, 173, 137, 174, 175, 176, 177, 178, 179, 137, 137, 180, 181, 182, 183, 137, 184, 137, 185, 41, 41, 41, 41, 41, 41, 41, 186, 187, 41, 188, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 41, 41, 41, 41, 41, 41, 41, 41, 189, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 41, 41, 41, 41, 190, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 41, 41, 41, 41, 191, 192, 193, 194, 137, 137, 137, 137, 195, 196, 197, 198, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 199, 41, 41, 41, 41, 41, 41, 41, 41, 41, 200, 201, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 41, 41, 202, 41, 41, 203, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 204, 205, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 78, 206, 207, 208, 209, 210, 211, 137, 212, 213, 214, 215, 216, 217, 218, 219, 78, 78, 78, 78, 220, 221, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 222, 137, 223, 137, 137, 224, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 225, 226, 227, 156, 156, 156, 156, 156, 228, 229, 230, 156, 231, 232, 156, 156, 233, 234, 235, 236, 237, 137, 72, 238, 72, 72, 72, 72, 72, 239, 240, 241, 242, 243, 244, 245, 246, 247, 72, 248, 137, 137, 137, 137, 137, 137, 137, 249, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 250, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 251, 41, 252, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 253, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 254, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 121, 121, 121, 121, 255, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 249, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 256, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 249, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 249, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 249, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 249, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 249, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 249, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 249, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 249, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 249, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 249, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 249, 257, 258, 259, 260, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 249, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 261, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 261]);
    var propsIndices_1191182380 = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 4, 5, 5, 6, 7, 6, 5, 5, 8, 9, 5, 10, 11, 12, 11, 11, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 11, 5, 14, 14, 14, 5, 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 8, 5, 9, 16, 17, 16, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 8, 14, 9, 14, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 5, 7, 7, 7, 7, 20, 5, 21, 20, 22, 23, 14, 24, 20, 21, 25, 26, 27, 27, 21, 28, 5, 5, 21, 27, 22, 29, 30, 30, 30, 5, 31, 31, 31, 31, 31, 31, 15, 31, 31, 31, 31, 31, 31, 31, 31, 31, 15, 31, 31, 31, 31, 31, 31, 14, 15, 31, 31, 31, 31, 31, 15, 18, 32, 32, 32, 32, 32, 32, 18, 32, 32, 32, 32, 32, 32, 32, 32, 32, 18, 32, 32, 32, 32, 32, 32, 14, 18, 32, 32, 32, 32, 32, 18, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 15, 18, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 15, 18, 31, 32, 31, 32, 31, 32, 31, 32, 31, 18, 33, 28, 31, 32, 31, 32, 18, 31, 32, 31, 32, 31, 32, 33, 28, 15, 18, 31, 32, 31, 32, 31, 32, 28, 15, 18, 31, 32, 31, 32, 31, 32, 15, 18, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 15, 18, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 31, 32, 31, 32, 31, 32, 28, 18, 15, 15, 18, 15, 18, 15, 15, 18, 15, 15, 15, 18, 18, 15, 15, 15, 15, 18, 15, 15, 18, 15, 15, 15, 18, 18, 18, 15, 15, 18, 15, 31, 32, 15, 18, 15, 18, 15, 15, 18, 15, 18, 18, 15, 18, 15, 31, 32, 15, 15, 15, 18, 15, 18, 15, 15, 18, 18, 34, 15, 18, 18, 18, 34, 34, 34, 34, 33, 35, 28, 33, 35, 28, 33, 35, 28, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 18, 31, 32, 31, 32, 31, 32, 15, 18, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 32, 33, 35, 28, 31, 32, 15, 15, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 15, 18, 31, 32, 15, 18, 15, 18, 15, 18, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 18, 18, 18, 18, 18, 18, 15, 15, 18, 15, 15, 18, 18, 15, 18, 15, 15, 15, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 34, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 36, 36, 36, 36, 36, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 38, 16, 16, 16, 16, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 38, 38, 16, 16, 16, 16, 16, 16, 21, 21, 21, 21, 21, 21, 16, 16, 36, 36, 36, 36, 36, 16, 16, 16, 16, 16, 16, 16, 37, 16, 38, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 39, 39, 39, 39, 39, 40, 39, 39, 39, 39, 39, 39, 39, 40, 40, 39, 40, 39, 40, 39, 39, 41, 42, 42, 42, 42, 41, 43, 42, 42, 42, 42, 42, 44, 44, 45, 45, 45, 45, 46, 46, 42, 42, 42, 42, 45, 45, 42, 45, 45, 42, 42, 47, 47, 47, 47, 48, 42, 42, 42, 42, 40, 40, 40, 49, 49, 39, 49, 49, 50, 40, 42, 42, 42, 40, 40, 40, 42, 42, 51, 40, 40, 40, 42, 42, 42, 42, 40, 41, 42, 42, 40, 52, 53, 53, 52, 53, 53, 52, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 15, 18, 15, 18, 54, 16, 15, 18, 55, 55, 36, 18, 18, 18, 56, 15, 55, 55, 55, 55, 21, 57, 31, 56, 31, 31, 31, 55, 31, 55, 31, 31, 32, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 55, 15, 15, 15, 15, 15, 15, 15, 31, 31, 32, 32, 32, 32, 32, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 32, 32, 32, 32, 32, 15, 28, 28, 33, 58, 58, 28, 28, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 28, 28, 28, 18, 33, 28, 14, 15, 18, 33, 15, 18, 18, 15, 15, 15, 31, 31, 15, 31, 15, 15, 15, 31, 15, 15, 15, 15, 31, 31, 31, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 31, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 32, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 32, 32, 18, 32, 18, 18, 18, 32, 18, 18, 18, 18, 32, 32, 32, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 31, 32, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 59, 40, 40, 40, 40, 40, 60, 60, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 31, 32, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 18, 31, 32, 31, 32, 15, 18, 31, 32, 15, 18, 31, 32, 31, 32, 31, 32, 15, 18, 31, 32, 31, 32, 31, 32, 15, 18, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 15, 18, 31, 32, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 55, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 55, 55, 38, 61, 61, 61, 61, 61, 61, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 28, 18, 61, 62, 55, 55, 20, 20, 7, 63, 42, 40, 40, 40, 40, 42, 40, 40, 40, 64, 42, 40, 40, 40, 40, 40, 40, 42, 42, 42, 42, 42, 42, 40, 40, 42, 40, 40, 64, 65, 40, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 75, 76, 77, 78, 79, 80, 81, 82, 83, 81, 40, 42, 81, 74, 63, 63, 63, 63, 63, 63, 63, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 63, 63, 84, 84, 84, 84, 81, 81, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 85, 85, 85, 85, 85, 85, 14, 14, 86, 6, 6, 87, 11, 88, 20, 20, 40, 40, 40, 40, 40, 40, 40, 40, 89, 90, 91, 88, 92, 93, 88, 88, 94, 94, 95, 95, 95, 95, 95, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 96, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 97, 98, 99, 89, 90, 91, 100, 101, 39, 39, 45, 42, 40, 40, 40, 40, 40, 42, 40, 40, 42, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 6, 103, 103, 88, 94, 94, 104, 94, 94, 94, 94, 105, 105, 105, 105, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 95, 94, 95, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 95, 88, 94, 40, 40, 40, 40, 40, 40, 40, 85, 20, 40, 40, 40, 40, 42, 40, 96, 96, 40, 40, 20, 42, 40, 40, 42, 94, 94, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94, 94, 94, 106, 106, 94, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 93, 92, 94, 107, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 40, 42, 40, 40, 42, 40, 40, 42, 42, 42, 40, 42, 42, 40, 42, 40, 40, 40, 42, 40, 42, 40, 42, 40, 42, 40, 40, 93, 93, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 94, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 40, 40, 40, 40, 40, 40, 40, 42, 40, 109, 109, 20, 5, 5, 5, 109, 63, 63, 42, 110, 110, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 40, 40, 40, 40, 109, 40, 40, 40, 40, 40, 40, 40, 40, 40, 109, 40, 40, 40, 109, 40, 40, 40, 40, 40, 63, 63, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 42, 42, 42, 63, 63, 81, 63, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 93, 93, 93, 93, 93, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 93, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 42, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 85, 42, 40, 40, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 97, 98, 99, 40, 40, 40, 42, 40, 40, 42, 42, 40, 40, 40, 40, 40, 51, 51, 51, 111, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 112, 34, 34, 34, 34, 34, 34, 34, 112, 34, 34, 112, 34, 34, 34, 34, 34, 51, 111, 113, 34, 111, 111, 111, 51, 51, 51, 51, 51, 51, 51, 51, 111, 111, 111, 111, 114, 111, 111, 34, 40, 42, 40, 40, 51, 51, 51, 115, 115, 115, 115, 115, 115, 115, 115, 34, 34, 51, 51, 61, 61, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 61, 38, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 111, 111, 55, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 55, 55, 55, 34, 34, 34, 34, 55, 55, 117, 34, 118, 111, 111, 51, 51, 51, 51, 55, 55, 111, 111, 55, 55, 119, 119, 114, 34, 55, 55, 55, 55, 55, 55, 55, 55, 118, 55, 55, 55, 55, 115, 115, 55, 115, 34, 34, 51, 51, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 34, 34, 7, 7, 120, 120, 120, 120, 120, 120, 59, 7, 34, 61, 40, 55, 55, 51, 51, 111, 55, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 115, 55, 34, 115, 55, 34, 34, 55, 55, 117, 55, 111, 111, 111, 51, 51, 55, 55, 55, 55, 51, 51, 55, 55, 51, 51, 114, 55, 55, 55, 51, 55, 55, 55, 55, 55, 55, 55, 115, 115, 115, 34, 55, 115, 55, 55, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 51, 51, 34, 34, 34, 51, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 51, 51, 111, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 55, 34, 34, 34, 34, 34, 55, 55, 117, 34, 111, 111, 111, 51, 51, 51, 51, 51, 55, 51, 51, 111, 55, 111, 111, 114, 55, 55, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 51, 51, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 61, 7, 55, 55, 55, 55, 55, 55, 55, 34, 51, 51, 51, 51, 51, 51, 55, 51, 111, 111, 55, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 55, 34, 34, 34, 34, 34, 55, 55, 117, 34, 118, 51, 111, 51, 51, 51, 51, 55, 55, 111, 119, 55, 55, 119, 119, 114, 55, 55, 55, 55, 55, 55, 55, 51, 121, 118, 55, 55, 55, 55, 115, 115, 55, 34, 34, 34, 51, 51, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 59, 34, 120, 120, 120, 120, 120, 120, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 51, 34, 55, 34, 34, 34, 34, 34, 34, 55, 55, 55, 34, 34, 34, 55, 34, 34, 112, 34, 55, 55, 55, 34, 34, 55, 34, 55, 34, 34, 55, 55, 55, 34, 34, 55, 55, 55, 34, 34, 34, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 118, 111, 51, 111, 111, 55, 55, 55, 111, 111, 111, 55, 119, 119, 119, 114, 55, 55, 34, 55, 55, 55, 55, 55, 55, 118, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 120, 120, 120, 20, 20, 20, 20, 20, 20, 7, 20, 55, 55, 55, 55, 55, 51, 111, 111, 111, 51, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 34, 51, 51, 51, 111, 111, 111, 111, 55, 51, 51, 122, 55, 51, 51, 51, 114, 55, 55, 55, 55, 55, 55, 55, 123, 124, 55, 34, 34, 34, 55, 55, 55, 55, 55, 34, 34, 51, 51, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 55, 61, 125, 125, 125, 125, 125, 125, 125, 59, 34, 51, 111, 111, 61, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 55, 55, 117, 34, 111, 126, 119, 111, 118, 111, 111, 55, 126, 119, 119, 55, 119, 119, 51, 114, 55, 55, 55, 55, 55, 55, 55, 118, 118, 55, 55, 55, 55, 55, 55, 55, 34, 55, 34, 34, 51, 51, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 51, 51, 111, 111, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 114, 114, 34, 118, 111, 111, 51, 51, 51, 51, 55, 111, 111, 111, 55, 119, 119, 119, 114, 34, 59, 55, 55, 55, 55, 34, 34, 34, 118, 120, 120, 120, 120, 120, 120, 120, 34, 34, 34, 51, 51, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 120, 120, 120, 120, 120, 120, 120, 120, 120, 59, 34, 34, 34, 34, 34, 34, 55, 51, 111, 111, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 127, 55, 55, 55, 55, 118, 111, 111, 51, 51, 51, 55, 51, 55, 111, 111, 119, 111, 119, 119, 119, 118, 55, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 111, 111, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 34, 22, 51, 51, 51, 51, 128, 128, 114, 55, 55, 55, 55, 7, 34, 34, 34, 34, 34, 34, 38, 51, 129, 129, 129, 129, 51, 51, 51, 61, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 55, 34, 55, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 34, 22, 51, 51, 51, 51, 130, 130, 114, 51, 51, 34, 55, 55, 34, 34, 34, 34, 34, 55, 38, 55, 131, 131, 131, 131, 51, 51, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 22, 22, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 59, 59, 59, 61, 61, 61, 61, 61, 61, 61, 61, 132, 61, 61, 61, 61, 61, 61, 59, 61, 59, 59, 59, 42, 42, 59, 59, 59, 59, 59, 59, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 59, 42, 59, 42, 59, 133, 8, 9, 8, 9, 111, 111, 34, 34, 34, 115, 34, 34, 34, 34, 55, 34, 34, 34, 34, 115, 34, 34, 34, 34, 115, 34, 34, 34, 34, 115, 34, 34, 34, 34, 115, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 115, 34, 34, 34, 55, 55, 55, 55, 134, 135, 136, 137, 136, 136, 138, 136, 138, 135, 135, 135, 135, 51, 111, 135, 136, 40, 40, 114, 61, 40, 40, 34, 34, 34, 34, 34, 51, 51, 51, 51, 51, 51, 136, 51, 51, 51, 51, 55, 51, 51, 51, 51, 136, 51, 51, 51, 51, 136, 51, 51, 51, 51, 136, 51, 51, 51, 51, 136, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 136, 51, 51, 51, 55, 59, 59, 59, 59, 59, 59, 59, 59, 42, 59, 59, 59, 59, 59, 59, 55, 59, 59, 61, 61, 61, 61, 61, 59, 59, 59, 59, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 112, 34, 34, 34, 34, 111, 111, 51, 121, 51, 51, 111, 51, 51, 51, 51, 51, 117, 111, 114, 114, 111, 111, 51, 51, 34, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 61, 61, 61, 61, 61, 61, 34, 34, 34, 34, 34, 34, 111, 111, 51, 51, 34, 34, 34, 34, 51, 51, 51, 34, 111, 111, 111, 34, 34, 111, 111, 111, 111, 111, 111, 111, 34, 34, 34, 51, 51, 51, 51, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 111, 111, 51, 51, 111, 111, 111, 111, 111, 111, 42, 34, 111, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 111, 111, 111, 51, 59, 59, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 55, 15, 55, 55, 55, 55, 55, 15, 55, 55, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 61, 36, 18, 18, 18, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 55, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 55, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 40, 40, 40, 61, 61, 61, 61, 61, 61, 61, 61, 61, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 55, 55, 18, 18, 18, 18, 18, 18, 55, 55, 62, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 59, 61, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 4, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 8, 9, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 61, 61, 61, 140, 140, 140, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 51, 51, 114, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 51, 114, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 51, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 55, 51, 51, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 51, 111, 51, 51, 51, 51, 51, 51, 51, 111, 111, 111, 111, 111, 111, 111, 111, 51, 111, 111, 51, 51, 51, 51, 51, 51, 51, 51, 51, 114, 51, 61, 61, 61, 38, 61, 61, 61, 7, 34, 40, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 55, 55, 55, 55, 55, 55, 5, 5, 5, 5, 5, 5, 62, 5, 5, 5, 5, 51, 51, 51, 24, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 38, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 51, 51, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 65, 34, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 51, 51, 51, 111, 111, 111, 111, 51, 51, 111, 111, 111, 55, 55, 55, 55, 111, 111, 51, 111, 111, 111, 111, 111, 111, 64, 40, 42, 55, 55, 55, 55, 20, 55, 55, 55, 5, 5, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 120, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 40, 42, 111, 111, 51, 55, 55, 61, 61, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 51, 111, 51, 51, 51, 51, 51, 51, 51, 55, 114, 111, 51, 111, 111, 51, 51, 51, 51, 51, 51, 51, 51, 111, 111, 111, 111, 111, 111, 51, 51, 40, 40, 40, 40, 40, 40, 40, 40, 55, 55, 42, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 61, 61, 61, 61, 61, 61, 61, 38, 61, 61, 61, 61, 61, 61, 55, 55, 40, 40, 40, 40, 40, 42, 42, 42, 42, 42, 42, 40, 40, 42, 60, 42, 42, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 51, 51, 51, 51, 111, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 34, 34, 112, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 117, 118, 51, 51, 51, 51, 51, 119, 51, 119, 111, 111, 119, 119, 51, 119, 141, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 61, 61, 61, 61, 61, 61, 61, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 40, 42, 40, 40, 40, 40, 40, 40, 40, 59, 59, 59, 59, 59, 59, 59, 59, 59, 55, 55, 55, 51, 51, 111, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 51, 51, 51, 51, 111, 111, 51, 51, 141, 114, 51, 51, 34, 34, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 117, 111, 51, 51, 111, 111, 111, 51, 111, 51, 51, 51, 141, 141, 55, 55, 55, 55, 55, 55, 55, 55, 61, 61, 61, 61, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 111, 111, 111, 111, 111, 111, 111, 51, 51, 51, 51, 51, 51, 51, 51, 111, 111, 51, 117, 55, 55, 55, 61, 61, 61, 61, 61, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 34, 34, 34, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 38, 38, 38, 38, 38, 38, 61, 61, 18, 18, 18, 18, 18, 18, 18, 18, 18, 55, 55, 55, 55, 55, 55, 55, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 55, 55, 15, 15, 15, 61, 61, 61, 61, 61, 61, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 40, 40, 40, 61, 47, 42, 42, 42, 42, 42, 40, 40, 42, 42, 42, 42, 40, 111, 47, 47, 47, 47, 47, 47, 47, 34, 34, 34, 34, 42, 34, 34, 34, 34, 34, 34, 40, 34, 34, 111, 40, 40, 34, 55, 55, 55, 55, 55, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 36, 36, 36, 38, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 38, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 38, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 36, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 40, 40, 42, 40, 40, 40, 40, 40, 40, 40, 42, 40, 40, 53, 142, 42, 44, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 41, 65, 65, 42, 55, 40, 52, 42, 40, 42, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 32, 32, 32, 32, 28, 143, 18, 18, 15, 18, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 15, 18, 15, 18, 15, 18, 32, 32, 32, 32, 32, 32, 32, 32, 31, 31, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 55, 55, 31, 31, 31, 31, 31, 31, 55, 55, 32, 32, 32, 32, 32, 32, 32, 32, 31, 31, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 31, 31, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 55, 55, 31, 31, 31, 31, 31, 31, 55, 55, 32, 32, 32, 32, 32, 32, 32, 32, 55, 31, 55, 31, 55, 31, 55, 31, 32, 32, 32, 32, 32, 32, 32, 32, 31, 31, 31, 31, 31, 31, 31, 31, 32, 144, 32, 144, 32, 144, 32, 144, 32, 144, 32, 144, 32, 144, 55, 55, 32, 32, 32, 32, 32, 32, 32, 32, 145, 145, 145, 145, 145, 145, 145, 145, 32, 32, 32, 32, 32, 32, 32, 32, 145, 145, 145, 145, 145, 145, 145, 145, 32, 32, 32, 32, 32, 32, 32, 32, 145, 145, 145, 145, 145, 145, 145, 145, 32, 32, 32, 32, 32, 55, 32, 32, 31, 31, 31, 146, 145, 21, 144, 21, 21, 57, 32, 32, 32, 55, 32, 32, 31, 146, 31, 146, 145, 57, 57, 57, 32, 32, 32, 144, 55, 55, 32, 32, 31, 31, 31, 146, 55, 57, 57, 57, 32, 32, 32, 144, 32, 32, 32, 32, 31, 31, 31, 146, 31, 57, 147, 147, 55, 55, 32, 32, 32, 55, 32, 32, 31, 146, 31, 146, 145, 147, 21, 55, 148, 148, 149, 149, 149, 149, 149, 149, 149, 149, 149, 24, 24, 24, 150, 151, 62, 152, 62, 62, 62, 62, 5, 153, 23, 29, 8, 23, 23, 29, 8, 23, 5, 5, 5, 5, 153, 153, 153, 5, 154, 155, 156, 157, 158, 159, 160, 19, 6, 6, 6, 161, 161, 5, 153, 153, 5, 23, 29, 5, 153, 5, 153, 17, 17, 5, 5, 5, 162, 8, 9, 153, 153, 153, 5, 5, 5, 5, 5, 5, 5, 5, 14, 5, 17, 5, 5, 153, 5, 5, 5, 5, 5, 5, 5, 149, 24, 24, 24, 24, 24, 163, 164, 165, 166, 167, 24, 24, 24, 24, 24, 24, 27, 36, 55, 55, 27, 27, 27, 27, 27, 27, 168, 168, 169, 170, 171, 36, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 168, 168, 169, 170, 171, 55, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 55, 55, 55, 7, 7, 7, 7, 7, 7, 7, 7, 172, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 40, 40, 47, 47, 40, 40, 40, 40, 47, 47, 47, 40, 40, 60, 60, 60, 60, 40, 60, 60, 60, 47, 47, 40, 42, 40, 47, 47, 42, 42, 42, 42, 40, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 174, 174, 33, 174, 20, 174, 174, 33, 20, 174, 28, 33, 33, 33, 28, 28, 33, 33, 33, 28, 20, 33, 174, 20, 14, 33, 33, 33, 33, 33, 20, 20, 174, 174, 174, 20, 33, 20, 146, 20, 33, 20, 146, 146, 33, 33, 25, 28, 33, 33, 15, 33, 28, 22, 22, 22, 22, 28, 20, 174, 28, 28, 33, 33, 169, 14, 14, 14, 14, 33, 28, 28, 28, 28, 20, 14, 20, 20, 18, 59, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 140, 140, 140, 15, 18, 140, 140, 140, 140, 30, 20, 20, 55, 55, 55, 55, 14, 14, 14, 14, 14, 20, 20, 20, 20, 20, 176, 176, 20, 20, 20, 20, 14, 20, 20, 14, 20, 20, 14, 20, 20, 20, 20, 20, 20, 20, 176, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 177, 176, 176, 20, 20, 14, 20, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 176, 14, 14, 14, 14, 176, 14, 14, 176, 14, 14, 14, 14, 14, 10, 26, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 176, 14, 176, 14, 14, 14, 14, 14, 169, 169, 14, 169, 169, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 176, 14, 14, 176, 14, 14, 176, 14, 176, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 176, 14, 176, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 176, 176, 176, 176, 176, 14, 14, 176, 176, 14, 14, 176, 176, 14, 14, 14, 14, 14, 14, 176, 176, 14, 14, 176, 176, 14, 14, 176, 176, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 176, 176, 176, 176, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 176, 176, 176, 176, 14, 14, 14, 14, 14, 14, 176, 176, 176, 176, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 20, 20, 20, 20, 20, 20, 20, 20, 8, 9, 8, 9, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 14, 20, 20, 20, 20, 20, 20, 20, 178, 179, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 20, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 59, 20, 20, 20, 20, 20, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 14, 14, 14, 14, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 30, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 14, 14, 14, 14, 14, 14, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 59, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 14, 14, 14, 14, 8, 9, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 8, 9, 8, 9, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 8, 9, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 169, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 169, 169, 169, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 181, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 20, 20, 14, 14, 14, 14, 14, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 55, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 55, 15, 18, 15, 15, 15, 18, 18, 15, 18, 15, 18, 15, 18, 15, 15, 15, 15, 18, 15, 18, 18, 15, 18, 18, 18, 18, 18, 18, 36, 36, 15, 15, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 18, 20, 20, 20, 20, 20, 20, 15, 18, 15, 18, 40, 40, 40, 15, 18, 55, 55, 55, 55, 55, 5, 5, 5, 5, 125, 5, 5, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 55, 18, 55, 55, 55, 55, 55, 18, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 36, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 114, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 5, 5, 23, 29, 23, 29, 5, 5, 5, 23, 29, 5, 23, 29, 5, 5, 5, 5, 5, 5, 5, 5, 5, 62, 5, 5, 62, 5, 23, 29, 5, 5, 23, 29, 8, 9, 8, 9, 8, 9, 8, 9, 5, 5, 5, 5, 5, 37, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 62, 62, 5, 5, 5, 5, 62, 5, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 20, 20, 5, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 20, 20, 20, 20, 174, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 174, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 149, 5, 5, 5, 20, 38, 34, 140, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 20, 20, 8, 9, 8, 9, 8, 9, 8, 9, 62, 8, 9, 9, 20, 140, 140, 140, 140, 140, 140, 140, 140, 140, 182, 65, 41, 64, 183, 183, 62, 38, 38, 38, 38, 38, 174, 20, 175, 175, 175, 38, 34, 5, 20, 20, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 34, 112, 34, 112, 34, 112, 34, 34, 34, 34, 34, 34, 112, 112, 34, 112, 112, 34, 112, 112, 34, 112, 112, 34, 112, 112, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 112, 34, 34, 55, 55, 184, 184, 21, 21, 38, 185, 22, 62, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 112, 34, 34, 112, 34, 112, 34, 112, 34, 34, 34, 34, 34, 34, 112, 112, 34, 112, 112, 34, 112, 112, 34, 112, 112, 34, 112, 112, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 112, 34, 34, 112, 112, 112, 112, 5, 38, 38, 185, 22, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 55, 59, 59, 186, 186, 186, 186, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 174, 174, 55, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 120, 120, 120, 120, 120, 120, 120, 120, 174, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 174, 174, 174, 59, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 174, 174, 174, 174, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 174, 174, 174, 174, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 174, 174, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 174, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 38, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 38, 38, 38, 38, 38, 38, 61, 61, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 38, 5, 5, 5, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 34, 40, 60, 60, 60, 5, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 5, 37, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 36, 36, 40, 40, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 40, 40, 61, 61, 61, 61, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 37, 37, 37, 37, 37, 37, 37, 37, 37, 16, 16, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 18, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 36, 18, 18, 18, 18, 18, 18, 18, 18, 15, 18, 15, 18, 15, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 37, 187, 187, 15, 18, 15, 18, 34, 15, 18, 15, 18, 18, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 15, 15, 15, 15, 18, 15, 15, 15, 15, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 55, 55, 15, 18, 15, 15, 15, 15, 18, 15, 18, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 15, 18, 34, 36, 36, 18, 34, 34, 34, 34, 34, 34, 34, 51, 34, 34, 34, 114, 34, 34, 34, 34, 51, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 111, 51, 51, 111, 20, 20, 20, 20, 114, 55, 55, 55, 120, 120, 120, 120, 120, 120, 59, 59, 7, 25, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 5, 5, 5, 5, 55, 55, 55, 55, 55, 55, 55, 55, 111, 111, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 114, 51, 55, 55, 55, 55, 55, 55, 55, 55, 61, 61, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 34, 34, 34, 34, 34, 34, 61, 61, 61, 34, 61, 34, 34, 51, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 51, 51, 51, 51, 42, 42, 42, 61, 61, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 111, 141, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 61, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 51, 51, 51, 111, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 117, 111, 111, 51, 51, 51, 51, 111, 111, 51, 51, 111, 111, 141, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 55, 38, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 61, 61, 34, 34, 34, 34, 34, 51, 38, 34, 34, 34, 34, 34, 34, 34, 34, 34, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 51, 51, 51, 51, 51, 111, 111, 51, 51, 111, 111, 51, 51, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 51, 34, 34, 34, 34, 34, 34, 34, 34, 51, 111, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 61, 61, 61, 61, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 38, 34, 34, 34, 34, 34, 34, 59, 59, 59, 34, 111, 51, 111, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 40, 34, 40, 40, 42, 34, 34, 40, 40, 34, 34, 34, 34, 34, 40, 40, 34, 40, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 38, 61, 61, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 51, 51, 111, 111, 61, 61, 34, 38, 38, 111, 114, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 187, 36, 36, 36, 36, 18, 18, 18, 18, 18, 18, 18, 18, 18, 36, 16, 16, 55, 55, 55, 55, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 111, 51, 111, 111, 51, 111, 111, 61, 111, 114, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 34, 34, 115, 34, 115, 34, 34, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 34, 115, 34, 115, 34, 34, 115, 115, 34, 34, 34, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 55, 55, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 28, 28, 28, 28, 28, 28, 28, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 28, 28, 28, 28, 28, 55, 55, 55, 55, 55, 190, 191, 190, 192, 192, 192, 192, 192, 192, 192, 192, 192, 168, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 63, 190, 190, 190, 190, 190, 63, 190, 63, 190, 190, 63, 190, 190, 63, 190, 190, 190, 190, 190, 190, 190, 190, 190, 192, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 9, 8, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 93, 93, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 93, 93, 93, 93, 93, 93, 93, 93, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 194, 20, 93, 93, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 153, 153, 153, 153, 153, 153, 153, 170, 171, 153, 55, 55, 55, 55, 55, 55, 40, 40, 40, 40, 40, 40, 40, 42, 42, 42, 42, 42, 42, 42, 40, 40, 153, 152, 152, 195, 195, 170, 171, 170, 171, 170, 171, 170, 171, 170, 171, 170, 171, 170, 171, 170, 171, 5, 5, 170, 171, 153, 153, 153, 153, 195, 195, 195, 196, 153, 196, 55, 153, 196, 153, 153, 152, 170, 171, 170, 171, 170, 171, 161, 153, 153, 168, 197, 169, 169, 169, 55, 153, 172, 161, 153, 55, 55, 55, 55, 105, 105, 105, 94, 105, 93, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 93, 93, 24, 55, 153, 153, 161, 172, 161, 153, 153, 170, 171, 153, 168, 196, 197, 196, 196, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 196, 153, 169, 169, 169, 153, 153, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 170, 153, 171, 21, 195, 21, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 170, 169, 171, 169, 170, 171, 153, 170, 171, 153, 153, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 36, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 36, 36, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 55, 55, 55, 22, 22, 22, 22, 22, 22, 55, 55, 22, 22, 22, 22, 22, 22, 55, 55, 22, 22, 22, 22, 22, 22, 55, 55, 22, 22, 22, 55, 55, 55, 172, 172, 169, 21, 174, 172, 172, 55, 174, 169, 169, 169, 169, 174, 174, 55, 163, 163, 163, 163, 163, 163, 163, 163, 163, 199, 199, 199, 20, 20, 163, 163, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 61, 5, 61, 55, 55, 55, 55, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 55, 55, 55, 59, 59, 59, 59, 59, 59, 59, 59, 59, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 125, 125, 125, 125, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 125, 125, 20, 59, 59, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 42, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 42, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 120, 120, 120, 120, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 140, 34, 34, 34, 34, 34, 34, 34, 34, 140, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 40, 40, 40, 40, 40, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 61, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 61, 140, 140, 140, 140, 140, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 55, 55, 55, 55, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 84, 84, 84, 84, 84, 84, 63, 63, 84, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 84, 84, 63, 63, 63, 84, 63, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 81, 202, 202, 202, 202, 202, 202, 202, 202, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 203, 203, 202, 202, 202, 202, 202, 202, 202, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 63, 63, 63, 63, 63, 63, 202, 202, 202, 202, 202, 202, 202, 202, 202, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 84, 84, 63, 63, 63, 63, 63, 202, 202, 202, 202, 202, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 202, 202, 202, 202, 202, 202, 63, 63, 63, 5, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 63, 63, 63, 81, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 63, 63, 202, 202, 84, 84, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 63, 63, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 84, 51, 51, 51, 63, 51, 51, 63, 63, 63, 63, 63, 51, 42, 51, 40, 84, 84, 84, 84, 63, 84, 84, 84, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 40, 47, 42, 63, 63, 63, 63, 114, 202, 202, 202, 202, 202, 202, 202, 202, 202, 63, 63, 63, 63, 63, 63, 63, 81, 81, 81, 81, 81, 81, 81, 81, 81, 63, 63, 63, 63, 63, 63, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 202, 202, 81, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 202, 202, 202, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 84, 84, 84, 84, 84, 84, 84, 84, 203, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 40, 42, 63, 63, 63, 63, 202, 202, 202, 202, 202, 81, 81, 81, 81, 81, 81, 81, 63, 63, 63, 63, 63, 63, 63, 63, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 63, 5, 5, 5, 5, 5, 5, 5, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 202, 202, 202, 202, 202, 202, 202, 202, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 63, 63, 63, 202, 202, 202, 202, 202, 202, 202, 202, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 63, 63, 63, 63, 63, 81, 81, 81, 81, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 202, 202, 202, 202, 202, 202, 202, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 63, 63, 63, 63, 63, 63, 63, 202, 202, 202, 202, 202, 202, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 40, 40, 40, 40, 93, 93, 93, 93, 93, 93, 93, 93, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 93, 93, 93, 93, 93, 93, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 40, 40, 79, 63, 63, 84, 84, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 84, 63, 63, 63, 63, 63, 63, 63, 63, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 42, 42, 40, 40, 40, 42, 40, 42, 42, 42, 42, 207, 207, 207, 207, 88, 88, 88, 88, 88, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 202, 202, 202, 202, 202, 202, 202, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 63, 63, 63, 63, 63, 63, 63, 111, 51, 111, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 114, 61, 61, 61, 61, 61, 61, 61, 55, 55, 55, 55, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 114, 51, 51, 111, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 112, 34, 112, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 112, 34, 34, 34, 34, 111, 111, 111, 51, 51, 51, 51, 111, 111, 114, 113, 61, 61, 150, 61, 61, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 150, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 40, 40, 40, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 121, 51, 51, 51, 51, 111, 51, 122, 122, 51, 51, 51, 114, 114, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 61, 61, 61, 61, 34, 111, 111, 34, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 117, 61, 61, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 51, 51, 111, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 111, 111, 51, 51, 51, 51, 51, 51, 51, 51, 51, 111, 141, 34, 34, 34, 34, 61, 61, 61, 61, 51, 117, 51, 51, 61, 111, 51, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 34, 61, 34, 61, 61, 61, 55, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 111, 111, 51, 51, 51, 111, 111, 51, 141, 117, 51, 61, 61, 61, 61, 61, 61, 51, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 55, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 61, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 111, 111, 111, 51, 51, 51, 51, 51, 51, 117, 114, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 51, 51, 111, 111, 55, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 55, 34, 34, 34, 34, 34, 55, 117, 117, 34, 118, 111, 51, 111, 111, 111, 111, 55, 55, 111, 111, 55, 55, 119, 119, 141, 55, 55, 34, 55, 55, 55, 55, 55, 55, 118, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 111, 111, 55, 55, 40, 40, 40, 40, 40, 40, 40, 55, 55, 55, 40, 40, 40, 40, 40, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 111, 111, 51, 51, 51, 51, 51, 51, 51, 51, 111, 111, 114, 51, 51, 111, 117, 34, 34, 34, 34, 61, 61, 61, 61, 61, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 61, 61, 55, 61, 40, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 118, 111, 111, 51, 51, 51, 51, 51, 51, 111, 121, 119, 119, 118, 119, 51, 51, 111, 114, 117, 34, 34, 61, 34, 55, 55, 55, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 118, 111, 111, 51, 51, 51, 51, 55, 55, 111, 111, 119, 119, 51, 51, 111, 114, 117, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 34, 34, 34, 34, 51, 51, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 111, 111, 51, 51, 51, 51, 51, 51, 51, 51, 111, 111, 51, 111, 114, 51, 61, 61, 61, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 111, 51, 111, 111, 51, 51, 51, 51, 51, 51, 141, 117, 34, 55, 55, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 51, 51, 51, 111, 111, 51, 51, 51, 51, 111, 51, 51, 51, 51, 114, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 120, 120, 61, 61, 61, 59, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 111, 111, 51, 51, 51, 51, 51, 51, 51, 51, 51, 111, 114, 117, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 120, 120, 120, 120, 120, 120, 120, 120, 120, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 118, 111, 111, 111, 111, 111, 55, 111, 119, 55, 55, 51, 51, 141, 114, 34, 111, 34, 111, 117, 61, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 111, 111, 51, 51, 51, 51, 55, 55, 51, 51, 111, 111, 111, 111, 114, 34, 61, 34, 111, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 51, 51, 51, 51, 51, 51, 126, 126, 51, 51, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 114, 51, 51, 51, 51, 111, 34, 51, 51, 51, 51, 61, 61, 61, 61, 61, 61, 61, 61, 114, 55, 55, 55, 55, 55, 55, 55, 55, 34, 51, 51, 51, 51, 51, 51, 111, 111, 51, 51, 51, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 111, 51, 114, 61, 61, 61, 34, 61, 61, 61, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 51, 51, 51, 51, 51, 51, 51, 55, 51, 51, 51, 51, 51, 51, 111, 208, 34, 61, 61, 61, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 55, 55, 55, 61, 61, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 55, 111, 51, 51, 51, 51, 51, 51, 51, 111, 51, 51, 111, 51, 51, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 51, 51, 51, 51, 51, 55, 55, 55, 51, 55, 51, 51, 55, 51, 51, 51, 117, 51, 114, 114, 34, 51, 55, 55, 55, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 55, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 111, 111, 111, 111, 111, 55, 51, 51, 55, 111, 111, 51, 111, 114, 34, 55, 55, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 51, 111, 111, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 20, 20, 20, 20, 20, 20, 20, 20, 7, 7, 7, 7, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 61, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 55, 61, 61, 61, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 150, 150, 150, 150, 150, 150, 150, 150, 150, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 47, 47, 47, 47, 47, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 40, 40, 40, 40, 40, 40, 40, 61, 61, 61, 61, 61, 59, 59, 59, 59, 38, 38, 38, 38, 61, 59, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 120, 120, 120, 120, 120, 120, 120, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 61, 61, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 51, 34, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 55, 55, 55, 55, 55, 55, 55, 51, 51, 51, 51, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 38, 38, 5, 38, 51, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 209, 209, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 59, 51, 47, 61, 24, 24, 24, 24, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 55, 55, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 210, 210, 210, 210, 210, 210, 210, 211, 211, 47, 47, 47, 59, 59, 59, 212, 211, 211, 211, 211, 211, 24, 24, 24, 24, 24, 24, 24, 24, 42, 42, 42, 42, 42, 42, 42, 42, 59, 59, 40, 40, 40, 40, 40, 42, 42, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 40, 40, 40, 40, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 210, 210, 210, 210, 210, 210, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 40, 40, 40, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 55, 55, 55, 55, 55, 55, 55, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 28, 28, 28, 28, 28, 28, 28, 55, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 55, 33, 33, 55, 55, 33, 55, 55, 33, 33, 55, 55, 33, 33, 33, 33, 55, 33, 33, 33, 33, 33, 33, 33, 33, 28, 28, 28, 28, 55, 28, 55, 28, 28, 28, 28, 28, 28, 28, 55, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 33, 55, 33, 33, 33, 33, 55, 55, 33, 33, 33, 33, 33, 33, 33, 33, 55, 33, 33, 33, 33, 33, 33, 33, 55, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 33, 55, 33, 33, 33, 33, 55, 33, 33, 33, 33, 33, 55, 33, 55, 55, 55, 33, 33, 33, 33, 33, 33, 33, 55, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 55, 55, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 213, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 169, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 213, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 169, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 213, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 169, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 213, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 169, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 213, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 169, 28, 28, 28, 28, 28, 28, 33, 28, 55, 55, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 59, 59, 59, 59, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 59, 59, 59, 59, 59, 59, 59, 59, 51, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 51, 59, 59, 61, 61, 61, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 51, 51, 51, 51, 51, 55, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 40, 40, 40, 40, 40, 40, 40, 55, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 55, 55, 40, 40, 40, 40, 40, 40, 40, 55, 40, 40, 55, 40, 40, 40, 40, 40, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 40, 40, 40, 40, 40, 40, 40, 38, 38, 38, 38, 38, 38, 38, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 34, 59, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 40, 40, 40, 40, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 7, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 202, 202, 202, 202, 202, 202, 202, 202, 202, 42, 42, 42, 42, 42, 42, 42, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 40, 40, 40, 40, 40, 40, 117, 109, 63, 63, 63, 63, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 63, 63, 63, 63, 81, 81, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 93, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 106, 207, 207, 207, 87, 207, 207, 207, 207, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 93, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 106, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 105, 105, 105, 105, 93, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 93, 105, 105, 93, 105, 93, 93, 105, 93, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 93, 105, 105, 105, 105, 93, 105, 93, 105, 93, 93, 93, 93, 93, 93, 105, 93, 93, 93, 93, 105, 93, 105, 93, 105, 93, 105, 105, 105, 93, 105, 105, 93, 105, 93, 93, 105, 93, 105, 93, 105, 93, 105, 93, 105, 93, 105, 105, 93, 105, 93, 93, 105, 105, 105, 105, 93, 105, 105, 105, 105, 105, 105, 105, 93, 105, 105, 105, 105, 93, 105, 105, 105, 105, 93, 105, 93, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 93, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 93, 93, 93, 93, 93, 105, 105, 105, 93, 105, 105, 105, 105, 105, 93, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 14, 14, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 125, 125, 20, 20, 20, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 20, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 174, 174, 174, 20, 20, 20, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 180, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 180, 180, 180, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 55, 55, 55, 55, 180, 180, 180, 180, 180, 180, 180, 180, 180, 55, 55, 55, 55, 55, 55, 55, 180, 180, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 16, 16, 16, 16, 16, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 20, 20, 20, 20, 20, 55, 55, 55, 20, 20, 20, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 163, 163, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 163, 24, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 163, 163]);
    var propsData_1191182381 = [new Int32Array([16384, 0, 14, 0]), new Int32Array([16384, 0, 16, 0]), new Int32Array([16384, 0, 15, 0]), new Int32Array([16384, 0, 17, 0]), new Int32Array([2048, 0, 17, 0]), new Int32Array([33554432, 0, 18, 0]), new Int32Array([33554432, 0, 10, 0]), new Int32Array([134217728, 0, 10, 0]), new Int32Array([2097152, 0, 18, 0]), new Int32Array([4194304, 0, 18, 0]), new Int32Array([67108864, 0, 9, 0]), new Int32Array([33554432, 0, 12, 0]), new Int32Array([1048576, 0, 9, 0]), new Int32Array([256, 0, 8, 0]), new Int32Array([67108864, 0, 18, 0]), new Int32Array([4, 0, 0, 0]), new Int32Array([268435456, 0, 18, 0]), new Int32Array([524288, 0, 18, 0]), new Int32Array([8, 0, 0, 0]), new Int32Array([2048, 0, 12, 36]), new Int32Array([536870912, 0, 18, 0]), new Int32Array([268435456, 0, 18, 36]), new Int32Array([2, 0, 0, 36]), new Int32Array([8388608, 0, 18, 0]), new Int32Array([32768, 0, 14, 0]), new Int32Array([536870912, 0, 10, 0]), new Int32Array([67108864, 0, 10, 0]), new Int32Array([1024, 0, 8, 36]), new Int32Array([8, 0, 0, 36]), new Int32Array([16777216, 0, 18, 0]), new Int32Array([1024, 0, 18, 36]), new Int32Array([4, 0, 0, 48]), new Int32Array([8, 0, 0, 48]), new Int32Array([4, 0, 0, 36]), new Int32Array([2, 0, 0, 0]), new Int32Array([16, 0, 0, 36]), new Int32Array([1, 0, 0, 36]), new Int32Array([1, 0, 18, 0]), new Int32Array([1, 0, 0, 0]), new Int32Array([32, 230, 13, 10]), new Int32Array([32, 230, 13, 0]), new Int32Array([32, 232, 13, 0]), new Int32Array([32, 220, 13, 0]), new Int32Array([32, 216, 13, 10]), new Int32Array([32, 202, 13, 0]), new Int32Array([32, 220, 13, 10]), new Int32Array([32, 202, 13, 10]), new Int32Array([32, 1, 13, 0]), new Int32Array([32, 1, 13, 10]), new Int32Array([32, 230, 13, 53]), new Int32Array([32, 240, 13, 10]), new Int32Array([32, 0, 13, 0]), new Int32Array([32, 233, 13, 0]), new Int32Array([32, 234, 13, 0]), new Int32Array([1, 0, 18, 53]), new Int32Array([262144, 0, 0, 0]), new Int32Array([33554432, 0, 18, 53]), new Int32Array([268435456, 0, 18, 52]), new Int32Array([4, 0, 0, 52]), new Int32Array([536870912, 0, 0, 0]), new Int32Array([128, 0, 13, 0]), new Int32Array([33554432, 0, 0, 0]), new Int32Array([1048576, 0, 18, 0]), new Int32Array([262144, 0, 3, 0]), new Int32Array([32, 222, 13, 0]), new Int32Array([32, 228, 13, 0]), new Int32Array([32, 10, 13, 0]), new Int32Array([32, 11, 13, 0]), new Int32Array([32, 12, 13, 0]), new Int32Array([32, 13, 13, 0]), new Int32Array([32, 14, 13, 0]), new Int32Array([32, 15, 13, 0]), new Int32Array([32, 16, 13, 0]), new Int32Array([32, 17, 13, 0]), new Int32Array([32, 18, 13, 0]), new Int32Array([32, 19, 13, 0]), new Int32Array([32, 20, 13, 0]), new Int32Array([32, 21, 13, 0]), new Int32Array([32, 22, 13, 0]), new Int32Array([1048576, 0, 3, 0]), new Int32Array([32, 23, 13, 0]), new Int32Array([33554432, 0, 3, 0]), new Int32Array([32, 24, 13, 0]), new Int32Array([32, 25, 13, 0]), new Int32Array([2, 0, 3, 0]), new Int32Array([32768, 0, 11, 0]), new Int32Array([67108864, 0, 4, 0]), new Int32Array([134217728, 0, 4, 0]), new Int32Array([33554432, 0, 4, 0]), new Int32Array([32, 30, 13, 0]), new Int32Array([32, 31, 13, 0]), new Int32Array([32, 32, 13, 0]), new Int32Array([32768, 0, 4, 0]), new Int32Array([262144, 0, 4, 0]), new Int32Array([2, 0, 4, 0]), new Int32Array([2, 0, 4, 48]), new Int32Array([1, 0, 4, 0]), new Int32Array([32, 27, 13, 0]), new Int32Array([32, 28, 13, 0]), new Int32Array([32, 29, 13, 0]), new Int32Array([32, 33, 13, 0]), new Int32Array([32, 34, 13, 0]), new Int32Array([256, 0, 11, 0]), new Int32Array([33554432, 0, 11, 0]), new Int32Array([32, 35, 13, 0]), new Int32Array([2, 0, 4, 36]), new Int32Array([536870912, 0, 4, 0]), new Int32Array([32, 36, 13, 0]), new Int32Array([256, 0, 3, 0]), new Int32Array([1, 0, 3, 0]), new Int32Array([134217728, 0, 3, 0]), new Int32Array([64, 0, 0, 0]), new Int32Array([2, 0, 0, 48]), new Int32Array([32, 7, 13, 10]), new Int32Array([32, 9, 13, 0]), new Int32Array([2, 0, 0, 53]), new Int32Array([256, 0, 0, 0]), new Int32Array([32, 7, 13, 0]), new Int32Array([64, 0, 0, 10]), new Int32Array([64, 0, 0, 48]), new Int32Array([1024, 0, 0, 0]), new Int32Array([32, 0, 13, 10]), new Int32Array([32, 0, 13, 48]), new Int32Array([32, 84, 13, 0]), new Int32Array([32, 91, 13, 10]), new Int32Array([1024, 0, 18, 0]), new Int32Array([32, 0, 0, 0]), new Int32Array([32, 9, 13, 10]), new Int32Array([32, 103, 13, 0]), new Int32Array([32, 107, 13, 0]), new Int32Array([32, 118, 13, 0]), new Int32Array([32, 122, 13, 0]), new Int32Array([33554432, 0, 0, 36]), new Int32Array([32, 216, 13, 0]), new Int32Array([32, 129, 13, 0]), new Int32Array([32, 130, 13, 0]), new Int32Array([32, 0, 13, 53]), new Int32Array([32, 132, 13, 0]), new Int32Array([32, 0, 13, 36]), new Int32Array([2, 0, 0, 10]), new Int32Array([512, 0, 0, 0]), new Int32Array([64, 9, 0, 0]), new Int32Array([32, 214, 13, 0]), new Int32Array([8, 0, 0, 52]), new Int32Array([8, 0, 0, 53]), new Int32Array([16, 0, 0, 48]), new Int32Array([4, 0, 0, 53]), new Int32Array([268435456, 0, 18, 53]), new Int32Array([2048, 0, 17, 53]), new Int32Array([2048, 0, 17, 36]), new Int32Array([32768, 0, 0, 0]), new Int32Array([32768, 0, 3, 0]), new Int32Array([1048576, 0, 18, 36]), new Int32Array([33554432, 0, 18, 36]), new Int32Array([4096, 0, 17, 0]), new Int32Array([8192, 0, 15, 0]), new Int32Array([32768, 0, 1, 0]), new Int32Array([32768, 0, 5, 0]), new Int32Array([32768, 0, 7, 0]), new Int32Array([32768, 0, 2, 0]), new Int32Array([32768, 0, 6, 0]), new Int32Array([33554432, 0, 10, 36]), new Int32Array([67108864, 0, 12, 0]), new Int32Array([262144, 0, 14, 0]), new Int32Array([32768, 0, 19, 0]), new Int32Array([32768, 0, 20, 0]), new Int32Array([32768, 0, 21, 0]), new Int32Array([32768, 0, 22, 0]), new Int32Array([67108864, 0, 9, 36]), new Int32Array([67108864, 0, 18, 36]), new Int32Array([2097152, 0, 18, 36]), new Int32Array([4194304, 0, 18, 36]), new Int32Array([134217728, 0, 10, 36]), new Int32Array([262144, 0, 10, 0]), new Int32Array([536870912, 0, 18, 36]), new Int32Array([512, 0, 0, 36]), new Int32Array([67108864, 0, 18, 48]), new Int32Array([536870912, 0, 18, 48]), new Int32Array([2097152, 0, 18, 53]), new Int32Array([4194304, 0, 18, 53]), new Int32Array([536870912, 0, 0, 36]), new Int32Array([67108864, 0, 18, 53]), new Int32Array([32, 218, 13, 0]), new Int32Array([64, 224, 0, 0]), new Int32Array([32, 8, 13, 10]), new Int32Array([1, 0, 0, 48]), new Int32Array([1024, 0, 0, 36]), new Int32Array([268435456, 0, 0, 0]), new Int32Array([65536, 0, 0, 0]), new Int32Array([131072, 0, 0, 0]), new Int32Array([2, 0, 3, 53]), new Int32Array([32, 26, 13, 0]), new Int32Array([2, 0, 3, 36]), new Int32Array([268435456, 0, 4, 0]), new Int32Array([134217728, 0, 4, 36]), new Int32Array([524288, 0, 18, 36]), new Int32Array([33554432, 0, 12, 36]), new Int32Array([1048576, 0, 9, 36]), new Int32Array([256, 0, 8, 36]), new Int32Array([32768, 0, 18, 0]), new Int32Array([512, 0, 18, 0]), new Int32Array([1024, 0, 8, 0]), new Int32Array([1024, 0, 3, 0]), new Int32Array([536870912, 0, 3, 0]), new Int32Array([4, 0, 3, 0]), new Int32Array([8, 0, 3, 0]), new Int32Array([1024, 0, 11, 0]), new Int32Array([1024, 0, 4, 0]), new Int32Array([32, 9, 0, 0]), new Int32Array([64, 6, 0, 0]), new Int32Array([536870912, 0, 0, 53]), new Int32Array([64, 216, 0, 0]), new Int32Array([64, 226, 0, 0]), new Int32Array([67108864, 0, 0, 36])];
var ConstSet58 = setConstr(4, 6);
var ConstSet59 = setConstr(4);
var ConstSet60 = setConstr(4, 6);
var ConstSet61 = setConstr(4);
var ConstSet62 = setConstr(4, 6);
var ConstSet63 = setConstr(4);
var ConstSet64 = setConstr(4, 6);
var ConstSet65 = setConstr(4);
var ConstSet66 = setConstr();
var ConstSet67 = setConstr(4, 6);
var ConstSet68 = setConstr(4);
var ConstSet69 = setConstr(3);
var ConstSet70 = setConstr();
var ConstSet71 = setConstr(6, 7);
var ConstSet72 = setConstr();
      var NUMBER_RE_603980066 = {nfa: {s: [{kind: 44, cp: 35, next: [1, 2], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}, {kind: 0, cp: 45, next: [2], isGreedy: false, uid: 1, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}, {kind: 38, cp: 35, next: [2, 3], isGreedy: false, uid: 3, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [{Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}], counter: 0}, ranges: [{a: 48, b: 57}], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}, {kind: 45, cp: 35, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}], t: {allZ: [[-1, -1], [-1], [-1, 0], []], z: [[{kind: 11, cp: 36, next: [0], isGreedy: false, uid: 5, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}]]}}, groupsCount: 0, namedGroups: {data: [{Field0: 0, Field1: 0, Field2: [], Field3: 0}, {Field0: 0, Field1: 0, Field2: [], Field3: 0}, {Field0: 0, Field1: 0, Field2: [], Field3: 0}, {Field0: 0, Field1: 0, Field2: [], Field3: 0}, {Field0: 0, Field1: 0, Field2: [], Field3: 0}, {Field0: 0, Field1: 0, Field2: [], Field3: 0}, {Field0: 0, Field1: 0, Field2: [], Field3: 0}, {Field0: 0, Field1: 0, Field2: [], Field3: 0}], counter: 0, first: -1, last: -1}, litOpt: {lit: 0, nfa: {s: [], t: {allZ: [], z: []}}}};
var ConstSet73 = setConstr([97, 122], [65, 90], [48, 57], 95);
var ConstSet74 = setConstr([97, 122], [65, 90], [48, 57], 95);
var ConstSet75 = setConstr([48, 57]);
var ConstSet76 = setConstr([48, 57]);
var ConstSet77 = setConstr(101, 69);
var ConstSet78 = setConstr([48, 57]);
var ConstSet79 = setConstr([48, 57]);

function nimParseBiggestFloat(s_33557274, number_33557275, number_33557275_Idx, start_33557276) {
    var Temporary1;

  var result_33557277 = 0;

  BeforeRet: do {
    var sign_33557278 = false;
    var i_33557279 = start_33557276;
    if ((s_33557274[i_33557279] == 43)) {
    i_33557279 += 1;
    }
    else {
    if ((s_33557274[i_33557279] == 45)) {
    sign_33557278 = true;
    i_33557279 += 1;
    }
    }
    if (((s_33557274[i_33557279] == 78) || (s_33557274[i_33557279] == 110))) {
    if (((s_33557274[(i_33557279 + 1)] == 65) || (s_33557274[(i_33557279 + 1)] == 97))) {
    if (((s_33557274[(i_33557279 + 2)] == 78) || (s_33557274[(i_33557279 + 2)] == 110))) {
    if (!((ConstSet73[s_33557274[(i_33557279 + 3)]] != undefined))) {
    number_33557275[number_33557275_Idx] = NaN;
    result_33557277 = ((i_33557279 + 3) - start_33557276);
    break BeforeRet;
    }
    
    }
    
    }
    
    result_33557277 = 0;
    break BeforeRet;
    }
    
    if (((s_33557274[i_33557279] == 73) || (s_33557274[i_33557279] == 105))) {
    if (((s_33557274[(i_33557279 + 1)] == 78) || (s_33557274[(i_33557279 + 1)] == 110))) {
    if (((s_33557274[(i_33557279 + 2)] == 70) || (s_33557274[(i_33557279 + 2)] == 102))) {
    if (!((ConstSet74[s_33557274[(i_33557279 + 3)]] != undefined))) {
    if (sign_33557278) {
    Temporary1 = -Infinity;
    }
    else {
    Temporary1 = Infinity;
    }
    
    number_33557275[number_33557275_Idx] = Temporary1;
    result_33557277 = ((i_33557279 + 3) - start_33557276);
    break BeforeRet;
    }
    
    }
    
    }
    
    result_33557277 = 0;
    break BeforeRet;
    }
    
    var buf_33557296 = [];
    if (sign_33557278) {
    addChar(buf_33557296, 45);;
    }
    
    Label2: do {
        Label3: while (true) {
        if (!(ConstSet75[s_33557274[i_33557279]] != undefined)) break Label3;
          addChar(buf_33557296, s_33557274[i_33557279]);;
          i_33557279 += 1;
          Label4: do {
              Label5: while (true) {
              if (!(s_33557274[i_33557279] == 95)) break Label5;
                i_33557279 += 1;
              }
          } while (false);
        }
    } while (false);
    if ((s_33557274[i_33557279] == 46)) {
    addChar(buf_33557296, s_33557274[i_33557279]);;
    i_33557279 += 1;
    Label6: do {
        Label7: while (true) {
        if (!(ConstSet76[s_33557274[i_33557279]] != undefined)) break Label7;
          addChar(buf_33557296, s_33557274[i_33557279]);;
          i_33557279 += 1;
          Label8: do {
              Label9: while (true) {
              if (!(s_33557274[i_33557279] == 95)) break Label9;
                i_33557279 += 1;
              }
          } while (false);
        }
    } while (false);
    }
    
    if (((buf_33557296).length == (sign_33557278 ? 1 : 0))) {
    result_33557277 = 0;
    break BeforeRet;
    }
    
    if ((ConstSet77[s_33557274[i_33557279]] != undefined)) {
    addChar(buf_33557296, s_33557274[i_33557279]);;
    i_33557279 += 1;
    if ((s_33557274[i_33557279] == 43)) {
    i_33557279 += 1;
    }
    else {
    if ((s_33557274[i_33557279] == 45)) {
    addChar(buf_33557296, s_33557274[i_33557279]);;
    i_33557279 += 1;
    }
    }
    if (!((ConstSet78[s_33557274[i_33557279]] != undefined))) {
    result_33557277 = 0;
    break BeforeRet;
    }
    
    Label10: do {
        Label11: while (true) {
        if (!(ConstSet79[s_33557274[i_33557279]] != undefined)) break Label11;
          addChar(buf_33557296, s_33557274[i_33557279]);;
          i_33557279 += 1;
          Label12: do {
              Label13: while (true) {
              if (!(s_33557274[i_33557279] == 95)) break Label13;
                i_33557279 += 1;
              }
          } while (false);
        }
    } while (false);
    }
    
    number_33557275[number_33557275_Idx] = parseFloatNative_33557269(buf_33557296);
    result_33557277 = (i_33557279 - start_33557276);
  } while (false);

  return result_33557277;

}
      var STRING_RE_603980112 = {nfa: {s: [{kind: 44, cp: 35, next: [1], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}, {kind: 0, cp: 34, next: [2, 3, 4], isGreedy: false, uid: 2, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}, {kind: 0, cp: 92, next: [5], isGreedy: false, uid: 4, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}, {kind: 39, cp: 35, next: [2, 3, 4], isGreedy: false, uid: 7, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [{Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: -431180709, Field1: 34}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: -2008392537, Field1: 92}], counter: 2}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}, {kind: 0, cp: 34, next: [6], isGreedy: false, uid: 10, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}, {kind: 26, cp: 46, next: [2, 3, 4], isGreedy: false, uid: 5, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}, {kind: 45, cp: 35, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}], t: {allZ: [[0], [-1, -1, -1], [-1], [-1, -1, -1], [1], [-1, -1, -1], []], z: [[{kind: 10, cp: 94, next: [2], isGreedy: false, uid: 1, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}], [{kind: 11, cp: 36, next: [0], isGreedy: false, uid: 11, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}]]}}, groupsCount: 0, namedGroups: {data: [{Field0: 0, Field1: 0, Field2: [], Field3: 0}, {Field0: 0, Field1: 0, Field2: [], Field3: 0}, {Field0: 0, Field1: 0, Field2: [], Field3: 0}, {Field0: 0, Field1: 0, Field2: [], Field3: 0}, {Field0: 0, Field1: 0, Field2: [], Field3: 0}, {Field0: 0, Field1: 0, Field2: [], Field3: 0}, {Field0: 0, Field1: 0, Field2: [], Field3: 0}, {Field0: 0, Field1: 0, Field2: [], Field3: 0}], counter: 0, first: -1, last: -1}, litOpt: {lit: 34, nfa: {s: [{kind: 44, cp: 35, next: [1], isGreedy: true, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}, {kind: 45, cp: 35, next: [], isGreedy: true, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}], t: {allZ: [[0], []], z: [[{kind: 10, cp: 94, next: [0], isGreedy: true, uid: 1, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}]]}}}};
var ConstSet80 = setConstr(6, 7);
    var FormatOpen_452985184 = ["rb", "wb", "w+b", "r+b", "ab"];

function cstrToNimstr(c_33556805) {
      var ln = c_33556805.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_33556805.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_33556805.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}
var ConstSet81 = setConstr(6, 7);
var ConstSet82 = setConstr(8, 0);
var ConstSet83 = setConstr(0, 8);
var ConstSet84 = setConstr(1);
var ConstSet85 = setConstr(1);
var ConstSet86 = setConstr(10, 11);
var ConstSet87 = setConstr(1);
var ConstSet88 = setConstr(10);
var ConstSet89 = setConstr(11);
var ConstSet90 = setConstr(1);
var ConstSet91 = setConstr(6, 7);
var ConstSet92 = setConstr(6, 7);
var ConstSet93 = setConstr(6, 7);
var ConstSet94 = setConstr(0, 8);
var ConstSet95 = setConstr(0, 8);
var ConstSet96 = setConstr(6, 7);
var ConstSet97 = setConstr(0, 8);
var ConstSet98 = setConstr(6, 7);
var ConstSet99 = setConstr(11, 10);
var ConstSet100 = setConstr(10);
var ConstSet101 = setConstr(11);
var ConstSet102 = setConstr(0, 8);
var ConstSet103 = setConstr(0, 8);
var ConstSet104 = setConstr(0, 8);
var ConstSet105 = setConstr(0, 8);
var ConstSet106 = setConstr(0, 8);
var ConstSet107 = setConstr(6, 7);
var ConstSet108 = setConstr(6, 7);

function nimCharToStr(x_33556518) {
  var result_33556519 = [];

    result_33556519 = nimCopy(null, mnewString(1), NTI33554439);
    result_33556519[0] = x_33556518;

  return result_33556519;

}
var ConstSet109 = setConstr(0, 8);
var ConstSet110 = setConstr(0, 8);
var ConstSet111 = setConstr(0, 8);
var ConstSet112 = setConstr(11, 10);
var ConstSet113 = setConstr(8, 0);
var ConstSet114 = setConstr(0, 8);
var ConstSet115 = setConstr(11, 10);
var ConstSet116 = setConstr(8, 0);
var ConstSet117 = setConstr(0, 8);
var ConstSet118 = setConstr(9);
var ConstSet119 = setConstr(9);
var ConstSet120 = setConstr(9);
var ConstSet121 = setConstr(9);
var ConstSet122 = setConstr(9);
var ConstSet123 = setConstr(9);
var ConstSet124 = setConstr(9);
var ConstSet125 = setConstr(6, 7);
var ConstSet126 = setConstr(6, 7);
var ConstSet127 = setConstr(6, 7);
var ConstSet128 = setConstr(0, 8);
var ConstSet129 = setConstr(0, 8);
var ConstSet130 = setConstr(6, 7);
var ConstSet131 = setConstr(0, 8);
var ConstSet132 = setConstr(6, 7);
var ConstSet133 = setConstr(0, 8);
var ConstSet134 = setConstr(0, 8);
var ConstSet135 = setConstr(0, 8);
var ConstSet136 = setConstr(0, 8);
var ConstSet137 = setConstr(6, 7);
var ConstSet138 = setConstr(0, 8);
var ConstSet139 = setConstr(0, 8);
var ConstSet140 = setConstr(6, 7);
var ConstSet141 = setConstr(0, 8);
var ConstSet142 = setConstr(6, 7);
var ConstSet143 = setConstr(0, 8);
var ConstSet144 = setConstr(11);
var ConstSet145 = setConstr(11);
var ConstSet146 = setConstr(11);
var ConstSet147 = setConstr(11);
var ConstSet148 = setConstr(0, 8);
var ConstSet149 = setConstr(0, 8);
var ConstSet150 = setConstr(6, 7);
var ConstSet151 = setConstr(0, 8);
var ConstSet152 = setConstr(0, 8);
var ConstSet153 = setConstr(0, 8);
var ConstSet154 = setConstr(0, 8);
var ConstSet155 = setConstr(0, 8);
var ConstSet156 = setConstr(0, 8);
var ConstSet157 = setConstr(6, 7);
var ConstSet158 = setConstr(0, 8);
var ConstSet159 = setConstr(0, 8);
var ConstSet160 = setConstr(6, 7);
var ConstSet161 = setConstr(0, 8);
var ConstSet162 = setConstr(6, 7);
var ConstSet163 = setConstr(0, 8);
var ConstSet164 = setConstr(0, 8);
var ConstSet165 = setConstr(6, 7);
var ConstSet166 = setConstr(0, 8);
var ConstSet167 = setConstr(0, 8);
var ConstSet168 = setConstr(0, 8);
var ConstSet169 = setConstr(0, 8);
var ConstSet170 = setConstr(0, 8);
var ConstSet171 = setConstr(6, 7);
var ConstSet172 = setConstr(0, 8);
var ConstSet173 = setConstr(0, 8);
var ConstSet174 = setConstr(0, 8);
var ConstSet175 = setConstr(0, 8);
var ConstSet176 = setConstr(0, 8);
var ConstSet177 = setConstr(6, 7);
var ConstSet178 = setConstr(0, 8);
var ConstSet179 = setConstr(0, 8);
var ConstSet180 = setConstr(9, 6);
var ConstSet181 = setConstr(0, 8);
var ConstSet182 = setConstr(6, 7);
var ConstSet183 = setConstr(0, 8);
var ConstSet184 = setConstr(6, 7);
var ConstSet185 = setConstr(0, 8);
var ConstSet186 = setConstr(6, 7);
var ConstSet187 = setConstr(0, 8);
var ConstSet188 = setConstr(0, 8);
var ConstSet189 = setConstr(0, 8);
var ConstSet190 = setConstr(6, 7);
var ConstSet191 = setConstr(0, 8);

function isObj(obj_33557239, subclass_33557240) {
  var result_33557241 = false;

  BeforeRet: do {
    var x_33557242 = obj_33557239;
    if ((x_33557242 == subclass_33557240)) {
    result_33557241 = true;
    break BeforeRet;
    }
    
    Label1: do {
        Label2: while (true) {
        if (!!((x_33557242 == subclass_33557240))) break Label2;
          if ((x_33557242 == null)) {
          result_33557241 = false;
          break BeforeRet;
          }
          
          x_33557242 = x_33557242.base;
        }
    } while (false);
    result_33557241 = true;
    break BeforeRet;
  } while (false);

  return result_33557241;

}
var ConstSet192 = setConstr(0, 8);
var ConstSet193 = setConstr(0, 8);
var ConstSet194 = setConstr(0, 8);
var ConstSet195 = setConstr(0, 8);
var ConstSet196 = setConstr(6, 7);
var ConstSet197 = setConstr(3, 4);
var ConstSet198 = setConstr(0, 8);
var ConstSet199 = setConstr(0, 8);
var ConstSet200 = setConstr(3, 5);
var ConstSet201 = setConstr(0, 8);
var ConstSet202 = setConstr(0, 8);
var ConstSet203 = setConstr(0, 8);
var ConstSet204 = setConstr(6, 7);
var ConstSet205 = setConstr(0, 8);
var ConstSet206 = setConstr(0, 8);
var ConstSet207 = setConstr(8, 0);
var ConstSet208 = setConstr(0, 8);
var ConstSet209 = setConstr(0, 8);
var ConstSet210 = setConstr(6, 7);
var ConstSet211 = setConstr(0, 8);
var ConstSet212 = setConstr(0, 8);
var ConstSet213 = setConstr(9);
var ConstSet214 = setConstr(9);
var ConstSet215 = setConstr(0, 8);
var ConstSet216 = setConstr(11);
var ConstSet217 = setConstr(11);
var ConstSet218 = setConstr(0, 8);
var ConstSet219 = setConstr(11);
var ConstSet220 = setConstr(0, 8);
var ConstSet221 = setConstr(10);
var ConstSet222 = setConstr(0, 8);
var ConstSet223 = setConstr(0, 8);
var ConstSet224 = setConstr(0, 8);
var ConstSet225 = setConstr(11);
var ConstSet226 = setConstr(11);
var ConstSet227 = setConstr(0, 8);
var ConstSet228 = setConstr(11);
var ConstSet229 = setConstr(0, 8);
var ConstSet230 = setConstr(10);
var ConstSet231 = setConstr(0, 8);
var ConstSet232 = setConstr(0, 8);
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}

var objectID_687866018 = [0];
var NilToken_637535713 = {kind: 3, list: [], val: null, number: 0.0, str: [], hashmap: ({data: [], counter: 0}), fun: null, is_macro: false, ffun: null, fis_macro: false, ast: null, params: null, env: null, meta: null};
var TrueToken_637535714 = {kind: 4, list: [], val: null, number: 0.0, str: [], hashmap: ({data: [], counter: 0}), fun: null, is_macro: false, ffun: null, fis_macro: false, ast: null, params: null, env: null, meta: null};
var FalseToken_637535715 = {kind: 5, list: [], val: null, number: 0.0, str: [], hashmap: ({data: [], counter: 0}), fun: null, is_macro: false, ffun: null, fis_macro: false, ast: null, params: null, env: null, meta: null};
if (globalThis.utcInstance_1795163520 === undefined) {
  globalThis.utcInstance_1795163520 = [null];
}
if (globalThis.localInstance_1795163521 === undefined) {
  globalThis.localInstance_1795163521 = [null];
}

function fun_637534264(x_637534267, is_macro_637534268) {
  var result_637534269 = null;

    result_637534269 = {kind: 10, fun: x_637534267, is_macro: is_macro_637534268, list: [], val: null, number: 0.0, str: [], hashmap: ({data: [], counter: 0}), ffun: null, fis_macro: false, ast: null, params: null, env: null, meta: null};

  return result_637534269;

}

function number_637535695(x_637535696) {
  var result_637535697 = null;

    result_637535697 = {kind: 2, number: x_637535696, list: [], val: null, str: [], hashmap: ({data: [], counter: 0}), fun: null, is_macro: false, ffun: null, fis_macro: false, ast: null, params: null, env: null, meta: null};

  return result_637535697;

}

function add_33556420(x_33556421, x_33556421_Idx, y_33556422) {
          if (x_33556421[x_33556421_Idx] === null) { x_33556421[x_33556421_Idx] = []; }
      var off = x_33556421[x_33556421_Idx].length;
      x_33556421[x_33556421_Idx].length += y_33556422.length;
      for (var i = 0; i < y_33556422.length; ++i) {
        x_33556421[x_33556421_Idx][off+i] = y_33556422.charCodeAt(i);
      }
    

  
}

function newSeq_33556826(len_33556828) {
  var result_33556829 = [];

    result_33556829 = new Array(len_33556828); for (var i = 0 ; i < len_33556828 ; ++i) { result_33556829[i] = null; }
  return result_33556829;

}

function unhandledException(e_33556664) {
    var buf_33556665 = [[]];
    if (!(((e_33556664.message).length == 0))) {
    buf_33556665[0].push.apply(buf_33556665[0], makeNimstrLit("Error: unhandled exception: "));;
    buf_33556665[0].push.apply(buf_33556665[0], e_33556664.message);;
    }
    else {
    buf_33556665[0].push.apply(buf_33556665[0], makeNimstrLit("Error: unhandled exception"));;
    }
    
    buf_33556665[0].push.apply(buf_33556665[0], makeNimstrLit(" ["));;
    add_33556420(buf_33556665, 0, e_33556664.name);
    buf_33556665[0].push.apply(buf_33556665[0], makeNimstrLit("]\x0A"));;
    var cbuf_33556666 = toJSStr(buf_33556665[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_33556666);
  }
  else {
    throw cbuf_33556666;
  }
  

  
}

function raiseOverflow() {
    raiseException({message: makeNimstrLit("over- or underflow"), parent: null, m_type: NTI33555122, name: null, trace: [], up: null}, "OverflowDefect");

  
}

function checkOverflowInt(a_33556939) {
        if (a_33556939 > 2147483647 || a_33556939 < -2147483648) raiseOverflow();
  

  
}

function raiseRangeError() {
    raiseException({message: makeNimstrLit("value out of range"), parent: null, m_type: NTI33555130, name: null, trace: [], up: null}, "RangeDefect");

  
}

function addChars_251658415(result_251658417, result_251658417_Idx, x_251658418, start_251658419, n_251658420) {
    var old_251658421 = (result_251658417[result_251658417_Idx]).length;
    (result_251658417[result_251658417_Idx].length = chckRange(addInt(old_251658421, n_251658420), 0, 2147483647));
    Label1: do {
      var iHEX60gensym4_251658435 = 0;
      var i_1778387352 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_1778387352 < n_251658420)) break Label3;
            iHEX60gensym4_251658435 = i_1778387352;
            result_251658417[result_251658417_Idx][chckIndx(addInt(old_251658421, iHEX60gensym4_251658435), 0, (result_251658417[result_251658417_Idx]).length - 1)] = x_251658418.charCodeAt(chckIndx(addInt(start_251658419, iHEX60gensym4_251658435), 0, (x_251658418).length - 1));
            i_1778387352 = addInt(i_1778387352, 1);
          }
      } while (false);
    } while (false);

  
}

function addChars_251658411(result_251658413, result_251658413_Idx, x_251658414) {
    addChars_251658415(result_251658413, result_251658413_Idx, x_251658414, 0, ((x_251658414) == null ? 0 : (x_251658414).length));

  
}

function addInt_251658436(result_251658437, result_251658437_Idx, x_251658438) {
    addChars_251658411(result_251658437, result_251658437_Idx, ((x_251658438) + ""));

  
}

function addInt_251658457(result_251658458, result_251658458_Idx, x_251658459) {
    addInt_251658436(result_251658458, result_251658458_Idx, x_251658459);

  
}

function HEX24_335544323(x_335544324) {
  var result_335544325 = [[]];

    addInt_251658457(result_335544325, 0, x_335544324);

  return result_335544325[0];

}

function isFatPointer_33557132(ti_33557133) {
  var result_33557134 = false;

  BeforeRet: do {
    result_33557134 = !((ConstSet2[ti_33557133.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_33557134;

}

function nimCopyAux(dest_33557145, src_33557146, n_33557147) {
    switch (n_33557147.kind) {
    case 0:
      break;
    case 1:
            dest_33557145[n_33557147.offset] = nimCopy(dest_33557145[n_33557147.offset], src_33557146[n_33557147.offset], n_33557147.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_33557147.sons.length; i++) {
      nimCopyAux(dest_33557145, src_33557146, n_33557147.sons[i]);
    }
    
      break;
    case 3:
            dest_33557145[n_33557147.offset] = nimCopy(dest_33557145[n_33557147.offset], src_33557146[n_33557147.offset], n_33557147.typ);
      for (var i = 0; i < n_33557147.sons.length; ++i) {
        nimCopyAux(dest_33557145, src_33557146, n_33557147.sons[i][1]);
      }
    
      break;
    }

  
}

function raiseIndexError(i_33556755, a_33556756, b_33556757) {
    var Temporary1;

    if ((b_33556757 < a_33556756)) {
    Temporary1 = makeNimstrLit("index out of bounds, the container is empty");
    }
    else {
    Temporary1 = (makeNimstrLit("index ") || []).concat(HEX24_335544323(i_33556755) || [],makeNimstrLit(" not in ") || [],HEX24_335544323(a_33556756) || [],makeNimstrLit(" .. ") || [],HEX24_335544323(b_33556757) || []);
    }
    
    raiseException({message: nimCopy(null, Temporary1, NTI33554439), parent: null, m_type: NTI33555128, name: null, trace: [], up: null}, "IndexDefect");

  
}

function reprEnum(e_33557386, typ_33557387) {
  var result_33557388 = [];

    var tmp_33557389 = false;
    var item_33557390 = typ_33557387.node.sons[e_33557386];
    tmp_33557389 = item_33557390 !== undefined
    if (tmp_33557389) {
    result_33557388 = nimCopy(null, makeNimstrLit(item_33557390.name), NTI33554439);
    }
    else {
      result_33557388 = nimCopy(null, (HEX24_335544323(e_33557386) || []).concat(makeNimstrLit(" (invalid data!)") || []), NTI33554439);
    }
    

  return result_33557388;

}

function HEX2DHEX3D_1744830514(x_1744830516, x_1744830516_Idx, y_1744830517) {
    x_1744830516[x_1744830516_Idx] = (x_1744830516[x_1744830516_Idx] - y_1744830517);

  
}

function round_1744830510(x_1744830512) {
  var result_1744830513 = [0.0];

    if ((0.0 <= x_1744830512)) {
    result_1744830513[0] = Math.round(x_1744830512);
    }
    else {
      result_1744830513[0] = Math.ceil(x_1744830512);
      if ((0.5 <= (result_1744830513[0] - x_1744830512))) {
      HEX2DHEX3D_1744830514(result_1744830513, 0, 1.0);
      }
      
    }
    

  return result_1744830513[0];

}

function round_1778384995(xs_1778384996) {
    var Temporary1;

  var result_1778384997 = null;

  BeforeRet: do {
    if (!(((xs_1778384996).length == 1))) {
    raiseException({message: makeNimstrLit("round only takes one argument!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    if (!((xs_1778384996[chckIndx(0, 0, (xs_1778384996).length - 1)].kind == 2))) {
    raiseException({message: makeNimstrLit("round requires a numeric argument!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    var Temporary1 = xs_1778384996[chckIndx(0, 0, (xs_1778384996).length - 1)];
    if (ConstSet18[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'number\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI637534211)); }
    result_1778384997 = number_637535695(round_1744830510(Temporary1.number));
    break BeforeRet;
  } while (false);

  return result_1778384997;

}

function not_impl_1778384946(xs_1778384947) {
  var result_1778384948 = null;

  BeforeRet: do {
    if (!(((xs_1778384947).length == 1))) {
    raiseException({message: makeNimstrLit("not takes only one argument!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    if ((ConstSet19[xs_1778384947[chckIndx(0, 0, (xs_1778384947).length - 1)].kind] != undefined)) {
    result_1778384948 = TrueToken_637535714;
    break BeforeRet;
    }
    else {
      result_1778384948 = FalseToken_637535715;
      break BeforeRet;
    }
    
  } while (false);

  return result_1778384948;

}

function nimFloatToString_352321654(a_352321655) {
  var result_352321656 = null;

        function nimOnlyDigitsOrMinus(n) {
      return n.toString().match(/^-?\d+$/);
    }
    if (Number.isSafeInteger(a_352321655))
      result_352321656 = a_352321655 === 0 && 1 / a_352321655 < 0 ? "-0.0" : a_352321655+".0"
    else {
      result_352321656 = a_352321655+""
      if(nimOnlyDigitsOrMinus(result_352321656)){
        result_352321656 = a_352321655+".0"
      }
    }
  

  return result_352321656;

}

function addFloat_33557373(result_33557375, result_33557375_Idx, x_33557376) {
    add_33556420(result_33557375, result_33557375_Idx, nimFloatToString_352321654(x_33557376));

  
}

function HEX24_33557369(x_33557371) {
  var result_33557372 = [[]];

    addFloat_33557373(result_33557372, 0, x_33557371);

  return result_33557372[0];

}

function floatTrunc_1744830504(x_1744830505) {
    var Temporary1;

  var result_1744830506 = [];

    if (eqStrings(HEX24_33557369(x_1744830505), HEX24_33557369(round_1744830510(x_1744830505)))) {
    Temporary1 = HEX24_335544323(((x_1744830505) | 0));
    }
    else {
    Temporary1 = HEX24_33557369(x_1744830505);
    }
    
    result_1744830506 = nimCopy(null, Temporary1, NTI33554439);

  return result_1744830506;

}

function isKeywordString_637535710(x_637535711) {
    var Temporary1;

  var result_637535712 = false;

  BeforeRet: do {
    if (!(0 < (x_637535711).length)) Temporary1 = false; else {      Temporary1 = (x_637535711[chckIndx(0, 0, (x_637535711).length - 1)] == 255);    }    result_637535712 = Temporary1;
    break BeforeRet;
  } while (false);

  return result_637535712;

}

function HEX5BHEX5D_973081768(s_973081771, x_973081772) {
  var result_973081773 = [];

    var a_973081775 = x_973081772.a;
    var L_973081777 = addInt(subInt(subInt((s_973081771).length, x_973081772.b), a_973081775), 1);
    result_973081773 = nimCopy(null, mnewString(chckRange(L_973081777, 0, 2147483647)), NTI33554439);
    Label1: do {
      var i_973081782 = 0;
      var i_1778387414 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_1778387414 < L_973081777)) break Label3;
            i_973081782 = i_1778387414;
            result_973081773[chckIndx(i_973081782, 0, (result_973081773).length - 1)] = s_973081771[chckIndx(addInt(i_973081782, a_973081775), 0, (s_973081771).length - 1)];
            i_1778387414 = addInt(i_1778387414, 1);
          }
      } while (false);
    } while (false);

  return result_973081773;

}

function HEX2EHEX2E_973081741(a_973081744, b_973081745) {
  var result_973081748 = ({a: 0, b: 0});

    result_973081748 = nimCopy(result_973081748, {a: a_973081744, b: b_973081745}, NTI973088934);

  return result_973081748;

}

function nsuContinuesWith(s_654312773, substr_654312774, start_654312775) {
            var Temporary3;

  var result_654312776 = false;

  BeforeRet: do {
    var i_654312777 = 0;
    Label1: do {
        Label2: while (true) {
        if (!true) break Label2;
          if (((substr_654312774).length <= i_654312777)) {
          result_654312776 = true;
          break BeforeRet;
          }
          
            if (((s_654312773).length <= addInt(i_654312777, start_654312775))) Temporary3 = true; else {              Temporary3 = !((s_654312773[chckIndx(addInt(i_654312777, start_654312775), 0, (s_654312773).length - 1)] == substr_654312774[chckIndx(i_654312777, 0, (substr_654312774).length - 1)]));            }          if (Temporary3) {
          result_654312776 = false;
          break BeforeRet;
          }
          
          i_654312777 = addInt(i_654312777, 1);
        }
    } while (false);
  } while (false);

  return result_654312776;

}

function multiReplace_654313162(s_654313163, replacements_654313164) {
                      var Temporary10;

  var result_654313165 = [];

    result_654313165 = nimCopy(null, mnewString(0), NTI33554439);
    var i_654313166 = 0;
    var fastChk_654313167 = nimCopy(null, ConstSet22, NTI654312627);
    Label1: do {
      var sub_654313180 = null;
      var sub_654313180_Idx = 0;
      var by_654313181 = null;
      var by_654313181_Idx = 0;
      var i_1778387418 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_1778387418 < (replacements_654313164).length)) break Label3;
            sub_654313180 = replacements_654313164[chckIndx(i_1778387418, 0, (replacements_654313164).length - 1)]; sub_654313180_Idx = "Field0";
            by_654313181 = replacements_654313164[chckIndx(i_1778387418, 0, (replacements_654313164).length - 1)]; by_654313181_Idx = "Field1";
            if ((0 < (sub_654313180[sub_654313180_Idx]).length)) {
            fastChk_654313167[sub_654313180[sub_654313180_Idx][chckIndx(0, 0, (sub_654313180[sub_654313180_Idx]).length - 1)]] = true;
            }
            
            i_1778387418 = addInt(i_1778387418, 1);
          }
      } while (false);
    } while (false);
    Label4: do {
        Label5: while (true) {
        if (!(i_654313166 < (s_654313163).length)) break Label5;
          Label6: do {
            if ((fastChk_654313167[s_654313163[chckIndx(i_654313166, 0, (s_654313163).length - 1)]] != undefined)) {
            Label7: do {
              var sub_654313194 = null;
              var sub_654313194_Idx = 0;
              var by_654313195 = null;
              var by_654313195_Idx = 0;
              var i_1778387422 = 0;
              Label8: do {
                  Label9: while (true) {
                  if (!(i_1778387422 < (replacements_654313164).length)) break Label9;
                    sub_654313194 = replacements_654313164[chckIndx(i_1778387422, 0, (replacements_654313164).length - 1)]; sub_654313194_Idx = "Field0";
                    by_654313195 = replacements_654313164[chckIndx(i_1778387422, 0, (replacements_654313164).length - 1)]; by_654313195_Idx = "Field1";
                      if (!(0 < (sub_654313194[sub_654313194_Idx]).length)) Temporary10 = false; else {                        Temporary10 = nsuContinuesWith(s_654313163, sub_654313194[sub_654313194_Idx], chckRange(i_654313166, 0, 2147483647));                      }                    if (Temporary10) {
                    result_654313165.push.apply(result_654313165, by_654313195[by_654313195_Idx]);;
                    i_654313166 = addInt(i_654313166, (sub_654313194[sub_654313194_Idx]).length);
                    break Label6;
                    }
                    
                    i_1778387422 = addInt(i_1778387422, 1);
                  }
              } while (false);
            } while (false);
            }
            
            addChar(result_654313165, s_654313163[chckIndx(i_654313166, 0, (s_654313163).length - 1)]);;
            i_654313166 = addInt(i_654313166, 1);
          } while (false);
        }
    } while (false);

  return result_654313165;

}

function escape_1744830470(x_1744830471) {
  var result_1744830472 = [];

  BeforeRet: do {
    result_1744830472 = nimCopy(null, (makeNimstrLit("\"") || []).concat(multiReplace_654313162(x_1744830471, [{Field0: makeNimstrLit("\xFF"), Field1: []}, {Field0: makeNimstrLit("\\"), Field1: makeNimstrLit("\\\\")}, {Field0: makeNimstrLit("\x0A"), Field1: makeNimstrLit("\\n")}, {Field0: makeNimstrLit("\""), Field1: makeNimstrLit("\\\"")}]) || [],makeNimstrLit("\"") || []), NTI33554439);
    break BeforeRet;
  } while (false);

  return result_1744830472;

}

function handleString_1744830482(x_1744830483, pr_1744830484) {
    var Temporary1;

  var result_1744830485 = [];

  BeforeRet: do {
    if (isKeywordString_637535710(x_1744830483)) {
    result_1744830485 = nimCopy(null, HEX5BHEX5D_973081768(x_1744830483, HEX2EHEX2E_973081741(1, 1)), NTI33554439);
    break BeforeRet;
    }
    
    if (pr_1744830484) {
    Temporary1 = escape_1744830470(x_1744830483);
    }
    else {
    Temporary1 = x_1744830483;
    }
    
    result_1744830485 = nimCopy(null, Temporary1, NTI33554439);
    break BeforeRet;
  } while (false);

  return result_1744830485;

}

function nsuJoinSep(a_654312849, sep_654312850) {
  var result_654312851 = [];

    if ((0 < (a_654312849).length)) {
    var L_654312858 = mulInt((sep_654312850).length, subInt((a_654312849).length, 1));
    Label1: do {
      var i_654312866 = 0;
      var colontmp__1778387426 = 0;
      colontmp__1778387426 = (a_654312849).length - 1;
      var res_1778387427 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_1778387427 <= colontmp__1778387426)) break Label3;
            i_654312866 = res_1778387427;
            L_654312858 = addInt(L_654312858, (a_654312849[chckIndx(i_654312866, 0, (a_654312849).length - 1)]).length);
            res_1778387427 = addInt(res_1778387427, 1);
          }
      } while (false);
    } while (false);
    result_654312851 = nimCopy(null, mnewString(0), NTI33554439);
    result_654312851.push.apply(result_654312851, a_654312849[chckIndx(0, 0, (a_654312849).length - 1)]);;
    Label4: do {
      var i_654312878 = 0;
      var colontmp__1778387430 = 0;
      colontmp__1778387430 = (a_654312849).length - 1;
      var res_1778387431 = 1;
      Label5: do {
          Label6: while (true) {
          if (!(res_1778387431 <= colontmp__1778387430)) break Label6;
            i_654312878 = res_1778387431;
            result_654312851.push.apply(result_654312851, sep_654312850);;
            result_654312851.push.apply(result_654312851, a_654312849[chckIndx(i_654312878, 0, (a_654312849).length - 1)]);;
            res_1778387431 = addInt(res_1778387431, 1);
          }
      } while (false);
    } while (false);
    }
    else {
      result_654312851 = nimCopy(null, [], NTI33554439);
    }
    

  return result_654312851;

}

function newSeq_452985301(len_452985303) {
  var result_452985304 = [];

    result_452985304 = new Array(len_452985303); for (var i = 0 ; i < len_452985303 ; ++i) { result_452985304[i] = []; }
  return result_452985304;

}

function sysFatal_218103842(message_218103845) {
    raiseException({message: nimCopy(null, message_218103845, NTI33554439), m_type: NTI33555124, parent: null, name: null, trace: [], up: null}, "AssertionDefect");

  
}

function raiseAssert_218103840(msg_218103841) {
    sysFatal_218103842(msg_218103841);

  
}

function failedAssertImpl_218103864(msg_218103865) {
    raiseAssert_218103840(msg_218103865);

  
}

function len_637535859(t_637535862) {
  var result_637535863 = 0;

    result_637535863 = t_637535862.counter;

  return result_637535863;

}

function isFilled_671088671(hcode_671088672) {
  var result_671088673 = false;

    result_671088673 = !((hcode_671088672 == 0));

  return result_671088673;

}

function pair_str_1744830527(pair_1744830528, print_readably_1744830529) {
    var Temporary1;

  var result_1744830530 = [];

    if ((pair_1744830528["Field0"][chckIndx(0, 0, (pair_1744830528["Field0"]).length - 1)] == 255)) {
    Temporary1 = HEX5BHEX5D_973081768(pair_1744830528["Field0"], HEX2EHEX2E_973081741(1, 1));
    }
    else {
    Temporary1 = escape_1744830470(pair_1744830528["Field0"]);
    }
    
    var key_1744830549 = nimCopy(null, Temporary1, NTI33554439);
    result_1744830530 = nimCopy(null, (key_1744830549 || []).concat(makeNimstrLit(" ") || [],pr_str_1744830524(pair_1744830528["Field1"], print_readably_1744830529) || []), NTI33554439);

  return result_1744830530;

}

function pr_str_1744830524(x_1744830525, print_readably_1744830526) {
      var Temporary1;
      var Temporary2;
      var Temporary3;
        var Temporary5;
        var Temporary10;
          var Temporary16;
      var Temporary24;

  var result_1744830553 = [];

    switch (x_1744830525.kind) {
    case 3:
      result_1744830553 = nimCopy(null, makeNimstrLit("nil"), NTI33554439);
      break;
    case 4:
      result_1744830553 = nimCopy(null, makeNimstrLit("true"), NTI33554439);
      break;
    case 5:
      result_1744830553 = nimCopy(null, makeNimstrLit("false"), NTI33554439);
      break;
    case 2:
      var Temporary1 = x_1744830525;
      if (ConstSet20[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'number\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI637534211)); }
      result_1744830553 = nimCopy(null, floatTrunc_1744830504(Temporary1.number), NTI33554439);
      break;
    case 6:
      var Temporary2 = x_1744830525;
      if (ConstSet21[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI637534211)); }
      result_1744830553 = nimCopy(null, Temporary2.str, NTI33554439);
      break;
    case 7:
      var Temporary3 = x_1744830525;
      if (ConstSet23[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI637534211)); }
      result_1744830553 = nimCopy(null, handleString_1744830482(Temporary3.str, print_readably_1744830526), NTI33554439);
      break;
    case 0:
      Label4: do {
        var Temporary5 = x_1744830525;
        if (ConstSet24[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI637534211)); }
        var HEX3Atmp_1744830590 = nimCopy(null, Temporary5.list, NTI637534221);
        var iHEX60gensym4_1744830593 = 0;
        var resultHEX60gensym4_1744830600 = newSeq_452985301(chckRange((HEX3Atmp_1744830590).length, 0, 2147483647));
        Label6: do {
          var it_1744830604 = null;
          var it_1744830604_Idx = 0;
          var i_1778387369 = 0;
          var L_1778387370 = (HEX3Atmp_1744830590).length;
          Label7: do {
              Label8: while (true) {
              if (!(i_1778387369 < L_1778387370)) break Label8;
                it_1744830604 = HEX3Atmp_1744830590; it_1744830604_Idx = chckIndx(i_1778387369, 0, (HEX3Atmp_1744830590).length - 1);
                resultHEX60gensym4_1744830600[chckIndx(iHEX60gensym4_1744830593, 0, (resultHEX60gensym4_1744830600).length - 1)] = nimCopy(null, pr_str_1744830524(it_1744830604[it_1744830604_Idx], print_readably_1744830526), NTI33554439);
                iHEX60gensym4_1744830593 = addInt(iHEX60gensym4_1744830593, 1);
                i_1778387369 = addInt(i_1778387369, 1);
                if (!(((HEX3Atmp_1744830590).length == L_1778387370))) {
                failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while (false);
        } while (false);
      } while (false);
      result_1744830553 = nimCopy(null, (makeNimstrLit("(") || []).concat(nsuJoinSep(resultHEX60gensym4_1744830600, makeNimstrLit(" ")) || [],makeNimstrLit(")") || []), NTI33554439);
      break;
    case 8:
      Label9: do {
        var Temporary10 = x_1744830525;
        if (ConstSet25[Temporary10.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary10.kind, NTI637534211)); }
        var HEX3Atmp_1744830628 = nimCopy(null, Temporary10.list, NTI637534221);
        var iHEX60gensym9_1744830631 = 0;
        var resultHEX60gensym9_1744830638 = newSeq_452985301(chckRange((HEX3Atmp_1744830628).length, 0, 2147483647));
        Label11: do {
          var it_1744830642 = null;
          var it_1744830642_Idx = 0;
          var i_1778387379 = 0;
          var L_1778387380 = (HEX3Atmp_1744830628).length;
          Label12: do {
              Label13: while (true) {
              if (!(i_1778387379 < L_1778387380)) break Label13;
                it_1744830642 = HEX3Atmp_1744830628; it_1744830642_Idx = chckIndx(i_1778387379, 0, (HEX3Atmp_1744830628).length - 1);
                resultHEX60gensym9_1744830638[chckIndx(iHEX60gensym9_1744830631, 0, (resultHEX60gensym9_1744830638).length - 1)] = nimCopy(null, pr_str_1744830524(it_1744830642[it_1744830642_Idx], print_readably_1744830526), NTI33554439);
                iHEX60gensym9_1744830631 = addInt(iHEX60gensym9_1744830631, 1);
                i_1778387379 = addInt(i_1778387379, 1);
                if (!(((HEX3Atmp_1744830628).length == L_1778387380))) {
                failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while (false);
        } while (false);
      } while (false);
      result_1744830553 = nimCopy(null, (makeNimstrLit("[") || []).concat(nsuJoinSep(resultHEX60gensym9_1744830638, makeNimstrLit(" ")) || [],makeNimstrLit("]") || []), NTI33554439);
      break;
    case 9:
      Label14: do {
        var resultHEX60gensym12_1744830660 = [];
        Label15: do {
          var xHEX60gensym12_1744830661 = {Field0: [], Field1: null};
          var colontmp__1778387402 = ({data: [], counter: 0});
          var Temporary16 = x_1744830525;
          if (ConstSet26[Temporary16.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'hashmap\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary16.kind, NTI637534211)); }
          colontmp__1778387402 = nimCopy(colontmp__1778387402, Temporary16.hashmap, NTI637534229);
          var L_1778387403 = len_637535859(colontmp__1778387402);
          Label17: do {
            var h_1778387405 = 0;
            var colontmp__1778387406 = 0;
            colontmp__1778387406 = (colontmp__1778387402.data).length - 1;
            var res_1778387407 = 0;
            Label18: do {
                Label19: while (true) {
                if (!(res_1778387407 <= colontmp__1778387406)) break Label19;
                  h_1778387405 = res_1778387407;
                  if (isFilled_671088671(colontmp__1778387402.data[chckIndx(h_1778387405, 0, (colontmp__1778387402.data).length - 1)].Field0)) {
                  xHEX60gensym12_1744830661 = nimCopy(xHEX60gensym12_1744830661, {Field0: nimCopy(null, colontmp__1778387402.data[chckIndx(h_1778387405, 0, (colontmp__1778387402.data).length - 1)].Field1, NTI33554439), Field1: colontmp__1778387402.data[chckIndx(h_1778387405, 0, (colontmp__1778387402.data).length - 1)].Field2}, NTI637535046);
                  var Temporary20 = nimCopy(null, xHEX60gensym12_1744830661, NTI637535046);
                  resultHEX60gensym12_1744830660.push(Temporary20);;
                  if (!((len_637535859(colontmp__1778387402) == L_1778387403))) {
                  failedAssertImpl_218103864(makeNimstrLit("tables.nim(698, 13) `len(t) == L` the length of the table changed while iterating over it"));
                  }
                  
                  }
                  
                  res_1778387407 = addInt(res_1778387407, 1);
                }
            } while (false);
          } while (false);
        } while (false);
        var HEX3Atmp_1744830712 = nimCopy(null, resultHEX60gensym12_1744830660, NTI1744830658);
        var iHEX60gensym13_1744830715 = 0;
        var resultHEX60gensym13_1744830722 = newSeq_452985301(chckRange((HEX3Atmp_1744830712).length, 0, 2147483647));
        Label21: do {
          var it_1744830726 = null;
          var i_1778387410 = 0;
          var L_1778387411 = (HEX3Atmp_1744830712).length;
          Label22: do {
              Label23: while (true) {
              if (!(i_1778387410 < L_1778387411)) break Label23;
                it_1744830726 = HEX3Atmp_1744830712[chckIndx(i_1778387410, 0, (HEX3Atmp_1744830712).length - 1)];
                resultHEX60gensym13_1744830722[chckIndx(iHEX60gensym13_1744830715, 0, (resultHEX60gensym13_1744830722).length - 1)] = nimCopy(null, pair_str_1744830527(it_1744830726, print_readably_1744830526), NTI33554439);
                iHEX60gensym13_1744830715 = addInt(iHEX60gensym13_1744830715, 1);
                i_1778387410 = addInt(i_1778387410, 1);
                if (!(((HEX3Atmp_1744830712).length == L_1778387411))) {
                failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while (false);
        } while (false);
      } while (false);
      result_1744830553 = nimCopy(null, (makeNimstrLit("{") || []).concat(nsuJoinSep(resultHEX60gensym13_1744830722, makeNimstrLit(" ")) || [],makeNimstrLit("}") || []), NTI33554439);
      break;
    case 10:
      result_1744830553 = nimCopy(null, makeNimstrLit("#<function>"), NTI33554439);
      break;
    case 11:
      result_1744830553 = nimCopy(null, makeNimstrLit("#<fnction>"), NTI33554439);
      break;
    case 1:
      var Temporary24 = x_1744830525;
      if (ConstSet27[Temporary24.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'val\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary24.kind, NTI637534211)); }
      result_1744830553 = nimCopy(null, (makeNimstrLit("(atom ") || []).concat(pr_str_1744830524(Temporary24.val, print_readably_1744830526) || [],makeNimstrLit(")") || []), NTI33554439);
      break;
    }

  return result_1744830553;

}

function toStringToken_637535701(x_637535702) {
  var result_637535703 = null;

    result_637535703 = {kind: 7, str: nimCopy(null, x_637535702, NTI33554439), list: [], val: null, number: 0.0, hashmap: ({data: [], counter: 0}), fun: null, is_macro: false, ffun: null, fis_macro: false, ast: null, params: null, env: null, meta: null};

  return result_637535703;

}

function pr_str_1778384910(xs_1778384911) {
            var Temporary4;

  var result_1778384912 = null;

  BeforeRet: do {
    var output_1778384913 = [];
    Label1: do {
      var i_1778384919 = 0;
      var arg_1778384920 = null;
      var i_1778387358 = 0;
      var L_1778387359 = (xs_1778384911).length;
      Label2: do {
          Label3: while (true) {
          if (!(i_1778387358 < L_1778387359)) break Label3;
            i_1778384919 = i_1778387358;
            arg_1778384920 = xs_1778384911[chckIndx(i_1778387358, 0, (xs_1778384911).length - 1)];
            if ((0 < i_1778384919)) {
            Temporary4 = makeNimstrLit(" ");
            }
            else {
            Temporary4 = [];
            }
            
            output_1778384913 = nimCopy(null, (output_1778384913 || []).concat(Temporary4 || [],pr_str_1744830524(arg_1778384920, true) || []), NTI33554439);
            i_1778387358 = addInt(i_1778387358, 1);
            if (!(((xs_1778384911).length == L_1778387359))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(173, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    result_1778384912 = toStringToken_637535701(output_1778384913);
    break BeforeRet;
  } while (false);

  return result_1778384912;

}

function str_1778384921(xs_1778384922) {
  var result_1778384923 = null;

  BeforeRet: do {
    var output_1778384924 = [];
    Label1: do {
      var i_1778384930 = 0;
      var arg_1778384931 = null;
      var i_1778387434 = 0;
      var L_1778387435 = (xs_1778384922).length;
      Label2: do {
          Label3: while (true) {
          if (!(i_1778387434 < L_1778387435)) break Label3;
            i_1778384930 = i_1778387434;
            arg_1778384931 = xs_1778384922[chckIndx(i_1778387434, 0, (xs_1778384922).length - 1)];
            output_1778384924 = nimCopy(null, (output_1778384924 || []).concat(pr_str_1744830524(arg_1778384931, false) || []), NTI33554439);
            i_1778387434 = addInt(i_1778387434, 1);
            if (!(((xs_1778384922).length == L_1778387435))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(173, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    result_1778384923 = toStringToken_637535701(output_1778384924);
    break BeforeRet;
  } while (false);

  return result_1778384923;

}

function prn_1778384932(xs_1778384933) {
    var Temporary1;

  var result_1778384934 = null;

  BeforeRet: do {
    var Temporary1 = pr_str_1778384910(xs_1778384933);
    if (ConstSet28[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI637534211)); }
    rawEcho(Temporary1.str);
    result_1778384934 = NilToken_637535713;
    break BeforeRet;
  } while (false);

  return result_1778384934;

}

function println_1778384935(xs_1778384936) {
            var Temporary4;

  var result_1778384937 = null;

  BeforeRet: do {
    var output_1778384938 = [];
    Label1: do {
      var i_1778384944 = 0;
      var arg_1778384945 = null;
      var i_1778387438 = 0;
      var L_1778387439 = (xs_1778384936).length;
      Label2: do {
          Label3: while (true) {
          if (!(i_1778387438 < L_1778387439)) break Label3;
            i_1778384944 = i_1778387438;
            arg_1778384945 = xs_1778384936[chckIndx(i_1778387438, 0, (xs_1778384936).length - 1)];
            if ((0 < i_1778384944)) {
            Temporary4 = makeNimstrLit(" ");
            }
            else {
            Temporary4 = [];
            }
            
            output_1778384938 = nimCopy(null, (output_1778384938 || []).concat(Temporary4 || [],pr_str_1744830524(arg_1778384945, false) || []), NTI33554439);
            i_1778387438 = addInt(i_1778387438, 1);
            if (!(((xs_1778384936).length == L_1778387439))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(173, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    rawEcho(output_1778384938);
    result_1778384937 = NilToken_637535713;
    break BeforeRet;
  } while (false);

  return result_1778384937;

}

function list_637534334(xs_637534335) {
  var result_637534336 = null;

    result_637534336 = {kind: 0, list: nimCopy(null, xs_637534335, NTI637534287), val: null, number: 0.0, str: [], hashmap: ({data: [], counter: 0}), fun: null, is_macro: false, ffun: null, fis_macro: false, ast: null, params: null, env: null, meta: null};

  return result_637534336;

}

function count_1778384976(xs_1778384977) {
    var Temporary1;

  var result_1778384978 = null;

  BeforeRet: do {
    if (!(((xs_1778384977).length == 1))) {
    raiseException({message: makeNimstrLit("count takes only one argument!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    if ((ConstSet29[xs_1778384977[chckIndx(0, 0, (xs_1778384977).length - 1)].kind] != undefined)) {
    var Temporary1 = xs_1778384977[chckIndx(0, 0, (xs_1778384977).length - 1)];
    if (ConstSet30[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI637534211)); }
    result_1778384978 = number_637535695((Temporary1.list).length);
    break BeforeRet;
    }
    else {
    if ((xs_1778384977[chckIndx(0, 0, (xs_1778384977).length - 1)].kind == 3)) {
    result_1778384978 = number_637535695(0.0);
    break BeforeRet;
    }
    else {
      raiseException({message: makeNimstrLit("count only takes lists or vectors or nil as arguments."), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    }
  } while (false);

  return result_1778384978;

}

function nth_1778385010(xs_1778385011) {
    var Temporary1;
    var Temporary2;

  var result_1778385012 = null;

  BeforeRet: do {
    if (!(((xs_1778385011).length == 2))) {
    raiseException({message: makeNimstrLit("nth takes only two arguments!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    if (!((ConstSet31[xs_1778385011[chckIndx(0, 0, (xs_1778385011).length - 1)].kind] != undefined))) {
    raiseException({message: makeNimstrLit("nth requires a vector or list as its first argument!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    if (!((xs_1778385011[chckIndx(1, 0, (xs_1778385011).length - 1)].kind == 2))) {
    raiseException({message: makeNimstrLit("nth requires a number as its second argument!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    var Temporary1 = xs_1778385011[chckIndx(0, 0, (xs_1778385011).length - 1)];
    if (ConstSet32[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI637534211)); }
    var lst_1778385027 = nimCopy(null, Temporary1.list, NTI637534221);
    var Temporary2 = xs_1778385011[chckIndx(1, 0, (xs_1778385011).length - 1)];
    if (ConstSet33[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'number\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI637534211)); }
    var num_1778385028 = Temporary2.number;
    if (!((num_1778385028 == round_1744830510(num_1778385028)))) {
    raiseException({message: makeNimstrLit("nth requires an integer index!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    var pk_1778385033 = ((num_1778385028) | 0);
    if (((lst_1778385027).length <= pk_1778385033)) {
    raiseException({message: makeNimstrLit("out of bounds!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    if ((pk_1778385033 < 0)) {
    raiseException({message: makeNimstrLit("out of bounds!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    result_1778385012 = lst_1778385027[chckIndx(pk_1778385033, 0, (lst_1778385027).length - 1)];
    break BeforeRet;
  } while (false);

  return result_1778385012;

}

function first_1778385039(xs_1778385040) {
    var Temporary1;

  var result_1778385041 = null;

  BeforeRet: do {
    if (!(((xs_1778385040).length == 1))) {
    raiseException({message: makeNimstrLit("first takes only a single argument!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    if ((xs_1778385040[chckIndx(0, 0, (xs_1778385040).length - 1)].kind == 3)) {
    result_1778385041 = NilToken_637535713;
    break BeforeRet;
    }
    
    if (!((ConstSet34[xs_1778385040[chckIndx(0, 0, (xs_1778385040).length - 1)].kind] != undefined))) {
    raiseException({message: makeNimstrLit("first requires a vector or list as its first argument!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    var Temporary1 = xs_1778385040[chckIndx(0, 0, (xs_1778385040).length - 1)];
    if (ConstSet35[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI637534211)); }
    var lst_1778385055 = nimCopy(null, Temporary1.list, NTI637534221);
    if (((lst_1778385055).length == 0)) {
    result_1778385041 = NilToken_637535713;
    break BeforeRet;
    }
    
    result_1778385041 = lst_1778385055[chckIndx(0, 0, (lst_1778385055).length - 1)];
    break BeforeRet;
  } while (false);

  return result_1778385041;

}

function HEX5BHEX5D_1761607998(s_1761608002, x_1761608003) {
  var result_1761608004 = [];

    var a_1761608006 = x_1761608003.a;
    var L_1761608012 = addInt(subInt(subInt((s_1761608002).length, x_1761608003.b), a_1761608006), 1);
    result_1761608004 = new Array(chckRange(L_1761608012, 0, 2147483647)); for (var i = 0 ; i < chckRange(L_1761608012, 0, 2147483647) ; ++i) { result_1761608004[i] = null; }    Label1: do {
      var i_1761608021 = 0;
      var i_1778387442 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_1778387442 < L_1761608012)) break Label3;
            i_1761608021 = i_1778387442;
            result_1761608004[chckIndx(i_1761608021, 0, (result_1761608004).length - 1)] = s_1761608002[chckIndx(addInt(i_1761608021, a_1761608006), 0, (s_1761608002).length - 1)];
            i_1778387442 = addInt(i_1778387442, 1);
          }
      } while (false);
    } while (false);

  return result_1761608004;

}

function rest_1778385059(xs_1778385060) {
    var Temporary1;

  var result_1778385061 = null;

  BeforeRet: do {
    if (!(((xs_1778385060).length == 1))) {
    raiseException({message: makeNimstrLit("rest takes only a single argument!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    if ((xs_1778385060[chckIndx(0, 0, (xs_1778385060).length - 1)].kind == 3)) {
    result_1778385061 = list_637534334([]);
    break BeforeRet;
    }
    
    if (!((ConstSet36[xs_1778385060[chckIndx(0, 0, (xs_1778385060).length - 1)].kind] != undefined))) {
    raiseException({message: makeNimstrLit("rest requires a vector or list as its first argument!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    var Temporary1 = xs_1778385060[chckIndx(0, 0, (xs_1778385060).length - 1)];
    if (ConstSet37[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI637534211)); }
    var lst_1778385079 = nimCopy(null, Temporary1.list, NTI637534221);
    if (((lst_1778385079).length == 0)) {
    result_1778385061 = list_637534334([]);
    break BeforeRet;
    }
    
    result_1778385061 = list_637534334(HEX5BHEX5D_1761607998(lst_1778385079, HEX2EHEX2E_973081741(1, 1)));
    break BeforeRet;
  } while (false);

  return result_1778385061;

}

function HEX3DHEX3D_637535737(x_637535739, y_637535740) {
  var result_637535741 = false;

  BeforeRet: do {
    var sameObject_637535748 = false;
    sameObject_637535748 = x_637535739 === y_637535740
    if (sameObject_637535748) {
    result_637535741 = true;
    break BeforeRet;
    }
    
    if (!(((x_637535739).length == (y_637535740).length))) {
    result_637535741 = false;
    break BeforeRet;
    }
    
    Label1: do {
      var i_637535762 = 0;
      var colontmp__1778387445 = 0;
      colontmp__1778387445 = subInt((x_637535739).length, 1);
      var res_1778387446 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_1778387446 <= colontmp__1778387445)) break Label3;
            i_637535762 = res_1778387446;
            if (!(HEX3DHEX3D_637535719(x_637535739[chckIndx(i_637535762, 0, (x_637535739).length - 1)], y_637535740[chckIndx(i_637535762, 0, (y_637535740).length - 1)]))) {
            result_637535741 = false;
            break BeforeRet;
            }
            
            res_1778387446 = addInt(res_1778387446, 1);
          }
      } while (false);
    } while (false);
    result_637535741 = true;
    break BeforeRet;
  } while (false);

  return result_637535741;

}

function raiseDivByZero() {
    raiseException({message: makeNimstrLit("division by zero"), parent: null, m_type: NTI33555121, name: null, trace: [], up: null}, "DivByZeroDefect");

  
}

function imul_687866173(a_687866174, b_687866175) {
  var result_687866176 = 0;

    var mask_687866177 = 65535;
    var aHi_687866182 = ((a_687866174 >>> 16) & mask_687866177);
    var aLo_687866183 = (a_687866174 & mask_687866177);
    var bHi_687866188 = ((b_687866175 >>> 16) & mask_687866177);
    var bLo_687866189 = (b_687866175 & mask_687866177);
    result_687866176 = ((((aLo_687866183 * bLo_687866189) >>> 0) + (((((aHi_687866182 * bLo_687866189) >>> 0) + ((aLo_687866183 * bHi_687866188) >>> 0)) >>> 0) << 16)) >>> 0);

  return result_687866176;

}

function rotl32_687866194(x_687866195, r_687866196) {
  var result_687866197 = 0;

    result_687866197 = ((x_687866195 << r_687866196) | (x_687866195 >>> subInt(32, r_687866196)));

  return result_687866197;

}

function murmurHash_687866206(x_687866207) {
  var result_687866208 = 0;

  BeforeRet: do {
    var size_687866217 = (x_687866207).length;
    var stepSize_687866218 = 4;
    var n_687866219 = divInt(size_687866217, stepSize_687866218);
    var h1_687866220 = 0;
    var i_687866221 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(i_687866221 < mulInt(n_687866219, stepSize_687866218))) break Label2;
          var k1_687866222 = 0;
          var j_687866223 = stepSize_687866218;
          Label3: do {
              Label4: while (true) {
              if (!(0 < j_687866223)) break Label4;
                j_687866223 = subInt(j_687866223, 1);
                k1_687866222 = ((k1_687866222 << 8) | x_687866207[chckIndx(addInt(i_687866221, j_687866223), 0, (x_687866207).length - 1)]);
              }
          } while (false);
          i_687866221 = addInt(i_687866221, stepSize_687866218);
          k1_687866222 = imul_687866173(k1_687866222, 3432918353);
          k1_687866222 = rotl32_687866194(k1_687866222, 15);
          k1_687866222 = imul_687866173(k1_687866222, 461845907);
          h1_687866220 = (h1_687866220 ^ k1_687866222);
          h1_687866220 = rotl32_687866194(h1_687866220, 13);
          h1_687866220 = ((((h1_687866220 * 5) >>> 0) + 3864292196) >>> 0);
        }
    } while (false);
    var k1_687866240 = 0;
    var rem_687866241 = modInt(size_687866217, stepSize_687866218);
    Label5: do {
        Label6: while (true) {
        if (!(0 < rem_687866241)) break Label6;
          rem_687866241 = subInt(rem_687866241, 1);
          k1_687866240 = ((k1_687866240 << 8) | x_687866207[chckIndx(addInt(i_687866221, rem_687866241), 0, (x_687866207).length - 1)]);
        }
    } while (false);
    k1_687866240 = imul_687866173(k1_687866240, 3432918353);
    k1_687866240 = rotl32_687866194(k1_687866240, 15);
    k1_687866240 = imul_687866173(k1_687866240, 461845907);
    h1_687866220 = (h1_687866220 ^ k1_687866240);
    h1_687866220 = (h1_687866220 ^ size_687866217);
    h1_687866220 = (h1_687866220 ^ (h1_687866220 >>> 16));
    h1_687866220 = imul_687866173(h1_687866220, 2246822507);
    h1_687866220 = (h1_687866220 ^ (h1_687866220 >>> 13));
    h1_687866220 = imul_687866173(h1_687866220, 3266489909);
    h1_687866220 = (h1_687866220 ^ (h1_687866220 >>> 16));
    result_687866208 = (h1_687866220 | 0);
    break BeforeRet;
  } while (false);

  return result_687866208;

}

function hash_687866305(x_687866306) {
  var result_687866307 = 0;

    result_687866307 = murmurHash_687866206((x_687866306.slice(0, (x_687866306).length - 1 + 1)));

  return result_687866307;

}

function nextTry_671088674(h_671088675, maxHash_671088676) {
  var result_671088677 = 0;

    result_671088677 = (addInt(h_671088675, 1) & maxHash_671088676);

  return result_671088677;

}

function rawGet_637534492(t_637534495, key_637534496, hc_637534497, hc_637534497_Idx) {
            var Temporary3;

  var result_637534498 = 0;

  BeforeRet: do {
    hc_637534497[hc_637534497_Idx] = hash_687866305(key_637534496);
    if ((hc_637534497[hc_637534497_Idx] == 0)) {
    hc_637534497[hc_637534497_Idx] = 314159265;
    }
    
    if (((t_637534495.data).length == 0)) {
    result_637534498 = -1;
    break BeforeRet;
    }
    
    var h_637534549 = (hc_637534497[hc_637534497_Idx] & (t_637534495.data).length - 1);
    Label1: do {
        Label2: while (true) {
        if (!isFilled_671088671(t_637534495.data[chckIndx(h_637534549, 0, (t_637534495.data).length - 1)].Field0)) break Label2;
            if (!(t_637534495.data[chckIndx(h_637534549, 0, (t_637534495.data).length - 1)].Field0 == hc_637534497[hc_637534497_Idx])) Temporary3 = false; else {              Temporary3 = eqStrings(t_637534495.data[chckIndx(h_637534549, 0, (t_637534495.data).length - 1)].Field1, key_637534496);            }          if (Temporary3) {
          result_637534498 = h_637534549;
          break BeforeRet;
          }
          
          h_637534549 = nextTry_671088674(h_637534549, (t_637534495.data).length - 1);
        }
    } while (false);
    result_637534498 = subInt(-1, h_637534549);
  } while (false);

  return result_637534498;

}

function hasKey_637536136(t_637536139, key_637536140) {
  var result_637536141 = false;

    var hc_637536142 = [0];
    result_637536141 = (0 <= rawGet_637534492(t_637536139, key_637536140, hc_637536142, 0));

  return result_637536141;

}

function getOrDefault_637536215(t_637536218, key_637536219) {
  var result_637536220 = null;

    var hcHEX60gensym27_637536223 = [0];
    var indexHEX60gensym27_637536230 = rawGet_637534492(t_637536218, key_637536219, hcHEX60gensym27_637536223, 0);
    if ((0 <= indexHEX60gensym27_637536230)) {
    result_637536220 = t_637536218.data[chckIndx(indexHEX60gensym27_637536230, 0, (t_637536218.data).length - 1)].Field2;
    }
    

  return result_637536220;

}

function HEX3DHEX3D_637535803(s_637535806, t_637535807) {
  var result_637535808 = false;

  BeforeRet: do {
    if ((s_637535806.counter == t_637535807.counter)) {
    Label1: do {
      var keyHEX60gensym23_637536094 = [];
      var valHEX60gensym23_637536095 = null;
      var L_1778387449 = len_637535859(s_637535806);
      Label2: do {
        var h_1778387451 = 0;
        var colontmp__1778387452 = 0;
        colontmp__1778387452 = (s_637535806.data).length - 1;
        var res_1778387453 = 0;
        Label3: do {
            Label4: while (true) {
            if (!(res_1778387453 <= colontmp__1778387452)) break Label4;
              h_1778387451 = res_1778387453;
              if (isFilled_671088671(s_637535806.data[chckIndx(h_1778387451, 0, (s_637535806.data).length - 1)].Field0)) {
              keyHEX60gensym23_637536094 = s_637535806.data[chckIndx(h_1778387451, 0, (s_637535806.data).length - 1)].Field1;
              valHEX60gensym23_637536095 = s_637535806.data[chckIndx(h_1778387451, 0, (s_637535806.data).length - 1)].Field2;
              if (!(hasKey_637536136(t_637535807, keyHEX60gensym23_637536094))) {
              result_637535808 = false;
              break BeforeRet;
              }
              
              if (!(HEX3DHEX3D_637535719(getOrDefault_637536215(t_637535807, keyHEX60gensym23_637536094), valHEX60gensym23_637536095))) {
              result_637535808 = false;
              break BeforeRet;
              }
              
              if (!((len_637535859(s_637535806) == L_1778387449))) {
              failedAssertImpl_218103864(makeNimstrLit("tables.nim(698, 13) `len(t) == L` the length of the table changed while iterating over it"));
              }
              
              }
              
              res_1778387453 = addInt(res_1778387453, 1);
            }
        } while (false);
      } while (false);
    } while (false);
    result_637535808 = true;
    break BeforeRet;
    }
    
  } while (false);

  return result_637535808;

}

function HEX3DHEX3D_637535719(x_637535720, y_637535721) {
      var Temporary1;
    var Temporary2;
      var Temporary3;
      var Temporary4;
      var Temporary5;
      var Temporary6;
      var Temporary7;
      var Temporary8;
      var Temporary9;
      var Temporary10;
      var Temporary11;
      var Temporary12;
      var Temporary13;
        var Temporary14;
        var Temporary15;
      var Temporary16;
      var Temporary17;
      var Temporary18;
        var Temporary19;
        var Temporary20;
      var Temporary21;
      var Temporary22;

  var result_637535722 = false;

  BeforeRet: do {
      if (!(ConstSet38[x_637535720.kind] != undefined)) Temporary1 = false; else {        Temporary1 = (ConstSet39[y_637535721.kind] != undefined);      }    if (!(Temporary1)) {
    if (!((x_637535720.kind == y_637535721.kind))) {
    result_637535722 = false;
    break BeforeRet;
    }
    
    }
    
    switch (x_637535720.kind) {
    case 3:
    case 4:
    case 5:
      Temporary2 = true;
      break;
    case 2:
      var Temporary3 = x_637535720;
      if (ConstSet40[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'number\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI637534211)); }
      var Temporary4 = y_637535721;
      if (ConstSet41[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'number\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI637534211)); }
      Temporary2 = (Temporary3.number == Temporary4.number);
      break;
    case 6:
    case 7:
      var Temporary5 = x_637535720;
      if (ConstSet42[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI637534211)); }
      var Temporary6 = y_637535721;
      if (ConstSet43[Temporary6.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary6.kind, NTI637534211)); }
      Temporary2 = eqStrings(Temporary5.str, Temporary6.str);
      break;
    case 0:
    case 8:
      var Temporary7 = x_637535720;
      if (ConstSet44[Temporary7.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary7.kind, NTI637534211)); }
      var Temporary8 = y_637535721;
      if (ConstSet45[Temporary8.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary8.kind, NTI637534211)); }
      Temporary2 = HEX3DHEX3D_637535737(Temporary7.list, Temporary8.list);
      break;
    case 9:
      var Temporary9 = x_637535720;
      if (ConstSet46[Temporary9.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'hashmap\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary9.kind, NTI637534211)); }
      var Temporary10 = y_637535721;
      if (ConstSet47[Temporary10.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'hashmap\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary10.kind, NTI637534211)); }
      Temporary2 = HEX3DHEX3D_637535803(Temporary9.hashmap, Temporary10.hashmap);
      break;
    case 10:
      var Temporary12 = x_637535720;
      if (ConstSet48[Temporary12.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'fun\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary12.kind, NTI637534211)); }
      var Temporary13 = y_637535721;
      if (ConstSet49[Temporary13.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'fun\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary13.kind, NTI637534211)); }
      if (!(Temporary12.fun == Temporary13.fun)) Temporary11 = false; else {        var Temporary14 = x_637535720;
        if (ConstSet50[Temporary14.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'is_macro\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary14.kind, NTI637534211)); }
        var Temporary15 = y_637535721;
        if (ConstSet51[Temporary15.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'is_macro\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary15.kind, NTI637534211)); }
        Temporary11 = (Temporary14.is_macro == Temporary15.is_macro);      }      Temporary2 = Temporary11;
      break;
    case 11:
      var Temporary17 = x_637535720;
      if (ConstSet52[Temporary17.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'ffun\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary17.kind, NTI637534211)); }
      var Temporary18 = y_637535721;
      if (ConstSet53[Temporary18.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'ffun\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary18.kind, NTI637534211)); }
      if (!(Temporary17.ffun == Temporary18.ffun)) Temporary16 = false; else {        var Temporary19 = x_637535720;
        if (ConstSet54[Temporary19.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'fis_macro\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary19.kind, NTI637534211)); }
        var Temporary20 = y_637535721;
        if (ConstSet55[Temporary20.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'fis_macro\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary20.kind, NTI637534211)); }
        Temporary16 = (Temporary19.fis_macro == Temporary20.fis_macro);      }      Temporary2 = Temporary16;
      break;
    case 1:
      var Temporary21 = x_637535720;
      if (ConstSet56[Temporary21.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'val\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary21.kind, NTI637534211)); }
      var Temporary22 = y_637535721;
      if (ConstSet57[Temporary22.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'val\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary22.kind, NTI637534211)); }
      Temporary2 = HEX3DHEX3D_637535719(Temporary21.val, Temporary22.val);
      break;
    }
    result_637535722 = Temporary2;
  } while (false);

  return result_637535722;

}

function equal_637536292(x_637536293, y_637536294) {
  var result_637536295 = false;

    result_637536295 = HEX3DHEX3D_637535719(x_637536293, y_637536294);

  return result_637536295;

}

function eq_1778385102(xs_1778385103) {
  var result_1778385104 = null;

  BeforeRet: do {
    if (!(((xs_1778385103).length == 2))) {
    raiseException({message: makeNimstrLit("= takes only two arguments!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    if (equal_637536292(xs_1778385103[chckIndx(0, 0, (xs_1778385103).length - 1)], xs_1778385103[chckIndx(1, 0, (xs_1778385103).length - 1)])) {
    result_1778385104 = TrueToken_637535714;
    break BeforeRet;
    }
    else {
      result_1778385104 = FalseToken_637535715;
      break BeforeRet;
    }
    
  } while (false);

  return result_1778385104;

}

function canOpt_1442841190(litOpt_1442841191) {
  var result_1442841192 = false;

  BeforeRet: do {
    result_1442841192 = (0 < (litOpt_1442841191.nfa.s).length);
    break BeforeRet;
  } while (false);

  return result_1442841192;

}

function new_1426064139() {
  var result_1426064142 = null;

  BeforeRet: do {
    var r_1426064144 = null;
    r_1426064144 = ({sx: [], ss: [], si: 0});
    result_1426064142 = r_1426064144;
    break BeforeRet;
  } while (false);

  return result_1426064142;

}

function newSeq_1426064170(len_1426064172) {
  var result_1426064173 = [];

    result_1426064173 = new Array(len_1426064172); for (var i = 0 ; i < len_1426064172 ; ++i) { result_1426064173[i] = {Field0: 0, Field1: 0, Field2: ({a: 0, b: 0})}; }
  return result_1426064173;

}

function newSeq_1526726844(len_1526726846) {
  var result_1526726847 = [];

    result_1526726847 = new Array(len_1526726846); for (var i = 0 ; i < len_1526726846 ; ++i) { result_1526726847[i] = 0; }
  return result_1526726847;

}

function newSubmatches_1426064136(size_1426064137) {
  var result_1426064138 = null;

    result_1426064138 = new_1426064139();
    result_1426064138.sx = nimCopy(null, newSeq_1426064170(8), NTI1426063907);
    result_1426064138.ss = nimCopy(null, newSeq_1526726844(chckRange(size_1426064137, 0, 2147483647)), NTI1526726797);
    result_1426064138.si = 0;

  return result_1426064138;

}

function contains_1308624332(s_1308624336, value_1308624337) {
  var result_1308624338 = false;

    result_1308624338 = ((s_1308624336.a <= value_1308624337) && (value_1308624337 <= s_1308624336.b));

  return result_1308624338;

}

function HEX2EHEX2E_973079379(a_973079382, b_973079383) {
  var result_973079384 = ({a: 0, b: 0});

    result_973079384 = nimCopy(result_973079384, {a: a_973079382, b: b_973079383}, NTI788529213);

  return result_973079384;

}

function bwRuneAt_1224736810(s_1224736811, n_1224736812) {
          var Temporary3;

  var result_1224736813 = 0;

    if (!((0 <= n_1224736812))) {
    failedAssertImpl_218103864(makeNimstrLit("common.nim(40, 12) `n >= 0` "));
    }
    
    if (!((n_1224736812 <= subInt((s_1224736811).length, 1)))) {
    failedAssertImpl_218103864(makeNimstrLit("common.nim(41, 12) `n <= s.len - 1` "));
    }
    
    var n_1224736824 = n_1224736812;
    Label1: do {
        Label2: while (true) {
          if (!(0 < n_1224736824)) Temporary3 = false; else {            Temporary3 = ((s_1224736811[chckIndx(n_1224736824, 0, (s_1224736811).length - 1)] >> 6) == 2);          }        if (!Temporary3) break Label2;
          n_1224736824 = subInt(n_1224736824, 1);
        }
    } while (false);
    if ((s_1224736811[chckIndx(n_1224736824, 0, (s_1224736811).length - 1)] <= 127)) {
    result_1224736813 = chckRange(s_1224736811[chckIndx(n_1224736824, 0, (s_1224736811).length - 1)], -2147483648, 2147483647);
    }
    else {
    if (((s_1224736811[chckIndx(n_1224736824, 0, (s_1224736811).length - 1)] >>> 5) == 6)) {
    if ((n_1224736824 <= subInt((s_1224736811).length, 2))) {
    result_1224736813 = chckRange((((s_1224736811[chckIndx(n_1224736824, 0, (s_1224736811).length - 1)] & 31) << 6) | (s_1224736811[chckIndx(addInt(n_1224736824, 1), 0, (s_1224736811).length - 1)] & 63)), -2147483648, 2147483647);
    }
    else {
      result_1224736813 = 65533;
    }
    
    }
    else {
    if (((s_1224736811[chckIndx(n_1224736824, 0, (s_1224736811).length - 1)] >>> 4) == 14)) {
    if ((n_1224736824 <= subInt((s_1224736811).length, 3))) {
    result_1224736813 = chckRange(((((s_1224736811[chckIndx(n_1224736824, 0, (s_1224736811).length - 1)] & 15) << 12) | ((s_1224736811[chckIndx(addInt(n_1224736824, 1), 0, (s_1224736811).length - 1)] & 63) << 6)) | (s_1224736811[chckIndx(addInt(n_1224736824, 2), 0, (s_1224736811).length - 1)] & 63)), -2147483648, 2147483647);
    }
    else {
      result_1224736813 = 65533;
    }
    
    }
    else {
    if (((s_1224736811[chckIndx(n_1224736824, 0, (s_1224736811).length - 1)] >>> 3) == 30)) {
    if ((n_1224736824 <= subInt((s_1224736811).length, 4))) {
    result_1224736813 = chckRange((((((s_1224736811[chckIndx(n_1224736824, 0, (s_1224736811).length - 1)] & 7) << 18) | ((s_1224736811[chckIndx(addInt(n_1224736824, 1), 0, (s_1224736811).length - 1)] & 63) << 12)) | ((s_1224736811[chckIndx(addInt(n_1224736824, 2), 0, (s_1224736811).length - 1)] & 63) << 6)) | (s_1224736811[chckIndx(addInt(n_1224736824, 3), 0, (s_1224736811).length - 1)] & 63)), -2147483648, 2147483647);
    }
    else {
      result_1224736813 = 65533;
    }
    
    }
    else {
    if (((s_1224736811[chckIndx(n_1224736824, 0, (s_1224736811).length - 1)] >>> 2) == 62)) {
    if ((n_1224736824 <= subInt((s_1224736811).length, 5))) {
    result_1224736813 = chckRange(((((((s_1224736811[chckIndx(n_1224736824, 0, (s_1224736811).length - 1)] & 3) << 24) | ((s_1224736811[chckIndx(addInt(n_1224736824, 1), 0, (s_1224736811).length - 1)] & 63) << 18)) | ((s_1224736811[chckIndx(addInt(n_1224736824, 2), 0, (s_1224736811).length - 1)] & 63) << 12)) | ((s_1224736811[chckIndx(addInt(n_1224736824, 3), 0, (s_1224736811).length - 1)] & 63) << 6)) | (s_1224736811[chckIndx(addInt(n_1224736824, 4), 0, (s_1224736811).length - 1)] & 63)), -2147483648, 2147483647);
    }
    else {
      result_1224736813 = 65533;
    }
    
    }
    else {
    if (((s_1224736811[chckIndx(n_1224736824, 0, (s_1224736811).length - 1)] >>> 1) == 126)) {
    if ((n_1224736824 <= subInt((s_1224736811).length, 6))) {
    result_1224736813 = chckRange((((((((s_1224736811[chckIndx(n_1224736824, 0, (s_1224736811).length - 1)] & 1) << 30) | ((s_1224736811[chckIndx(addInt(n_1224736824, 1), 0, (s_1224736811).length - 1)] & 63) << 24)) | ((s_1224736811[chckIndx(addInt(n_1224736824, 2), 0, (s_1224736811).length - 1)] & 63) << 18)) | ((s_1224736811[chckIndx(addInt(n_1224736824, 3), 0, (s_1224736811).length - 1)] & 63) << 12)) | ((s_1224736811[chckIndx(addInt(n_1224736824, 4), 0, (s_1224736811).length - 1)] & 63) << 6)) | (s_1224736811[chckIndx(addInt(n_1224736824, 5), 0, (s_1224736811).length - 1)] & 63)), -2147483648, 2147483647);
    }
    else {
      result_1224736813 = 65533;
    }
    
    }
    else {
      result_1224736813 = chckRange(s_1224736811[chckIndx(n_1224736824, 0, (s_1224736811).length - 1)], -2147483648, 2147483647);
    }
    }}}}}

  return result_1224736813;

}

function clear_1426064244(sm_1426064245, sm_1426064245_Idx) {
    sm_1426064245[sm_1426064245_Idx].si = 0;

  
}

function add_1426064214(sm_1426064215, sm_1426064215_Idx, item_1426064216) {
    var Temporary1;

    if ((((sm_1426064215[sm_1426064215_Idx].si) | 0) == (sm_1426064215[sm_1426064215_Idx].sx).length)) {
    if (sm_1426064215[sm_1426064215_Idx].sx.length < (Temporary1 = ((sm_1426064215[sm_1426064215_Idx].sx).length * 2), Temporary1)) { for (var i = sm_1426064215[sm_1426064215_Idx].sx.length ; i < Temporary1 ; ++i) sm_1426064215[sm_1426064215_Idx].sx.push({Field0: 0, Field1: 0, Field2: ({a: 0, b: 0})}); }
               else { sm_1426064215[sm_1426064215_Idx].sx.length = Temporary1; };
    }
    
    sm_1426064215[sm_1426064215_Idx].sx[sm_1426064215[sm_1426064215_Idx].si] = nimCopy(sm_1426064215[sm_1426064215_Idx].sx[sm_1426064215[sm_1426064215_Idx].si], item_1426064216, NTI1426063871);
    sm_1426064215[sm_1426064215_Idx].ss[item_1426064216.Field0] = sm_1426064215[sm_1426064215_Idx].si;
    sm_1426064215[sm_1426064215_Idx].si += 1;

  
}

function len_1426064241(sm_1426064242) {
  var result_1426064243 = 0;

    result_1426064243 = ((sm_1426064242.si) | 0);

  return result_1426064243;

}

function hasState_1426064210(sm_1426064211, n_1426064212) {
    var Temporary1;

  var result_1426064213 = false;

    if (!(sm_1426064211.ss[n_1426064212] < sm_1426064211.si)) Temporary1 = false; else {      Temporary1 = (sm_1426064211.sx[sm_1426064211.ss[n_1426064212]].Field0 == n_1426064212);    }    result_1426064213 = Temporary1;

  return result_1426064213;

}

function HEX3DHEX3D_973079447(a_973079448, b_973079449) {
  var result_973079450 = false;

  BeforeRet: do {
    result_973079450 = (((a_973079448) | 0) == ((b_973079449) | 0));
    break BeforeRet;
  } while (false);

  return result_973079450;

}

function contains_1476395052(ut_1476395053, utm_1476395054) {
  var result_1476395055 = false;

    result_1476395055 = !(((ut_1476395053 & utm_1476395054) == 0));

  return result_1476395055;

}

function unicodeTypes_1476395011(cp_1476395012) {
  var result_1476395013 = 0;

    if (!((((cp_1476395012) | 0) <= 1114111))) {
    failedAssertImpl_218103864(makeNimstrLit("types.nim(23, 10) `cp.int <= 0x0010FFFF` "));
    }
    
    var blockOffset_1476395023 = mulInt(((typesOffsets_1493172234[chckIndx(divInt(((cp_1476395012) | 0), 64), 0, (typesOffsets_1493172234).length - 1)]) | 0), 64);
    var idx_1476395024 = typesIndices_1493172235[chckIndx(addInt(blockOffset_1476395023, modInt(((cp_1476395012) | 0), 64)), 0, (typesIndices_1493172235).length - 1)];
    result_1476395013 = ((typesData_1493172236[chckIndx(idx_1476395024, 0, (typesData_1493172236).length - 1)]) | 0);

  return result_1476395013;

}

function isWord_1459617799(r_1459617800) {
  var result_1459617801 = false;

    result_1459617801 = contains_1476395052(unicodeTypes_1476395011(r_1459617800), 128);

  return result_1459617801;

}

function isDecimal_1459617802(r_1459617803) {
  var result_1459617804 = false;

    result_1459617804 = contains_1476395052(unicodeTypes_1476395011(r_1459617803), 1);

  return result_1459617804;

}

function isWhiteSpace_1459617880(r_1459617881) {
  var result_1459617882 = false;

    result_1459617882 = contains_1476395052(unicodeTypes_1476395011(r_1459617881), 64);

  return result_1459617882;

}

function hasJsBigInt_738197547() {
  var result_738197548 = false;

    result_738197548 = typeof BigInt != 'undefined'

  return result_738197548;

}

function hiXorLoJs_687865941(a_687865942, b_687865943) {
  var result_687865944 = 0n;

    var prod_687865945 = (a_687865942 * b_687865943);
    var mask_687865946 = BigInt("0xffffffffffffffff");
    result_687865944 = ((prod_687865945 >> BigInt("64")) ^ (prod_687865945 & mask_687865946));

  return result_687865944;

}

function hashWangYi1_687866034(x_687866036) {
  var result_687866037 = 0;

    if (hasJsBigInt_738197547()) {
    var P0HEX60gensym6_687866056 = BigInt("0xa0761d6478bd642f");
    var P1HEX60gensym6_687866057 = BigInt("0xe7037ed1a0b428db");
    var P58HEX60gensym6_687866058 = BigInt("0xeb44accab455d16d");
    var resHEX60gensym6_687866059 = hiXorLoJs_687865941(hiXorLoJs_687865941(P0HEX60gensym6_687866056, (BigInt(x_687866036) ^ P1HEX60gensym6_687866057)), P58HEX60gensym6_687866058);
    result_687866037 = Number((() => { const i = resHEX60gensym6_687866059, b = 32; return BigInt.asIntN(b, i) })());
    }
    else {
      result_687866037 = (x_687866036 & 4294967295);
    }
    

  return result_687866037;

}

function hash_1308623486(x_1308623488) {
  var result_1308623489 = 0;

    result_1308623489 = hashWangYi1_687866034(x_1308623488);

  return result_1308623489;

}

function isFilled_1140850726(hcode_1140850727) {
  var result_1140850728 = false;

    result_1140850728 = !((hcode_1140850727 == 0));

  return result_1140850728;

}

function nextTry_1140850729(h_1140850730, maxHash_1140850731) {
  var result_1140850732 = 0;

    result_1140850732 = (addInt(h_1140850730, 1) & maxHash_1140850731);

  return result_1140850732;

}

function rawGet_1308623479(t_1308623482, key_1308623483, hc_1308623484, hc_1308623484_Idx) {
            var Temporary3;

  var result_1308623485 = 0;

  BeforeRet: do {
    hc_1308623484[hc_1308623484_Idx] = hash_1308623486(key_1308623483);
    if ((hc_1308623484[hc_1308623484_Idx] == 0)) {
    hc_1308623484[hc_1308623484_Idx] = 314159265;
    }
    
    if (((t_1308623482.data).length == 0)) {
    result_1308623485 = -1;
    break BeforeRet;
    }
    
    var h_1308623518 = (hc_1308623484[hc_1308623484_Idx] & (t_1308623482.data).length - 1);
    Label1: do {
        Label2: while (true) {
        if (!isFilled_1140850726(t_1308623482.data[chckIndx(h_1308623518, 0, (t_1308623482.data).length - 1)].Field0)) break Label2;
            if (!(t_1308623482.data[chckIndx(h_1308623518, 0, (t_1308623482.data).length - 1)].Field0 == hc_1308623484[hc_1308623484_Idx])) Temporary3 = false; else {              Temporary3 = HEX3DHEX3D_973079447(t_1308623482.data[chckIndx(h_1308623518, 0, (t_1308623482.data).length - 1)].Field1, key_1308623483);            }          if (Temporary3) {
          result_1308623485 = h_1308623518;
          break BeforeRet;
          }
          
          h_1308623518 = nextTry_1140850729(h_1308623518, (t_1308623482.data).length - 1);
        }
    } while (false);
    result_1308623485 = subInt(-1, h_1308623518);
  } while (false);

  return result_1308623485;

}

function contains_1459617944(s_1459617946, key_1459617947) {
  var result_1459617948 = false;

    var hc_1459617949 = [0];
    var index_1459617963 = rawGet_1308623479(s_1459617946, key_1459617947, hc_1459617949, 0);
    result_1459617948 = (0 <= index_1459617963);

  return result_1459617948;

}

function HEX3CHEX3D_1224736802(x_1224736803, y_1224736804) {
  var result_1224736805 = false;

    result_1224736805 = (((x_1224736803) | 0) <= ((y_1224736804) | 0));

  return result_1224736805;

}

function contains_1459617873(s_1459617877, value_1459617878) {
  var result_1459617879 = false;

    result_1459617879 = (HEX3CHEX3D_1224736802(s_1459617877.a, value_1459617878) && HEX3CHEX3D_1224736802(value_1459617878, s_1459617877.b));

  return result_1459617879;

}

function contains_1459617851(sr_1459617853, r_1459617854) {
  var result_1459617855 = false;

    result_1459617855 = false;
    Label1: do {
      var sl_1459617859 = null;
      var i_1778387529 = 0;
      var L_1778387530 = (sr_1459617853).length;
      Label2: do {
          Label3: while (true) {
          if (!(i_1778387529 < L_1778387530)) break Label3;
            sl_1459617859 = sr_1459617853[chckIndx(i_1778387529, 0, (sr_1459617853).length - 1)];
            result_1459617855 = contains_1459617873(sl_1459617859, r_1459617854);
            if (result_1459617855) {
            break Label1;
            }
            
            i_1778387529 = addInt(i_1778387529, 1);
            if (!(((sr_1459617853).length == L_1778387530))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);

  return result_1459617855;

}

function binarySearch_973079541(c_973079542, tab_973079543, len_973079544, stride_973079545) {
      var Temporary3;

  var result_973079546 = 0;

  BeforeRet: do {
    var n_973079547 = len_973079544;
    var t_973079548 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(1 < n_973079547)) break Label2;
          var m_973079549 = divInt(n_973079547, 2);
          var p_973079550 = addInt(t_973079548, mulInt(m_973079549, stride_973079545));
          if ((tab_973079543[chckIndx(p_973079550, 0, (tab_973079543).length - 1)] <= ((c_973079542) | 0))) {
          t_973079548 = p_973079550;
          n_973079547 = subInt(n_973079547, m_973079549);
          }
          else {
            n_973079547 = m_973079549;
          }
          
        }
    } while (false);
      if (!!((n_973079547 == 0))) Temporary3 = false; else {        Temporary3 = (tab_973079543[chckIndx(t_973079548, 0, (tab_973079543).length - 1)] <= ((c_973079542) | 0));      }    if (Temporary3) {
    result_973079546 = t_973079548;
    break BeforeRet;
    }
    
    result_973079546 = -1;
    break BeforeRet;
  } while (false);

  return result_973079546;

}

function nuctoLower(c_973079552) {
      var Temporary1;
      var Temporary2;
      var Temporary3;

  var result_973079553 = 0;

  BeforeRet: do {
    var c_973079554 = c_973079552;
    var p_973079563 = binarySearch_973079541(c_973079554, toLowerRanges_973079451, 45, 3);
      if (!(0 <= p_973079563)) Temporary2 = false; else {        Temporary2 = (toLowerRanges_973079451[chckIndx(p_973079563, 0, (toLowerRanges_973079451).length - 1)] <= ((c_973079554) | 0));      }      if (!Temporary2) Temporary1 = false; else {        Temporary1 = (((c_973079554) | 0) <= toLowerRanges_973079451[chckIndx(addInt(p_973079563, 1), 0, (toLowerRanges_973079451).length - 1)]);      }    if (Temporary1) {
    result_973079553 = ((subInt(addInt(((c_973079554) | 0), toLowerRanges_973079451[chckIndx(addInt(p_973079563, 2), 0, (toLowerRanges_973079451).length - 1)]), 500)) | 0);
    break BeforeRet;
    }
    
    p_973079563 = binarySearch_973079541(c_973079554, toLowerSinglets_973079452, 610, 2);
      if (!(0 <= p_973079563)) Temporary3 = false; else {        Temporary3 = (((c_973079554) | 0) == toLowerSinglets_973079452[chckIndx(p_973079563, 0, (toLowerSinglets_973079452).length - 1)]);      }    if (Temporary3) {
    result_973079553 = ((subInt(addInt(((c_973079554) | 0), toLowerSinglets_973079452[chckIndx(addInt(p_973079563, 1), 0, (toLowerSinglets_973079452).length - 1)]), 500)) | 0);
    break BeforeRet;
    }
    
    result_973079553 = c_973079554;
    break BeforeRet;
  } while (false);

  return result_973079553;

}

function nuctoUpper(c_973079600) {
      var Temporary1;
      var Temporary2;
      var Temporary3;

  var result_973079601 = 0;

  BeforeRet: do {
    var c_973079602 = c_973079600;
    var p_973079611 = binarySearch_973079541(c_973079602, toUpperRanges_973079453, 46, 3);
      if (!(0 <= p_973079611)) Temporary2 = false; else {        Temporary2 = (toUpperRanges_973079453[chckIndx(p_973079611, 0, (toUpperRanges_973079453).length - 1)] <= ((c_973079602) | 0));      }      if (!Temporary2) Temporary1 = false; else {        Temporary1 = (((c_973079602) | 0) <= toUpperRanges_973079453[chckIndx(addInt(p_973079611, 1), 0, (toUpperRanges_973079453).length - 1)]);      }    if (Temporary1) {
    result_973079601 = ((subInt(addInt(((c_973079602) | 0), toUpperRanges_973079453[chckIndx(addInt(p_973079611, 2), 0, (toUpperRanges_973079453).length - 1)]), 500)) | 0);
    break BeforeRet;
    }
    
    p_973079611 = binarySearch_973079541(c_973079602, toUpperSinglets_973079454, 624, 2);
      if (!(0 <= p_973079611)) Temporary3 = false; else {        Temporary3 = (((c_973079602) | 0) == toUpperSinglets_973079454[chckIndx(p_973079611, 0, (toUpperSinglets_973079454).length - 1)]);      }    if (Temporary3) {
    result_973079601 = ((subInt(addInt(((c_973079602) | 0), toUpperSinglets_973079454[chckIndx(addInt(p_973079611, 1), 0, (toUpperSinglets_973079454).length - 1)]), 500)) | 0);
    break BeforeRet;
    }
    
    result_973079601 = c_973079602;
    break BeforeRet;
  } while (false);

  return result_973079601;

}

function swapCase_1459617920(r_1459617921) {
  var result_1459617922 = 0;

  BeforeRet: do {
    result_1459617922 = nuctoLower(r_1459617921);
    if (!(HEX3DHEX3D_973079447(result_1459617922, r_1459617921))) {
    break BeforeRet;
    }
    
    result_1459617922 = nuctoUpper(r_1459617921);
  } while (false);

  return result_1459617922;

}

function isWordAscii_1459617805(r_1459617806) {
    var Temporary1;

  var result_1459617807 = false;

    switch (((r_1459617806) | 0)) {
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 95:
      Temporary1 = true;
      break;
    default: 
      Temporary1 = false;
      break;
    }
    result_1459617807 = Temporary1;

  return result_1459617807;

}

function isDigitAscii_1459617904(r_1459617905) {
    var Temporary1;

  var result_1459617906 = false;

    switch (((r_1459617905) | 0)) {
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
      Temporary1 = true;
      break;
    default: 
      Temporary1 = false;
      break;
    }
    result_1459617906 = Temporary1;

  return result_1459617906;

}

function isWhiteSpaceAscii_1459617883(r_1459617884) {
    var Temporary1;

  var result_1459617885 = false;

    switch (((r_1459617884) | 0)) {
    case 32:
    case 9:
    case 10:
    case 13:
    case 12:
    case 11:
      Temporary1 = true;
      break;
    default: 
      Temporary1 = false;
      break;
    }
    result_1459617885 = Temporary1;

  return result_1459617885;

}

function contains_1174405124(a_1174405125, b_1174405126) {
  var result_1174405127 = false;

    result_1174405127 = !(((((b_1174405126) | 0) & ((a_1174405125) | 0)) == 0));

  return result_1174405127;

}

function unicodeCategory_1174405262(props_1174405263) {
  var result_1174405264 = 0;

    result_1174405264 = props_1174405263[chckIndx(0, 0, (props_1174405263).length - 1)];

  return result_1174405264;

}

function properties_1174405212(cp_1174405213) {
  var result_1174405214 = new Int32Array(4);

    if (!((((cp_1174405213) | 0) <= 1114111))) {
    failedAssertImpl_218103864(makeNimstrLit("properties.nim(197, 10) `cp.int <= 0x0010FFFF` "));
    }
    
    var blockOffset_1174405224 = mulInt(((propsOffsets_1191182379[chckIndx(divInt(((cp_1174405213) | 0), 128), 0, (propsOffsets_1191182379).length - 1)]) | 0), 128);
    var idx_1174405225 = propsIndices_1191182380[chckIndx(addInt(blockOffset_1174405224, modInt(((cp_1174405213) | 0), 128)), 0, (propsIndices_1191182380).length - 1)];
    result_1174405214 = nimCopy(result_1174405214, propsData_1191182381[chckIndx(idx_1174405225, 0, (propsData_1191182381).length - 1)], NTI1174405171);

  return result_1174405214;

}

function unicodeCategory_1174405265(cp_1174405266) {
  var result_1174405267 = 0;

    result_1174405267 = unicodeCategory_1174405262(properties_1174405212(cp_1174405266));

  return result_1174405267;

}

function isAnyAscii_1459617913(r_1459617914) {
    var Temporary1;

  var result_1459617915 = false;

    if (!(((r_1459617914) | 0) <= 127)) Temporary1 = false; else {      Temporary1 = !(HEX3DHEX3D_973079447(r_1459617914, 10));    }    result_1459617915 = Temporary1;

  return result_1459617915;

}

function match_1459617923(n_1459617924, r_1459617925) {
    var Temporary1;

  var result_1459617926 = false;

  BeforeRet: do {
    if ((((r_1459617925) | 0) < 0)) {
    result_1459617926 = (n_1459617924.kind == 45);
    break BeforeRet;
    }
    
    switch (n_1459617924.kind) {
    case 45:
      Temporary1 = HEX3DHEX3D_973079447(r_1459617925, -1);
      break;
    case 18:
      Temporary1 = isWord_1459617799(r_1459617925);
      break;
    case 22:
      Temporary1 = !(isWord_1459617799(r_1459617925));
      break;
    case 19:
      Temporary1 = isDecimal_1459617802(r_1459617925);
      break;
    case 23:
      Temporary1 = !(isDecimal_1459617802(r_1459617925));
      break;
    case 20:
      Temporary1 = isWhiteSpace_1459617880(r_1459617925);
      break;
    case 24:
      Temporary1 = !(isWhiteSpace_1459617880(r_1459617925));
      break;
    case 38:
    case 39:
      var matches_1459617964 = (contains_1459617944(n_1459617924.cps, r_1459617925) || contains_1459617851(n_1459617924.ranges, r_1459617925));
      if (!(matches_1459617964)) {
      Label2: do {
        var nn_1459617968 = null;
        var i_603980072 = 0;
        var L_603980073 = (n_1459617924.shorthands).length;
        Label3: do {
            Label4: while (true) {
            if (!(i_603980072 < L_603980073)) break Label4;
              nn_1459617968 = n_1459617924.shorthands[chckIndx(i_603980072, 0, (n_1459617924.shorthands).length - 1)];
              matches_1459617964 = match_1459617923(nn_1459617968, r_1459617925);
              if (matches_1459617964) {
              break Label2;
              }
              
              i_603980072 = addInt(i_603980072, 1);
              if (!(((n_1459617924.shorthands).length == L_603980073))) {
              failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while (false);
      } while (false);
      }
      
      Temporary1 = ((matches_1459617964 && (n_1459617924.kind == 38)) || (!(matches_1459617964) && (n_1459617924.kind == 39)));
      break;
    case 26:
      Temporary1 = !(HEX3DHEX3D_973079447(r_1459617925, 10));
      break;
    case 27:
      Temporary1 = true;
      break;
    case 1:
      Temporary1 = (HEX3DHEX3D_973079447(r_1459617925, n_1459617924.cp) || HEX3DHEX3D_973079447(r_1459617925, swapCase_1459617920(n_1459617924.cp)));
      break;
    case 30:
      Temporary1 = isWordAscii_1459617805(r_1459617925);
      break;
    case 31:
      Temporary1 = isDigitAscii_1459617904(r_1459617925);
      break;
    case 32:
      Temporary1 = isWhiteSpaceAscii_1459617883(r_1459617925);
      break;
    case 21:
      Temporary1 = contains_1174405124(n_1459617924.cc, unicodeCategory_1174405265(r_1459617925));
      break;
    case 33:
      Temporary1 = !(isWordAscii_1459617805(r_1459617925));
      break;
    case 34:
      Temporary1 = !(isDigitAscii_1459617904(r_1459617925));
      break;
    case 35:
      Temporary1 = !(isWhiteSpaceAscii_1459617883(r_1459617925));
      break;
    case 25:
      Temporary1 = !(contains_1174405124(n_1459617924.cc, unicodeCategory_1174405265(r_1459617925)));
      break;
    case 36:
      Temporary1 = isAnyAscii_1459617913(r_1459617925);
      break;
    case 37:
      Temporary1 = (isAnyAscii_1459617913(r_1459617925) || HEX3DHEX3D_973079447(r_1459617925, 10));
      break;
    default: 
      if (!((n_1459617924.kind == 0))) {
      failedAssertImpl_218103864(makeNimstrLit("nodematch.nim(168, 12) `n.kind == reChar` "));
      }
      
      Temporary1 = HEX3DHEX3D_973079447(n_1459617924.cp, r_1459617925);
      break;
    }
    result_1459617926 = Temporary1;
  } while (false);

  return result_1459617926;

}

function isWordBoundary_1459617833(r_1459617834, nxt_1459617835) {
    var Temporary1;
    var Temporary2;

  var result_1459617836 = false;

    if (!(-1 < ((r_1459617834) | 0))) Temporary1 = false; else {      Temporary1 = isWord_1459617799(r_1459617834);    }    if (!(-1 < ((nxt_1459617835) | 0))) Temporary2 = false; else {      Temporary2 = isWord_1459617799(nxt_1459617835);    }    result_1459617836 = (Temporary1 != Temporary2);

  return result_1459617836;

}

function isWordBoundaryAscii_1459617837(r_1459617838, nxt_1459617839) {
    var Temporary1;
    var Temporary2;

  var result_1459617840 = false;

    if (!(-1 < ((r_1459617838) | 0))) Temporary1 = false; else {      Temporary1 = isWordAscii_1459617805(r_1459617838);    }    if (!(-1 < ((nxt_1459617839) | 0))) Temporary2 = false; else {      Temporary2 = isWordAscii_1459617805(nxt_1459617839);    }    result_1459617840 = (Temporary1 != Temporary2);

  return result_1459617840;

}

function match_1459617841(n_1459617842, r_1459617843, nxt_1459617844) {
    var Temporary1;

  var result_1459617845 = false;

    switch (n_1459617842.kind) {
    case 14:
    case 10:
      Temporary1 = HEX3DHEX3D_973079447(r_1459617843, -1);
      break;
    case 15:
    case 11:
      Temporary1 = HEX3DHEX3D_973079447(nxt_1459617844, -1);
      break;
    case 12:
      Temporary1 = (HEX3DHEX3D_973079447(r_1459617843, -1) || HEX3DHEX3D_973079447(r_1459617843, 10));
      break;
    case 13:
      Temporary1 = (HEX3DHEX3D_973079447(nxt_1459617844, -1) || HEX3DHEX3D_973079447(nxt_1459617844, 10));
      break;
    case 16:
      Temporary1 = isWordBoundary_1459617833(r_1459617843, nxt_1459617844);
      break;
    case 17:
      Temporary1 = !(isWordBoundary_1459617833(r_1459617843, nxt_1459617844));
      break;
    case 28:
      Temporary1 = isWordBoundaryAscii_1459617837(r_1459617843, nxt_1459617844);
      break;
    case 29:
      Temporary1 = !(isWordBoundaryAscii_1459617837(r_1459617843, nxt_1459617844));
      break;
    default: 
      if (true) {
      failedAssertImpl_218103864(makeNimstrLit("nodematch.nim(66, 12) `false` "));
      }
      
      Temporary1 = false;
      break;
    }
    result_1459617845 = Temporary1;

  return result_1459617845;

}

function grow_1426064303(sm_1426064304) {
    var Temporary1;

    if (!((sm_1426064304.i <= (sm_1426064304.s).length))) {
    failedAssertImpl_218103864(makeNimstrLit("nfatype.nim(180, 12) `sm.i <= sm.s.len` "));
    }
    
    if ((sm_1426064304.i == (sm_1426064304.s).length)) {
    if (sm_1426064304.s.length < (Temporary1 = chckRange(mulInt(nimMax(1, (sm_1426064304.s).length), 2), 0, 2147483647), Temporary1)) { for (var i = sm_1426064304.s.length ; i < Temporary1 ; ++i) sm_1426064304.s.push(({a: null, b: null})); }
               else { sm_1426064304.s.length = Temporary1; };
    }
    
    sm_1426064304.i = addInt(sm_1426064304.i, 1);

  
}

function setLen_1426064259(sm_1426064260, sm_1426064260_Idx, size_1426064261) {
    if (sm_1426064260[sm_1426064260_Idx].ss.length < size_1426064261) { for (var i = sm_1426064260[sm_1426064260_Idx].ss.length ; i < size_1426064261 ; ++i) sm_1426064260[sm_1426064260_Idx].ss.push(0); }
               else { sm_1426064260[sm_1426064260_Idx].ss.length = size_1426064261; };

  
}

function setLen_1426064272(item_1426064273, size_1426064274) {
    if ((item_1426064273.a == null)) {
    if (!((item_1426064273.b == null))) {
    failedAssertImpl_218103864(makeNimstrLit("nfatype.nim(162, 14) `item.b == nil` "));
    }
    
    item_1426064273.a = newSubmatches_1426064136(size_1426064274);
    item_1426064273.b = newSubmatches_1426064136(size_1426064274);
    }
    else {
      if (!(!((item_1426064273.b == null)))) {
      failedAssertImpl_218103864(makeNimstrLit("nfatype.nim(166, 14) `item.b != nil` "));
      }
      
      setLen_1426064259(item_1426064273, "a", size_1426064274);
      setLen_1426064259(item_1426064273, "b", size_1426064274);
    }
    

  
}

function removeLast_1426064328(sm_1426064329) {
    if (!((0 < sm_1426064329.i))) {
    failedAssertImpl_218103864(makeNimstrLit("nfatype.nim(186, 12) `sm.i > 0` "));
    }
    
    sm_1426064329.i = subInt(sm_1426064329.i, 1);

  
}

function HEX5BHEX5D_1426064203(sm_1426064204, i_1426064205) {
  var result_1426064206 = {Field0: 0, Field1: 0, Field2: ({a: 0, b: 0})};

    result_1426064206 = nimCopy(result_1426064206, sm_1426064204.sx[i_1426064205], NTI1426063871);

  return result_1426064206;

}

function reverse_1426063537(capts_1426063538, capts_1426063538_Idx, a_1426063539, b_1426063540) {
  var result_1426063541 = 0;

  BeforeRet: do {
    if (!((b_1426063540 <= a_1426063539))) {
    failedAssertImpl_218103864(makeNimstrLit("nfatype.nim(46, 12) `a >= b` "));
    }
    
    var capt_1426063547 = a_1426063539;
    var parent_1426063548 = b_1426063540;
    Label1: do {
        Label2: while (true) {
        if (!!((capt_1426063547 == b_1426063540))) break Label2;
          var p_1426063549 = capts_1426063538[capts_1426063538_Idx][chckIndx(capt_1426063547, 0, (capts_1426063538[capts_1426063538_Idx]).length - 1)].parent;
          capts_1426063538[capts_1426063538_Idx][chckIndx(capt_1426063547, 0, (capts_1426063538[capts_1426063538_Idx]).length - 1)].parent = parent_1426063548;
          parent_1426063548 = capt_1426063547;
          capt_1426063547 = p_1426063549;
        }
    } while (false);
    result_1426063541 = parent_1426063548;
    break BeforeRet;
  } while (false);

  return result_1426063541;

}

function matchImpl_1627389991(smA_1627389992, smA_1627389992_Idx, smB_1627389993, smB_1627389993_Idx, capts_1627389994, capts_1627389994_Idx, captIdx_1627389995, captIdx_1627389995_Idx, text_1627389996, nfa_1627389997, look_1627389998, start_1627389999, flags_1627390000) {
                                        var Temporary14;
                                        var Temporary15;
            var Temporary17;
                                  var Temporary29;
                                  var Temporary30;

  var result_1627390001 = false;

  BeforeRet: do {
    var c_1627390002 = -1;
    var cPrev_1627390003 = -1;
    var i_1627390004 = start_1627389999;
    var iNext_1627390005 = start_1627389999;
    var captx_1627390006 = [-1];
    var matched_1627390007 = false;
    var anchored_1627390013 = (flags_1627390000[4] != undefined);
    if (contains_1308624332(HEX2EHEX2E_973079379(0, subInt((text_1627389996).length, 1)), subInt(start_1627389999, 1))) {
    cPrev_1627390003 = bwRuneAt_1224736810(text_1627389996, subInt(start_1627389999, 1));
    }
    
    clear_1426064244(smA_1627389992, smA_1627389992_Idx);
    add_1426064214(smA_1627389992, smA_1627389992_Idx, {Field0: 0, Field1: captIdx_1627389995[captIdx_1627389995_Idx], Field2: HEX2EHEX2E_973079379(i_1627390004, subInt(i_1627390004, 1))});
    Label1: do {
        Label2: while (true) {
        if (!(i_1627390004 < (text_1627389996).length)) break Label2;
          if ((text_1627389996[chckIndx(iNext_1627390005, 0, (text_1627389996).length - 1)] <= 127)) {
          c_1627390002 = chckRange(text_1627389996[chckIndx(iNext_1627390005, 0, (text_1627389996).length - 1)], -2147483648, 2147483647);
          iNext_1627390005 = addInt(iNext_1627390005, 1);
          }
          else {
          if (((text_1627389996[chckIndx(iNext_1627390005, 0, (text_1627389996).length - 1)] >>> 5) == 6)) {
          if ((iNext_1627390005 <= subInt((text_1627389996).length, 2))) {
          c_1627390002 = chckRange((((text_1627389996[chckIndx(iNext_1627390005, 0, (text_1627389996).length - 1)] & 31) << 6) | (text_1627389996[chckIndx(addInt(iNext_1627390005, 1), 0, (text_1627389996).length - 1)] & 63)), -2147483648, 2147483647);
          iNext_1627390005 = addInt(iNext_1627390005, 2);
          }
          else {
            c_1627390002 = 65533;
            iNext_1627390005 = addInt(iNext_1627390005, 1);
          }
          
          }
          else {
          if (((text_1627389996[chckIndx(iNext_1627390005, 0, (text_1627389996).length - 1)] >>> 4) == 14)) {
          if ((iNext_1627390005 <= subInt((text_1627389996).length, 3))) {
          c_1627390002 = chckRange(((((text_1627389996[chckIndx(iNext_1627390005, 0, (text_1627389996).length - 1)] & 15) << 12) | ((text_1627389996[chckIndx(addInt(iNext_1627390005, 1), 0, (text_1627389996).length - 1)] & 63) << 6)) | (text_1627389996[chckIndx(addInt(iNext_1627390005, 2), 0, (text_1627389996).length - 1)] & 63)), -2147483648, 2147483647);
          iNext_1627390005 = addInt(iNext_1627390005, 3);
          }
          else {
            c_1627390002 = 65533;
            iNext_1627390005 = addInt(iNext_1627390005, 1);
          }
          
          }
          else {
          if (((text_1627389996[chckIndx(iNext_1627390005, 0, (text_1627389996).length - 1)] >>> 3) == 30)) {
          if ((iNext_1627390005 <= subInt((text_1627389996).length, 4))) {
          c_1627390002 = chckRange((((((text_1627389996[chckIndx(iNext_1627390005, 0, (text_1627389996).length - 1)] & 7) << 18) | ((text_1627389996[chckIndx(addInt(iNext_1627390005, 1), 0, (text_1627389996).length - 1)] & 63) << 12)) | ((text_1627389996[chckIndx(addInt(iNext_1627390005, 2), 0, (text_1627389996).length - 1)] & 63) << 6)) | (text_1627389996[chckIndx(addInt(iNext_1627390005, 3), 0, (text_1627389996).length - 1)] & 63)), -2147483648, 2147483647);
          iNext_1627390005 = addInt(iNext_1627390005, 4);
          }
          else {
            c_1627390002 = 65533;
            iNext_1627390005 = addInt(iNext_1627390005, 1);
          }
          
          }
          else {
          if (((text_1627389996[chckIndx(iNext_1627390005, 0, (text_1627389996).length - 1)] >>> 2) == 62)) {
          if ((iNext_1627390005 <= subInt((text_1627389996).length, 5))) {
          c_1627390002 = chckRange(((((((text_1627389996[chckIndx(iNext_1627390005, 0, (text_1627389996).length - 1)] & 3) << 24) | ((text_1627389996[chckIndx(addInt(iNext_1627390005, 1), 0, (text_1627389996).length - 1)] & 63) << 18)) | ((text_1627389996[chckIndx(addInt(iNext_1627390005, 2), 0, (text_1627389996).length - 1)] & 63) << 12)) | ((text_1627389996[chckIndx(addInt(iNext_1627390005, 3), 0, (text_1627389996).length - 1)] & 63) << 6)) | (text_1627389996[chckIndx(addInt(iNext_1627390005, 4), 0, (text_1627389996).length - 1)] & 63)), -2147483648, 2147483647);
          iNext_1627390005 = addInt(iNext_1627390005, 5);
          }
          else {
            c_1627390002 = 65533;
            iNext_1627390005 = addInt(iNext_1627390005, 1);
          }
          
          }
          else {
          if (((text_1627389996[chckIndx(iNext_1627390005, 0, (text_1627389996).length - 1)] >>> 1) == 126)) {
          if ((iNext_1627390005 <= subInt((text_1627389996).length, 6))) {
          c_1627390002 = chckRange((((((((text_1627389996[chckIndx(iNext_1627390005, 0, (text_1627389996).length - 1)] & 1) << 30) | ((text_1627389996[chckIndx(addInt(iNext_1627390005, 1), 0, (text_1627389996).length - 1)] & 63) << 24)) | ((text_1627389996[chckIndx(addInt(iNext_1627390005, 2), 0, (text_1627389996).length - 1)] & 63) << 18)) | ((text_1627389996[chckIndx(addInt(iNext_1627390005, 3), 0, (text_1627389996).length - 1)] & 63) << 12)) | ((text_1627389996[chckIndx(addInt(iNext_1627390005, 4), 0, (text_1627389996).length - 1)] & 63) << 6)) | (text_1627389996[chckIndx(addInt(iNext_1627390005, 5), 0, (text_1627389996).length - 1)] & 63)), -2147483648, 2147483647);
          iNext_1627390005 = addInt(iNext_1627390005, 6);
          }
          else {
            c_1627390002 = 65533;
            iNext_1627390005 = addInt(iNext_1627390005, 1);
          }
          
          }
          else {
            c_1627390002 = chckRange(text_1627389996[chckIndx(iNext_1627390005, 0, (text_1627389996).length - 1)], -2147483648, 2147483647);
            iNext_1627390005 = addInt(iNext_1627390005, 1);
          }
          }}}}}
          clear_1426064244(smB_1627389993, smB_1627389993_Idx);
          Label3: do {
            var n_1627390281 = 0;
            var capt_1627390282 = 0;
            var bounds_1627390283 = ({a: 0, b: 0});
            Label4: do {
              var i_1778387502 = 0;
              var colontmp__1778387503 = 0;
              colontmp__1778387503 = subInt(len_1426064241(smA_1627389992[smA_1627389992_Idx]), 1);
              var res_1778387504 = 0;
              Label5: do {
                  Label6: while (true) {
                  if (!(res_1778387504 <= colontmp__1778387503)) break Label6;
                    i_1778387502 = res_1778387504;
                    var colontmp__1778387507 = nimCopy(null, smA_1627389992[smA_1627389992_Idx].sx[chckIndx(i_1778387502, 0, (smA_1627389992[smA_1627389992_Idx].sx).length - 1)], NTI1426063871);
                    n_1627390281 = colontmp__1778387507["Field0"];
                    capt_1627390282 = colontmp__1778387507["Field1"];
                    bounds_1627390283 = nimCopy(bounds_1627390283, colontmp__1778387507["Field2"], NTI788529213);
                    if ((anchored_1627390013 && (nfa_1627389997.s[chckIndx(n_1627390281, 0, (nfa_1627389997.s).length - 1)].kind == 45))) {
                    if (!(hasState_1426064210(smB_1627389993[smB_1627389993_Idx], n_1627390281))) {
                    add_1426064214(smB_1627389993, smB_1627389993_Idx, {Field0: n_1627390281, Field1: capt_1627390282, Field2: nimCopy(null, bounds_1627390283, NTI788529213)});
                    }
                    
                    break Label3;
                    }
                    
                    Label7: do {
                      var nti_1627390293 = 0;
                      var nt_1627390294 = 0;
                      var colontmp__1778387493 = [];
                      colontmp__1778387493 = nfa_1627389997.s[chckIndx(n_1627390281, 0, (nfa_1627389997.s).length - 1)].next;
                      var i_1778387494 = 0;
                      var L_1778387495 = (colontmp__1778387493).length;
                      Label8: do {
                          Label9: while (true) {
                          if (!(i_1778387494 < L_1778387495)) break Label9;
                            nti_1627390293 = i_1778387494;
                            nt_1627390294 = colontmp__1778387493[chckIndx(i_1778387494, 0, (colontmp__1778387493).length - 1)];
                            Label10: do {
                              if (hasState_1426064210(smB_1627389993[smB_1627389993_Idx], nt_1627390294)) {
                              break Label10;
                              }
                              
                              if (!(match_1459617923(nfa_1627389997.s[chckIndx(nt_1627390294, 0, (nfa_1627389997.s).length - 1)], c_1627390002))) {
                              if (!((anchored_1627390013 && (nfa_1627389997.s[chckIndx(nt_1627390294, 0, (nfa_1627389997.s).length - 1)].kind == 45)))) {
                              break Label10;
                              }
                              
                              }
                              
                              if ((nfa_1627389997.t.allZ[chckIndx(n_1627390281, 0, (nfa_1627389997.t.allZ).length - 1)][chckIndx(nti_1627390293, 0, (nfa_1627389997.t.allZ[chckIndx(n_1627390281, 0, (nfa_1627389997.t.allZ).length - 1)]).length - 1)] == -1)) {
                              add_1426064214(smB_1627389993, smB_1627389993_Idx, {Field0: nt_1627390294, Field1: capt_1627390282, Field2: HEX2EHEX2E_973079379(bounds_1627390283.a, subInt(i_1627390004, 1))});
                              break Label10;
                              }
                              
                              matched_1627390007 = true;
                              captx_1627390006[0] = capt_1627390282;
                              Label11: do {
                                var z_1627390307 = null;
                                var colontmp__1778387489 = [];
                                colontmp__1778387489 = nfa_1627389997.t.z[chckIndx(nfa_1627389997.t.allZ[chckIndx(n_1627390281, 0, (nfa_1627389997.t.allZ).length - 1)][chckIndx(nti_1627390293, 0, (nfa_1627389997.t.allZ[chckIndx(n_1627390281, 0, (nfa_1627389997.t.allZ).length - 1)]).length - 1)], 0, (nfa_1627389997.t.z).length - 1)];
                                var i_1778387490 = 0;
                                var L_1778387491 = (colontmp__1778387489).length;
                                Label12: do {
                                    Label13: while (true) {
                                    if (!(i_1778387490 < L_1778387491)) break Label13;
                                      z_1627390307 = colontmp__1778387489[chckIndx(i_1778387490, 0, (colontmp__1778387489).length - 1)];
                                      if (!(matched_1627390007)) {
                                      break Label11;
                                      }
                                      
                                      switch (z_1627390307.kind) {
                                      case 3:
                                      case 4:
                                        capts_1627389994[capts_1627389994_Idx].push({parent: captx_1627390006[0], bound: i_1627390004, idx: z_1627390307.idx});;
                                        captx_1627390006[0] = ((subInt((capts_1627389994[capts_1627389994_Idx]).length, 1)) | 0);
                                        break;
                                      case 10:
                                      case 11:
                                      case 12:
                                      case 13:
                                      case 14:
                                      case 15:
                                      case 16:
                                      case 17:
                                      case 28:
                                      case 29:
                                        matched_1627390007 = match_1459617841(z_1627390307, cPrev_1627390003, c_1627390002);
                                        break;
                                      case 40:
                                      case 41:
                                      case 42:
                                      case 43:
                                        if (z_1627390307.subExp.reverseCapts) {
                                        Temporary14 = ConstSet58;
                                        }
                                        else {
                                        Temporary14 = ConstSet59;
                                        }
                                        
                                        var flags2_1627390323 = nimCopy(null, Temporary14, NTI1627390530);
                                        grow_1426064303(look_1627389998.smL);
                                        setLen_1426064272(look_1627389998.smL.s[chckIndx(subInt(look_1627389998.smL.i, 1), 0, (look_1627389998.smL.s).length - 1)], (z_1627390307.subExp.nfa.s).length);
                                        switch (z_1627390307.kind) {
                                        case 40:
                                          Temporary15 = look_1627389998.ahead(look_1627389998.smL.s[chckIndx(subInt(look_1627389998.smL.i, 1), 0, (look_1627389998.smL.s).length - 1)], "a", look_1627389998.smL.s[chckIndx(subInt(look_1627389998.smL.i, 1), 0, (look_1627389998.smL.s).length - 1)], "b", capts_1627389994, capts_1627389994_Idx, captx_1627390006, 0, text_1627389996, z_1627390307.subExp.nfa, look_1627389998, i_1627390004, flags2_1627390323);
                                          break;
                                        case 42:
                                          Temporary15 = !(look_1627389998.ahead(look_1627389998.smL.s[chckIndx(subInt(look_1627389998.smL.i, 1), 0, (look_1627389998.smL.s).length - 1)], "a", look_1627389998.smL.s[chckIndx(subInt(look_1627389998.smL.i, 1), 0, (look_1627389998.smL.s).length - 1)], "b", capts_1627389994, capts_1627389994_Idx, captx_1627390006, 0, text_1627389996, z_1627390307.subExp.nfa, look_1627389998, i_1627390004, flags2_1627390323));
                                          break;
                                        case 41:
                                          Temporary15 = !((look_1627389998.behind(look_1627389998.smL.s[chckIndx(subInt(look_1627389998.smL.i, 1), 0, (look_1627389998.smL.s).length - 1)], "a", look_1627389998.smL.s[chckIndx(subInt(look_1627389998.smL.i, 1), 0, (look_1627389998.smL.s).length - 1)], "b", capts_1627389994, capts_1627389994_Idx, captx_1627390006, 0, text_1627389996, z_1627390307.subExp.nfa, look_1627389998, i_1627390004, 0, flags2_1627390323) == -1));
                                          break;
                                        case 43:
                                          Temporary15 = (look_1627389998.behind(look_1627389998.smL.s[chckIndx(subInt(look_1627389998.smL.i, 1), 0, (look_1627389998.smL.s).length - 1)], "a", look_1627389998.smL.s[chckIndx(subInt(look_1627389998.smL.i, 1), 0, (look_1627389998.smL.s).length - 1)], "b", capts_1627389994, capts_1627389994_Idx, captx_1627390006, 0, text_1627389996, z_1627390307.subExp.nfa, look_1627389998, i_1627390004, 0, flags2_1627390323) == -1);
                                          break;
                                        default: 
                                          if (true) {
                                          failedAssertImpl_218103864(makeNimstrLit("nfamatch.nim(71, 14) `false` "));
                                          }
                                          
                                          Temporary15 = false;
                                          break;
                                        }
                                        matched_1627390007 = Temporary15;
                                        removeLast_1426064328(look_1627389998.smL);
                                        break;
                                      default: 
                                        if (true) {
                                        failedAssertImpl_218103864(makeNimstrLit("nfamatch.nim(113, 20) `false` "));
                                        }
                                        
                                        break;
                                      }
                                      i_1778387490 = addInt(i_1778387490, 1);
                                      if (!(((colontmp__1778387489).length == L_1778387491))) {
                                      failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                                      }
                                      
                                    }
                                } while (false);
                              } while (false);
                              if (matched_1627390007) {
                              add_1426064214(smB_1627389993, smB_1627389993_Idx, {Field0: nt_1627390294, Field1: captx_1627390006[0], Field2: HEX2EHEX2E_973079379(bounds_1627390283.a, subInt(i_1627390004, 1))});
                              }
                              
                            } while (false);
                            i_1778387494 = addInt(i_1778387494, 1);
                            if (!(((colontmp__1778387493).length == L_1778387495))) {
                            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(173, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                            }
                            
                          }
                      } while (false);
                    } while (false);
                    res_1778387504 = addInt(res_1778387504, 1);
                  }
              } while (false);
            } while (false);
          } while (false);
          var Temporary16 = smA_1627389992[smA_1627389992_Idx]; smA_1627389992[smA_1627389992_Idx] = smB_1627389993[smB_1627389993_Idx]; smB_1627389993[smB_1627389993_Idx] = Temporary16;          if ((len_1426064241(smA_1627389992[smA_1627389992_Idx]) == 0)) {
          result_1627390001 = false;
          break BeforeRet;
          }
          
            if (!anchored_1627390013) Temporary17 = false; else {              Temporary17 = (nfa_1627389997.s[chckIndx(HEX5BHEX5D_1426064203(smA_1627389992[smA_1627389992_Idx], 0).Field0, 0, (nfa_1627389997.s).length - 1)].kind == 45);            }          if (Temporary17) {
          break Label1;
          }
          
          i_1627390004 = iNext_1627390005;
          cPrev_1627390003 = c_1627390002;
        }
    } while (false);
    c_1627390002 = -1;
    clear_1426064244(smB_1627389993, smB_1627389993_Idx);
    Label18: do {
      var n_1627390351 = 0;
      var capt_1627390352 = 0;
      var bounds_1627390353 = ({a: 0, b: 0});
      Label19: do {
        var i_1778387521 = 0;
        var colontmp__1778387522 = 0;
        colontmp__1778387522 = subInt(len_1426064241(smA_1627389992[smA_1627389992_Idx]), 1);
        var res_1778387523 = 0;
        Label20: do {
            Label21: while (true) {
            if (!(res_1778387523 <= colontmp__1778387522)) break Label21;
              i_1778387521 = res_1778387523;
              var colontmp__1778387526 = nimCopy(null, smA_1627389992[smA_1627389992_Idx].sx[chckIndx(i_1778387521, 0, (smA_1627389992[smA_1627389992_Idx].sx).length - 1)], NTI1426063871);
              n_1627390351 = colontmp__1778387526["Field0"];
              capt_1627390352 = colontmp__1778387526["Field1"];
              bounds_1627390353 = nimCopy(bounds_1627390353, colontmp__1778387526["Field2"], NTI788529213);
              if ((anchored_1627390013 && (nfa_1627389997.s[chckIndx(n_1627390351, 0, (nfa_1627389997.s).length - 1)].kind == 45))) {
              if (!(hasState_1426064210(smB_1627389993[smB_1627389993_Idx], n_1627390351))) {
              add_1426064214(smB_1627389993, smB_1627389993_Idx, {Field0: n_1627390351, Field1: capt_1627390352, Field2: nimCopy(null, bounds_1627390353, NTI788529213)});
              }
              
              break Label18;
              }
              
              Label22: do {
                var nti_1627390363 = 0;
                var nt_1627390364 = 0;
                var colontmp__1778387516 = [];
                colontmp__1778387516 = nfa_1627389997.s[chckIndx(n_1627390351, 0, (nfa_1627389997.s).length - 1)].next;
                var i_1778387517 = 0;
                var L_1778387518 = (colontmp__1778387516).length;
                Label23: do {
                    Label24: while (true) {
                    if (!(i_1778387517 < L_1778387518)) break Label24;
                      nti_1627390363 = i_1778387517;
                      nt_1627390364 = colontmp__1778387516[chckIndx(i_1778387517, 0, (colontmp__1778387516).length - 1)];
                      Label25: do {
                        if (hasState_1426064210(smB_1627389993[smB_1627389993_Idx], nt_1627390364)) {
                        break Label25;
                        }
                        
                        if (!(match_1459617923(nfa_1627389997.s[chckIndx(nt_1627390364, 0, (nfa_1627389997.s).length - 1)], c_1627390002))) {
                        if (!((anchored_1627390013 && (nfa_1627389997.s[chckIndx(nt_1627390364, 0, (nfa_1627389997.s).length - 1)].kind == 45)))) {
                        break Label25;
                        }
                        
                        }
                        
                        if ((nfa_1627389997.t.allZ[chckIndx(n_1627390351, 0, (nfa_1627389997.t.allZ).length - 1)][chckIndx(nti_1627390363, 0, (nfa_1627389997.t.allZ[chckIndx(n_1627390351, 0, (nfa_1627389997.t.allZ).length - 1)]).length - 1)] == -1)) {
                        add_1426064214(smB_1627389993, smB_1627389993_Idx, {Field0: nt_1627390364, Field1: capt_1627390352, Field2: HEX2EHEX2E_973079379(bounds_1627390353.a, subInt(i_1627390004, 1))});
                        break Label25;
                        }
                        
                        matched_1627390007 = true;
                        captx_1627390006[0] = capt_1627390352;
                        Label26: do {
                          var z_1627390377 = null;
                          var colontmp__1778387512 = [];
                          colontmp__1778387512 = nfa_1627389997.t.z[chckIndx(nfa_1627389997.t.allZ[chckIndx(n_1627390351, 0, (nfa_1627389997.t.allZ).length - 1)][chckIndx(nti_1627390363, 0, (nfa_1627389997.t.allZ[chckIndx(n_1627390351, 0, (nfa_1627389997.t.allZ).length - 1)]).length - 1)], 0, (nfa_1627389997.t.z).length - 1)];
                          var i_1778387513 = 0;
                          var L_1778387514 = (colontmp__1778387512).length;
                          Label27: do {
                              Label28: while (true) {
                              if (!(i_1778387513 < L_1778387514)) break Label28;
                                z_1627390377 = colontmp__1778387512[chckIndx(i_1778387513, 0, (colontmp__1778387512).length - 1)];
                                if (!(matched_1627390007)) {
                                break Label26;
                                }
                                
                                switch (z_1627390377.kind) {
                                case 3:
                                case 4:
                                  capts_1627389994[capts_1627389994_Idx].push({parent: captx_1627390006[0], bound: i_1627390004, idx: z_1627390377.idx});;
                                  captx_1627390006[0] = ((subInt((capts_1627389994[capts_1627389994_Idx]).length, 1)) | 0);
                                  break;
                                case 10:
                                case 11:
                                case 12:
                                case 13:
                                case 14:
                                case 15:
                                case 16:
                                case 17:
                                case 28:
                                case 29:
                                  matched_1627390007 = match_1459617841(z_1627390377, cPrev_1627390003, c_1627390002);
                                  break;
                                case 40:
                                case 41:
                                case 42:
                                case 43:
                                  if (z_1627390377.subExp.reverseCapts) {
                                  Temporary29 = ConstSet60;
                                  }
                                  else {
                                  Temporary29 = ConstSet61;
                                  }
                                  
                                  var flags2_1627390393 = nimCopy(null, Temporary29, NTI1627390630);
                                  grow_1426064303(look_1627389998.smL);
                                  setLen_1426064272(look_1627389998.smL.s[chckIndx(subInt(look_1627389998.smL.i, 1), 0, (look_1627389998.smL.s).length - 1)], (z_1627390377.subExp.nfa.s).length);
                                  switch (z_1627390377.kind) {
                                  case 40:
                                    Temporary30 = look_1627389998.ahead(look_1627389998.smL.s[chckIndx(subInt(look_1627389998.smL.i, 1), 0, (look_1627389998.smL.s).length - 1)], "a", look_1627389998.smL.s[chckIndx(subInt(look_1627389998.smL.i, 1), 0, (look_1627389998.smL.s).length - 1)], "b", capts_1627389994, capts_1627389994_Idx, captx_1627390006, 0, text_1627389996, z_1627390377.subExp.nfa, look_1627389998, i_1627390004, flags2_1627390393);
                                    break;
                                  case 42:
                                    Temporary30 = !(look_1627389998.ahead(look_1627389998.smL.s[chckIndx(subInt(look_1627389998.smL.i, 1), 0, (look_1627389998.smL.s).length - 1)], "a", look_1627389998.smL.s[chckIndx(subInt(look_1627389998.smL.i, 1), 0, (look_1627389998.smL.s).length - 1)], "b", capts_1627389994, capts_1627389994_Idx, captx_1627390006, 0, text_1627389996, z_1627390377.subExp.nfa, look_1627389998, i_1627390004, flags2_1627390393));
                                    break;
                                  case 41:
                                    Temporary30 = !((look_1627389998.behind(look_1627389998.smL.s[chckIndx(subInt(look_1627389998.smL.i, 1), 0, (look_1627389998.smL.s).length - 1)], "a", look_1627389998.smL.s[chckIndx(subInt(look_1627389998.smL.i, 1), 0, (look_1627389998.smL.s).length - 1)], "b", capts_1627389994, capts_1627389994_Idx, captx_1627390006, 0, text_1627389996, z_1627390377.subExp.nfa, look_1627389998, i_1627390004, 0, flags2_1627390393) == -1));
                                    break;
                                  case 43:
                                    Temporary30 = (look_1627389998.behind(look_1627389998.smL.s[chckIndx(subInt(look_1627389998.smL.i, 1), 0, (look_1627389998.smL.s).length - 1)], "a", look_1627389998.smL.s[chckIndx(subInt(look_1627389998.smL.i, 1), 0, (look_1627389998.smL.s).length - 1)], "b", capts_1627389994, capts_1627389994_Idx, captx_1627390006, 0, text_1627389996, z_1627390377.subExp.nfa, look_1627389998, i_1627390004, 0, flags2_1627390393) == -1);
                                    break;
                                  default: 
                                    if (true) {
                                    failedAssertImpl_218103864(makeNimstrLit("nfamatch.nim(71, 14) `false` "));
                                    }
                                    
                                    Temporary30 = false;
                                    break;
                                  }
                                  matched_1627390007 = Temporary30;
                                  removeLast_1426064328(look_1627389998.smL);
                                  break;
                                default: 
                                  if (true) {
                                  failedAssertImpl_218103864(makeNimstrLit("nfamatch.nim(113, 20) `false` "));
                                  }
                                  
                                  break;
                                }
                                i_1778387513 = addInt(i_1778387513, 1);
                                if (!(((colontmp__1778387512).length == L_1778387514))) {
                                failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                                }
                                
                              }
                          } while (false);
                        } while (false);
                        if (matched_1627390007) {
                        add_1426064214(smB_1627389993, smB_1627389993_Idx, {Field0: nt_1627390364, Field1: captx_1627390006[0], Field2: HEX2EHEX2E_973079379(bounds_1627390353.a, subInt(i_1627390004, 1))});
                        }
                        
                      } while (false);
                      i_1778387517 = addInt(i_1778387517, 1);
                      if (!(((colontmp__1778387516).length == L_1778387518))) {
                      failedAssertImpl_218103864(makeNimstrLit("iterators.nim(173, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                      }
                      
                    }
                } while (false);
              } while (false);
              res_1778387523 = addInt(res_1778387523, 1);
            }
        } while (false);
      } while (false);
    } while (false);
    var Temporary31 = smA_1627389992[smA_1627389992_Idx]; smA_1627389992[smA_1627389992_Idx] = smB_1627389993[smB_1627389993_Idx]; smB_1627389993[smB_1627389993_Idx] = Temporary31;    if ((0 < len_1426064241(smA_1627389992[smA_1627389992_Idx]))) {
    if ((flags_1627390000[6] != undefined)) {
    captIdx_1627389995[captIdx_1627389995_Idx] = reverse_1426063537(capts_1627389994, capts_1627389994_Idx, HEX5BHEX5D_1426064203(smA_1627389992[smA_1627389992_Idx], 0).Field1, captIdx_1627389995[captIdx_1627389995_Idx]);
    }
    else {
      captIdx_1627389995[captIdx_1627389995_Idx] = HEX5BHEX5D_1426064203(smA_1627389992[smA_1627389992_Idx], 0).Field1;
    }
    
    }
    
    result_1627390001 = (0 < len_1426064241(smA_1627389992[smA_1627389992_Idx]));
    break BeforeRet;
  } while (false);

  return result_1627390001;

}

function runeAt_973078623(s_973078624, i_973078625) {
  var result_973078626 = 0;

    if ((s_973078624[chckIndx(i_973078625, 0, (s_973078624).length - 1)] <= 127)) {
    result_973078626 = chckRange(s_973078624[chckIndx(i_973078625, 0, (s_973078624).length - 1)], -2147483648, 2147483647);
    }
    else {
    if (((s_973078624[chckIndx(i_973078625, 0, (s_973078624).length - 1)] >>> 5) == 6)) {
    if ((i_973078625 <= subInt((s_973078624).length, 2))) {
    result_973078626 = chckRange((((s_973078624[chckIndx(i_973078625, 0, (s_973078624).length - 1)] & 31) << 6) | (s_973078624[chckIndx(addInt(i_973078625, 1), 0, (s_973078624).length - 1)] & 63)), -2147483648, 2147483647);
    }
    else {
      result_973078626 = 65533;
    }
    
    }
    else {
    if (((s_973078624[chckIndx(i_973078625, 0, (s_973078624).length - 1)] >>> 4) == 14)) {
    if ((i_973078625 <= subInt((s_973078624).length, 3))) {
    result_973078626 = chckRange(((((s_973078624[chckIndx(i_973078625, 0, (s_973078624).length - 1)] & 15) << 12) | ((s_973078624[chckIndx(addInt(i_973078625, 1), 0, (s_973078624).length - 1)] & 63) << 6)) | (s_973078624[chckIndx(addInt(i_973078625, 2), 0, (s_973078624).length - 1)] & 63)), -2147483648, 2147483647);
    }
    else {
      result_973078626 = 65533;
    }
    
    }
    else {
    if (((s_973078624[chckIndx(i_973078625, 0, (s_973078624).length - 1)] >>> 3) == 30)) {
    if ((i_973078625 <= subInt((s_973078624).length, 4))) {
    result_973078626 = chckRange((((((s_973078624[chckIndx(i_973078625, 0, (s_973078624).length - 1)] & 7) << 18) | ((s_973078624[chckIndx(addInt(i_973078625, 1), 0, (s_973078624).length - 1)] & 63) << 12)) | ((s_973078624[chckIndx(addInt(i_973078625, 2), 0, (s_973078624).length - 1)] & 63) << 6)) | (s_973078624[chckIndx(addInt(i_973078625, 3), 0, (s_973078624).length - 1)] & 63)), -2147483648, 2147483647);
    }
    else {
      result_973078626 = 65533;
    }
    
    }
    else {
    if (((s_973078624[chckIndx(i_973078625, 0, (s_973078624).length - 1)] >>> 2) == 62)) {
    if ((i_973078625 <= subInt((s_973078624).length, 5))) {
    result_973078626 = chckRange(((((((s_973078624[chckIndx(i_973078625, 0, (s_973078624).length - 1)] & 3) << 24) | ((s_973078624[chckIndx(addInt(i_973078625, 1), 0, (s_973078624).length - 1)] & 63) << 18)) | ((s_973078624[chckIndx(addInt(i_973078625, 2), 0, (s_973078624).length - 1)] & 63) << 12)) | ((s_973078624[chckIndx(addInt(i_973078625, 3), 0, (s_973078624).length - 1)] & 63) << 6)) | (s_973078624[chckIndx(addInt(i_973078625, 4), 0, (s_973078624).length - 1)] & 63)), -2147483648, 2147483647);
    }
    else {
      result_973078626 = 65533;
    }
    
    }
    else {
    if (((s_973078624[chckIndx(i_973078625, 0, (s_973078624).length - 1)] >>> 1) == 126)) {
    if ((i_973078625 <= subInt((s_973078624).length, 6))) {
    result_973078626 = chckRange((((((((s_973078624[chckIndx(i_973078625, 0, (s_973078624).length - 1)] & 1) << 30) | ((s_973078624[chckIndx(addInt(i_973078625, 1), 0, (s_973078624).length - 1)] & 63) << 24)) | ((s_973078624[chckIndx(addInt(i_973078625, 2), 0, (s_973078624).length - 1)] & 63) << 18)) | ((s_973078624[chckIndx(addInt(i_973078625, 3), 0, (s_973078624).length - 1)] & 63) << 12)) | ((s_973078624[chckIndx(addInt(i_973078625, 4), 0, (s_973078624).length - 1)] & 63) << 6)) | (s_973078624[chckIndx(addInt(i_973078625, 5), 0, (s_973078624).length - 1)] & 63)), -2147483648, 2147483647);
    }
    else {
      result_973078626 = 65533;
    }
    
    }
    else {
      result_973078626 = chckRange(s_973078624[chckIndx(i_973078625, 0, (s_973078624).length - 1)], -2147483648, 2147483647);
    }
    }}}}}

  return result_973078626;

}

function reversedMatchImpl_1627390438(smA_1627390439, smA_1627390439_Idx, smB_1627390440, smB_1627390440_Idx, capts_1627390441, capts_1627390441_Idx, captIdx_1627390442, captIdx_1627390442_Idx, text_1627390443, nfa_1627390444, look_1627390445, start_1627390446, limit_1627390447, flags_1627390448) {
                var Temporary5;
                                        var Temporary17;
                                        var Temporary18;
          var Temporary22;
                                  var Temporary34;
                                  var Temporary35;

  var result_1627390449 = 0;

  BeforeRet: do {
    if (!((limit_1627390447 <= start_1627390446))) {
    failedAssertImpl_218103864(makeNimstrLit("nfamatch.nim(171, 12) `start >= limit` "));
    }
    
    var c_1627390455 = -1;
    var cPrev_1627390456 = -1;
    var i_1627390457 = start_1627390446;
    var iNext_1627390458 = start_1627390446;
    var captx_1627390459 = [0];
    var matched_1627390460 = false;
    var anchored_1627390461 = true;
    if (contains_1308624332(HEX2EHEX2E_973079379(0, subInt((text_1627390443).length, 1)), start_1627390446)) {
    cPrev_1627390456 = runeAt_973078623(text_1627390443, chckRange(start_1627390446, 0, 2147483647));
    }
    
    clear_1426064244(smA_1627390439, smA_1627390439_Idx);
    add_1426064214(smA_1627390439, smA_1627390439_Idx, {Field0: 0, Field1: captIdx_1627390442[captIdx_1627390442_Idx], Field2: HEX2EHEX2E_973079379(i_1627390457, subInt(i_1627390457, 1))});
    Label1: do {
        Label2: while (true) {
        if (!(limit_1627390447 < iNext_1627390458)) break Label2;
          if (!((0 < iNext_1627390458))) {
          failedAssertImpl_218103864(makeNimstrLit("common.nim(51, 12) `iNext > 0` "));
          }
          
          if (!((iNext_1627390458 <= (text_1627390443).length))) {
          failedAssertImpl_218103864(makeNimstrLit("common.nim(52, 12) `iNext <= text.len` "));
          }
          
          iNext_1627390458 = subInt(iNext_1627390458, 1);
          Label3: do {
              Label4: while (true) {
                if (!(0 < iNext_1627390458)) Temporary5 = false; else {                  Temporary5 = ((text_1627390443[chckIndx(iNext_1627390458, 0, (text_1627390443).length - 1)] >> 6) == 2);                }              if (!Temporary5) break Label4;
                iNext_1627390458 = subInt(iNext_1627390458, 1);
              }
          } while (false);
          if ((text_1627390443[chckIndx(iNext_1627390458, 0, (text_1627390443).length - 1)] <= 127)) {
          c_1627390455 = chckRange(text_1627390443[chckIndx(iNext_1627390458, 0, (text_1627390443).length - 1)], -2147483648, 2147483647);
          }
          else {
          if (((text_1627390443[chckIndx(iNext_1627390458, 0, (text_1627390443).length - 1)] >>> 5) == 6)) {
          if ((iNext_1627390458 <= subInt((text_1627390443).length, 2))) {
          c_1627390455 = chckRange((((text_1627390443[chckIndx(iNext_1627390458, 0, (text_1627390443).length - 1)] & 31) << 6) | (text_1627390443[chckIndx(addInt(iNext_1627390458, 1), 0, (text_1627390443).length - 1)] & 63)), -2147483648, 2147483647);
          }
          else {
            c_1627390455 = 65533;
          }
          
          }
          else {
          if (((text_1627390443[chckIndx(iNext_1627390458, 0, (text_1627390443).length - 1)] >>> 4) == 14)) {
          if ((iNext_1627390458 <= subInt((text_1627390443).length, 3))) {
          c_1627390455 = chckRange(((((text_1627390443[chckIndx(iNext_1627390458, 0, (text_1627390443).length - 1)] & 15) << 12) | ((text_1627390443[chckIndx(addInt(iNext_1627390458, 1), 0, (text_1627390443).length - 1)] & 63) << 6)) | (text_1627390443[chckIndx(addInt(iNext_1627390458, 2), 0, (text_1627390443).length - 1)] & 63)), -2147483648, 2147483647);
          }
          else {
            c_1627390455 = 65533;
          }
          
          }
          else {
          if (((text_1627390443[chckIndx(iNext_1627390458, 0, (text_1627390443).length - 1)] >>> 3) == 30)) {
          if ((iNext_1627390458 <= subInt((text_1627390443).length, 4))) {
          c_1627390455 = chckRange((((((text_1627390443[chckIndx(iNext_1627390458, 0, (text_1627390443).length - 1)] & 7) << 18) | ((text_1627390443[chckIndx(addInt(iNext_1627390458, 1), 0, (text_1627390443).length - 1)] & 63) << 12)) | ((text_1627390443[chckIndx(addInt(iNext_1627390458, 2), 0, (text_1627390443).length - 1)] & 63) << 6)) | (text_1627390443[chckIndx(addInt(iNext_1627390458, 3), 0, (text_1627390443).length - 1)] & 63)), -2147483648, 2147483647);
          }
          else {
            c_1627390455 = 65533;
          }
          
          }
          else {
          if (((text_1627390443[chckIndx(iNext_1627390458, 0, (text_1627390443).length - 1)] >>> 2) == 62)) {
          if ((iNext_1627390458 <= subInt((text_1627390443).length, 5))) {
          c_1627390455 = chckRange(((((((text_1627390443[chckIndx(iNext_1627390458, 0, (text_1627390443).length - 1)] & 3) << 24) | ((text_1627390443[chckIndx(addInt(iNext_1627390458, 1), 0, (text_1627390443).length - 1)] & 63) << 18)) | ((text_1627390443[chckIndx(addInt(iNext_1627390458, 2), 0, (text_1627390443).length - 1)] & 63) << 12)) | ((text_1627390443[chckIndx(addInt(iNext_1627390458, 3), 0, (text_1627390443).length - 1)] & 63) << 6)) | (text_1627390443[chckIndx(addInt(iNext_1627390458, 4), 0, (text_1627390443).length - 1)] & 63)), -2147483648, 2147483647);
          }
          else {
            c_1627390455 = 65533;
          }
          
          }
          else {
          if (((text_1627390443[chckIndx(iNext_1627390458, 0, (text_1627390443).length - 1)] >>> 1) == 126)) {
          if ((iNext_1627390458 <= subInt((text_1627390443).length, 6))) {
          c_1627390455 = chckRange((((((((text_1627390443[chckIndx(iNext_1627390458, 0, (text_1627390443).length - 1)] & 1) << 30) | ((text_1627390443[chckIndx(addInt(iNext_1627390458, 1), 0, (text_1627390443).length - 1)] & 63) << 24)) | ((text_1627390443[chckIndx(addInt(iNext_1627390458, 2), 0, (text_1627390443).length - 1)] & 63) << 18)) | ((text_1627390443[chckIndx(addInt(iNext_1627390458, 3), 0, (text_1627390443).length - 1)] & 63) << 12)) | ((text_1627390443[chckIndx(addInt(iNext_1627390458, 4), 0, (text_1627390443).length - 1)] & 63) << 6)) | (text_1627390443[chckIndx(addInt(iNext_1627390458, 5), 0, (text_1627390443).length - 1)] & 63)), -2147483648, 2147483647);
          }
          else {
            c_1627390455 = 65533;
          }
          
          }
          else {
            c_1627390455 = chckRange(text_1627390443[chckIndx(iNext_1627390458, 0, (text_1627390443).length - 1)], -2147483648, 2147483647);
          }
          }}}}}
          clear_1426064244(smB_1627390440, smB_1627390440_Idx);
          Label6: do {
            var n_1627390706 = 0;
            var capt_1627390707 = 0;
            var bounds_1627390708 = ({a: 0, b: 0});
            Label7: do {
              var i_1778387549 = 0;
              var colontmp__1778387550 = 0;
              colontmp__1778387550 = subInt(len_1426064241(smA_1627390439[smA_1627390439_Idx]), 1);
              var res_1778387551 = 0;
              Label8: do {
                  Label9: while (true) {
                  if (!(res_1778387551 <= colontmp__1778387550)) break Label9;
                    i_1778387549 = res_1778387551;
                    var colontmp__1778387554 = nimCopy(null, smA_1627390439[smA_1627390439_Idx].sx[chckIndx(i_1778387549, 0, (smA_1627390439[smA_1627390439_Idx].sx).length - 1)], NTI1426063871);
                    n_1627390706 = colontmp__1778387554["Field0"];
                    capt_1627390707 = colontmp__1778387554["Field1"];
                    bounds_1627390708 = nimCopy(bounds_1627390708, colontmp__1778387554["Field2"], NTI788529213);
                    if ((anchored_1627390461 && (nfa_1627390444.s[chckIndx(n_1627390706, 0, (nfa_1627390444.s).length - 1)].kind == 45))) {
                    if (!(hasState_1426064210(smB_1627390440[smB_1627390440_Idx], n_1627390706))) {
                    add_1426064214(smB_1627390440, smB_1627390440_Idx, {Field0: n_1627390706, Field1: capt_1627390707, Field2: nimCopy(null, bounds_1627390708, NTI788529213)});
                    }
                    
                    break Label6;
                    }
                    
                    Label10: do {
                      var nti_1627390718 = 0;
                      var nt_1627390719 = 0;
                      var colontmp__1778387544 = [];
                      colontmp__1778387544 = nfa_1627390444.s[chckIndx(n_1627390706, 0, (nfa_1627390444.s).length - 1)].next;
                      var i_1778387545 = 0;
                      var L_1778387546 = (colontmp__1778387544).length;
                      Label11: do {
                          Label12: while (true) {
                          if (!(i_1778387545 < L_1778387546)) break Label12;
                            nti_1627390718 = i_1778387545;
                            nt_1627390719 = colontmp__1778387544[chckIndx(i_1778387545, 0, (colontmp__1778387544).length - 1)];
                            Label13: do {
                              if (hasState_1426064210(smB_1627390440[smB_1627390440_Idx], nt_1627390719)) {
                              break Label13;
                              }
                              
                              if (!(match_1459617923(nfa_1627390444.s[chckIndx(nt_1627390719, 0, (nfa_1627390444.s).length - 1)], c_1627390455))) {
                              if (!((anchored_1627390461 && (nfa_1627390444.s[chckIndx(nt_1627390719, 0, (nfa_1627390444.s).length - 1)].kind == 45)))) {
                              break Label13;
                              }
                              
                              }
                              
                              if ((nfa_1627390444.t.allZ[chckIndx(n_1627390706, 0, (nfa_1627390444.t.allZ).length - 1)][chckIndx(nti_1627390718, 0, (nfa_1627390444.t.allZ[chckIndx(n_1627390706, 0, (nfa_1627390444.t.allZ).length - 1)]).length - 1)] == -1)) {
                              add_1426064214(smB_1627390440, smB_1627390440_Idx, {Field0: nt_1627390719, Field1: capt_1627390707, Field2: HEX2EHEX2E_973079379(i_1627390457, bounds_1627390708.b)});
                              break Label13;
                              }
                              
                              matched_1627390460 = true;
                              captx_1627390459[0] = capt_1627390707;
                              Label14: do {
                                var z_1627390732 = null;
                                var colontmp__1778387540 = [];
                                colontmp__1778387540 = nfa_1627390444.t.z[chckIndx(nfa_1627390444.t.allZ[chckIndx(n_1627390706, 0, (nfa_1627390444.t.allZ).length - 1)][chckIndx(nti_1627390718, 0, (nfa_1627390444.t.allZ[chckIndx(n_1627390706, 0, (nfa_1627390444.t.allZ).length - 1)]).length - 1)], 0, (nfa_1627390444.t.z).length - 1)];
                                var i_1778387541 = 0;
                                var L_1778387542 = (colontmp__1778387540).length;
                                Label15: do {
                                    Label16: while (true) {
                                    if (!(i_1778387541 < L_1778387542)) break Label16;
                                      z_1627390732 = colontmp__1778387540[chckIndx(i_1778387541, 0, (colontmp__1778387540).length - 1)];
                                      if (!(matched_1627390460)) {
                                      break Label14;
                                      }
                                      
                                      switch (z_1627390732.kind) {
                                      case 3:
                                      case 4:
                                        capts_1627390441[capts_1627390441_Idx].push({parent: captx_1627390459[0], bound: i_1627390457, idx: z_1627390732.idx});;
                                        captx_1627390459[0] = ((subInt((capts_1627390441[capts_1627390441_Idx]).length, 1)) | 0);
                                        break;
                                      case 10:
                                      case 11:
                                      case 12:
                                      case 13:
                                      case 14:
                                      case 15:
                                      case 16:
                                      case 17:
                                      case 28:
                                      case 29:
                                        matched_1627390460 = match_1459617841(z_1627390732, c_1627390455, cPrev_1627390456);
                                        break;
                                      case 40:
                                      case 41:
                                      case 42:
                                      case 43:
                                        if (z_1627390732.subExp.reverseCapts) {
                                        Temporary17 = ConstSet62;
                                        }
                                        else {
                                        Temporary17 = ConstSet63;
                                        }
                                        
                                        var flags2_1627390748 = nimCopy(null, Temporary17, NTI1627391233);
                                        grow_1426064303(look_1627390445.smL);
                                        setLen_1426064272(look_1627390445.smL.s[chckIndx(subInt(look_1627390445.smL.i, 1), 0, (look_1627390445.smL.s).length - 1)], (z_1627390732.subExp.nfa.s).length);
                                        switch (z_1627390732.kind) {
                                        case 40:
                                          Temporary18 = look_1627390445.ahead(look_1627390445.smL.s[chckIndx(subInt(look_1627390445.smL.i, 1), 0, (look_1627390445.smL.s).length - 1)], "a", look_1627390445.smL.s[chckIndx(subInt(look_1627390445.smL.i, 1), 0, (look_1627390445.smL.s).length - 1)], "b", capts_1627390441, capts_1627390441_Idx, captx_1627390459, 0, text_1627390443, z_1627390732.subExp.nfa, look_1627390445, i_1627390457, flags2_1627390748);
                                          break;
                                        case 42:
                                          Temporary18 = !(look_1627390445.ahead(look_1627390445.smL.s[chckIndx(subInt(look_1627390445.smL.i, 1), 0, (look_1627390445.smL.s).length - 1)], "a", look_1627390445.smL.s[chckIndx(subInt(look_1627390445.smL.i, 1), 0, (look_1627390445.smL.s).length - 1)], "b", capts_1627390441, capts_1627390441_Idx, captx_1627390459, 0, text_1627390443, z_1627390732.subExp.nfa, look_1627390445, i_1627390457, flags2_1627390748));
                                          break;
                                        case 41:
                                          Temporary18 = !((look_1627390445.behind(look_1627390445.smL.s[chckIndx(subInt(look_1627390445.smL.i, 1), 0, (look_1627390445.smL.s).length - 1)], "a", look_1627390445.smL.s[chckIndx(subInt(look_1627390445.smL.i, 1), 0, (look_1627390445.smL.s).length - 1)], "b", capts_1627390441, capts_1627390441_Idx, captx_1627390459, 0, text_1627390443, z_1627390732.subExp.nfa, look_1627390445, i_1627390457, 0, flags2_1627390748) == -1));
                                          break;
                                        case 43:
                                          Temporary18 = (look_1627390445.behind(look_1627390445.smL.s[chckIndx(subInt(look_1627390445.smL.i, 1), 0, (look_1627390445.smL.s).length - 1)], "a", look_1627390445.smL.s[chckIndx(subInt(look_1627390445.smL.i, 1), 0, (look_1627390445.smL.s).length - 1)], "b", capts_1627390441, capts_1627390441_Idx, captx_1627390459, 0, text_1627390443, z_1627390732.subExp.nfa, look_1627390445, i_1627390457, 0, flags2_1627390748) == -1);
                                          break;
                                        default: 
                                          if (true) {
                                          failedAssertImpl_218103864(makeNimstrLit("nfamatch.nim(71, 14) `false` "));
                                          }
                                          
                                          Temporary18 = false;
                                          break;
                                        }
                                        matched_1627390460 = Temporary18;
                                        removeLast_1426064328(look_1627390445.smL);
                                        break;
                                      default: 
                                        if (true) {
                                        failedAssertImpl_218103864(makeNimstrLit("nfamatch.nim(113, 20) `false` "));
                                        }
                                        
                                        break;
                                      }
                                      i_1778387541 = addInt(i_1778387541, 1);
                                      if (!(((colontmp__1778387540).length == L_1778387542))) {
                                      failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                                      }
                                      
                                    }
                                } while (false);
                              } while (false);
                              if (matched_1627390460) {
                              add_1426064214(smB_1627390440, smB_1627390440_Idx, {Field0: nt_1627390719, Field1: captx_1627390459[0], Field2: HEX2EHEX2E_973079379(i_1627390457, bounds_1627390708.b)});
                              }
                              
                            } while (false);
                            i_1778387545 = addInt(i_1778387545, 1);
                            if (!(((colontmp__1778387544).length == L_1778387546))) {
                            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(173, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                            }
                            
                          }
                      } while (false);
                    } while (false);
                    res_1778387551 = addInt(res_1778387551, 1);
                  }
              } while (false);
            } while (false);
          } while (false);
          var Temporary19 = smA_1627390439[smA_1627390439_Idx]; smA_1627390439[smA_1627390439_Idx] = smB_1627390440[smB_1627390440_Idx]; smB_1627390440[smB_1627390440_Idx] = Temporary19;          if ((len_1426064241(smA_1627390439[smA_1627390439_Idx]) == 0)) {
          result_1627390449 = -1;
          break BeforeRet;
          }
          
          if ((nfa_1627390444.s[chckIndx(HEX5BHEX5D_1426064203(smA_1627390439[smA_1627390439_Idx], 0).Field0, 0, (nfa_1627390444.s).length - 1)].kind == 45)) {
          break Label1;
          }
          
          i_1627390457 = iNext_1627390458;
          cPrev_1627390456 = c_1627390455;
        }
    } while (false);
    c_1627390455 = -1;
    if ((0 < iNext_1627390458)) {
    if (!((0 < iNext_1627390458))) {
    failedAssertImpl_218103864(makeNimstrLit("common.nim(51, 12) `iNext > 0` "));
    }
    
    if (!((iNext_1627390458 <= (text_1627390443).length))) {
    failedAssertImpl_218103864(makeNimstrLit("common.nim(52, 12) `iNext <= text.len` "));
    }
    
    iNext_1627390458 = subInt(iNext_1627390458, 1);
    Label20: do {
        Label21: while (true) {
          if (!(0 < iNext_1627390458)) Temporary22 = false; else {            Temporary22 = ((text_1627390443[chckIndx(iNext_1627390458, 0, (text_1627390443).length - 1)] >> 6) == 2);          }        if (!Temporary22) break Label21;
          iNext_1627390458 = subInt(iNext_1627390458, 1);
        }
    } while (false);
    if ((text_1627390443[chckIndx(iNext_1627390458, 0, (text_1627390443).length - 1)] <= 127)) {
    c_1627390455 = chckRange(text_1627390443[chckIndx(iNext_1627390458, 0, (text_1627390443).length - 1)], -2147483648, 2147483647);
    }
    else {
    if (((text_1627390443[chckIndx(iNext_1627390458, 0, (text_1627390443).length - 1)] >>> 5) == 6)) {
    if ((iNext_1627390458 <= subInt((text_1627390443).length, 2))) {
    c_1627390455 = chckRange((((text_1627390443[chckIndx(iNext_1627390458, 0, (text_1627390443).length - 1)] & 31) << 6) | (text_1627390443[chckIndx(addInt(iNext_1627390458, 1), 0, (text_1627390443).length - 1)] & 63)), -2147483648, 2147483647);
    }
    else {
      c_1627390455 = 65533;
    }
    
    }
    else {
    if (((text_1627390443[chckIndx(iNext_1627390458, 0, (text_1627390443).length - 1)] >>> 4) == 14)) {
    if ((iNext_1627390458 <= subInt((text_1627390443).length, 3))) {
    c_1627390455 = chckRange(((((text_1627390443[chckIndx(iNext_1627390458, 0, (text_1627390443).length - 1)] & 15) << 12) | ((text_1627390443[chckIndx(addInt(iNext_1627390458, 1), 0, (text_1627390443).length - 1)] & 63) << 6)) | (text_1627390443[chckIndx(addInt(iNext_1627390458, 2), 0, (text_1627390443).length - 1)] & 63)), -2147483648, 2147483647);
    }
    else {
      c_1627390455 = 65533;
    }
    
    }
    else {
    if (((text_1627390443[chckIndx(iNext_1627390458, 0, (text_1627390443).length - 1)] >>> 3) == 30)) {
    if ((iNext_1627390458 <= subInt((text_1627390443).length, 4))) {
    c_1627390455 = chckRange((((((text_1627390443[chckIndx(iNext_1627390458, 0, (text_1627390443).length - 1)] & 7) << 18) | ((text_1627390443[chckIndx(addInt(iNext_1627390458, 1), 0, (text_1627390443).length - 1)] & 63) << 12)) | ((text_1627390443[chckIndx(addInt(iNext_1627390458, 2), 0, (text_1627390443).length - 1)] & 63) << 6)) | (text_1627390443[chckIndx(addInt(iNext_1627390458, 3), 0, (text_1627390443).length - 1)] & 63)), -2147483648, 2147483647);
    }
    else {
      c_1627390455 = 65533;
    }
    
    }
    else {
    if (((text_1627390443[chckIndx(iNext_1627390458, 0, (text_1627390443).length - 1)] >>> 2) == 62)) {
    if ((iNext_1627390458 <= subInt((text_1627390443).length, 5))) {
    c_1627390455 = chckRange(((((((text_1627390443[chckIndx(iNext_1627390458, 0, (text_1627390443).length - 1)] & 3) << 24) | ((text_1627390443[chckIndx(addInt(iNext_1627390458, 1), 0, (text_1627390443).length - 1)] & 63) << 18)) | ((text_1627390443[chckIndx(addInt(iNext_1627390458, 2), 0, (text_1627390443).length - 1)] & 63) << 12)) | ((text_1627390443[chckIndx(addInt(iNext_1627390458, 3), 0, (text_1627390443).length - 1)] & 63) << 6)) | (text_1627390443[chckIndx(addInt(iNext_1627390458, 4), 0, (text_1627390443).length - 1)] & 63)), -2147483648, 2147483647);
    }
    else {
      c_1627390455 = 65533;
    }
    
    }
    else {
    if (((text_1627390443[chckIndx(iNext_1627390458, 0, (text_1627390443).length - 1)] >>> 1) == 126)) {
    if ((iNext_1627390458 <= subInt((text_1627390443).length, 6))) {
    c_1627390455 = chckRange((((((((text_1627390443[chckIndx(iNext_1627390458, 0, (text_1627390443).length - 1)] & 1) << 30) | ((text_1627390443[chckIndx(addInt(iNext_1627390458, 1), 0, (text_1627390443).length - 1)] & 63) << 24)) | ((text_1627390443[chckIndx(addInt(iNext_1627390458, 2), 0, (text_1627390443).length - 1)] & 63) << 18)) | ((text_1627390443[chckIndx(addInt(iNext_1627390458, 3), 0, (text_1627390443).length - 1)] & 63) << 12)) | ((text_1627390443[chckIndx(addInt(iNext_1627390458, 4), 0, (text_1627390443).length - 1)] & 63) << 6)) | (text_1627390443[chckIndx(addInt(iNext_1627390458, 5), 0, (text_1627390443).length - 1)] & 63)), -2147483648, 2147483647);
    }
    else {
      c_1627390455 = 65533;
    }
    
    }
    else {
      c_1627390455 = chckRange(text_1627390443[chckIndx(iNext_1627390458, 0, (text_1627390443).length - 1)], -2147483648, 2147483647);
    }
    }}}}}
    }
    
    clear_1426064244(smB_1627390440, smB_1627390440_Idx);
    Label23: do {
      var n_1627390961 = 0;
      var capt_1627390962 = 0;
      var bounds_1627390963 = ({a: 0, b: 0});
      Label24: do {
        var i_1778387569 = 0;
        var colontmp__1778387570 = 0;
        colontmp__1778387570 = subInt(len_1426064241(smA_1627390439[smA_1627390439_Idx]), 1);
        var res_1778387571 = 0;
        Label25: do {
            Label26: while (true) {
            if (!(res_1778387571 <= colontmp__1778387570)) break Label26;
              i_1778387569 = res_1778387571;
              var colontmp__1778387574 = nimCopy(null, smA_1627390439[smA_1627390439_Idx].sx[chckIndx(i_1778387569, 0, (smA_1627390439[smA_1627390439_Idx].sx).length - 1)], NTI1426063871);
              n_1627390961 = colontmp__1778387574["Field0"];
              capt_1627390962 = colontmp__1778387574["Field1"];
              bounds_1627390963 = nimCopy(bounds_1627390963, colontmp__1778387574["Field2"], NTI788529213);
              if ((anchored_1627390461 && (nfa_1627390444.s[chckIndx(n_1627390961, 0, (nfa_1627390444.s).length - 1)].kind == 45))) {
              if (!(hasState_1426064210(smB_1627390440[smB_1627390440_Idx], n_1627390961))) {
              add_1426064214(smB_1627390440, smB_1627390440_Idx, {Field0: n_1627390961, Field1: capt_1627390962, Field2: nimCopy(null, bounds_1627390963, NTI788529213)});
              }
              
              break Label23;
              }
              
              Label27: do {
                var nti_1627390973 = 0;
                var nt_1627390974 = 0;
                var colontmp__1778387564 = [];
                colontmp__1778387564 = nfa_1627390444.s[chckIndx(n_1627390961, 0, (nfa_1627390444.s).length - 1)].next;
                var i_1778387565 = 0;
                var L_1778387566 = (colontmp__1778387564).length;
                Label28: do {
                    Label29: while (true) {
                    if (!(i_1778387565 < L_1778387566)) break Label29;
                      nti_1627390973 = i_1778387565;
                      nt_1627390974 = colontmp__1778387564[chckIndx(i_1778387565, 0, (colontmp__1778387564).length - 1)];
                      Label30: do {
                        if (hasState_1426064210(smB_1627390440[smB_1627390440_Idx], nt_1627390974)) {
                        break Label30;
                        }
                        
                        if (!(match_1459617923(nfa_1627390444.s[chckIndx(nt_1627390974, 0, (nfa_1627390444.s).length - 1)], c_1627390455))) {
                        if (!((anchored_1627390461 && (nfa_1627390444.s[chckIndx(nt_1627390974, 0, (nfa_1627390444.s).length - 1)].kind == 45)))) {
                        break Label30;
                        }
                        
                        }
                        
                        if ((nfa_1627390444.t.allZ[chckIndx(n_1627390961, 0, (nfa_1627390444.t.allZ).length - 1)][chckIndx(nti_1627390973, 0, (nfa_1627390444.t.allZ[chckIndx(n_1627390961, 0, (nfa_1627390444.t.allZ).length - 1)]).length - 1)] == -1)) {
                        add_1426064214(smB_1627390440, smB_1627390440_Idx, {Field0: nt_1627390974, Field1: capt_1627390962, Field2: HEX2EHEX2E_973079379(i_1627390457, bounds_1627390963.b)});
                        break Label30;
                        }
                        
                        matched_1627390460 = true;
                        captx_1627390459[0] = capt_1627390962;
                        Label31: do {
                          var z_1627390987 = null;
                          var colontmp__1778387560 = [];
                          colontmp__1778387560 = nfa_1627390444.t.z[chckIndx(nfa_1627390444.t.allZ[chckIndx(n_1627390961, 0, (nfa_1627390444.t.allZ).length - 1)][chckIndx(nti_1627390973, 0, (nfa_1627390444.t.allZ[chckIndx(n_1627390961, 0, (nfa_1627390444.t.allZ).length - 1)]).length - 1)], 0, (nfa_1627390444.t.z).length - 1)];
                          var i_1778387561 = 0;
                          var L_1778387562 = (colontmp__1778387560).length;
                          Label32: do {
                              Label33: while (true) {
                              if (!(i_1778387561 < L_1778387562)) break Label33;
                                z_1627390987 = colontmp__1778387560[chckIndx(i_1778387561, 0, (colontmp__1778387560).length - 1)];
                                if (!(matched_1627390460)) {
                                break Label31;
                                }
                                
                                switch (z_1627390987.kind) {
                                case 3:
                                case 4:
                                  capts_1627390441[capts_1627390441_Idx].push({parent: captx_1627390459[0], bound: i_1627390457, idx: z_1627390987.idx});;
                                  captx_1627390459[0] = ((subInt((capts_1627390441[capts_1627390441_Idx]).length, 1)) | 0);
                                  break;
                                case 10:
                                case 11:
                                case 12:
                                case 13:
                                case 14:
                                case 15:
                                case 16:
                                case 17:
                                case 28:
                                case 29:
                                  matched_1627390460 = match_1459617841(z_1627390987, c_1627390455, cPrev_1627390456);
                                  break;
                                case 40:
                                case 41:
                                case 42:
                                case 43:
                                  if (z_1627390987.subExp.reverseCapts) {
                                  Temporary34 = ConstSet64;
                                  }
                                  else {
                                  Temporary34 = ConstSet65;
                                  }
                                  
                                  var flags2_1627391003 = nimCopy(null, Temporary34, NTI1627391782);
                                  grow_1426064303(look_1627390445.smL);
                                  setLen_1426064272(look_1627390445.smL.s[chckIndx(subInt(look_1627390445.smL.i, 1), 0, (look_1627390445.smL.s).length - 1)], (z_1627390987.subExp.nfa.s).length);
                                  switch (z_1627390987.kind) {
                                  case 40:
                                    Temporary35 = look_1627390445.ahead(look_1627390445.smL.s[chckIndx(subInt(look_1627390445.smL.i, 1), 0, (look_1627390445.smL.s).length - 1)], "a", look_1627390445.smL.s[chckIndx(subInt(look_1627390445.smL.i, 1), 0, (look_1627390445.smL.s).length - 1)], "b", capts_1627390441, capts_1627390441_Idx, captx_1627390459, 0, text_1627390443, z_1627390987.subExp.nfa, look_1627390445, i_1627390457, flags2_1627391003);
                                    break;
                                  case 42:
                                    Temporary35 = !(look_1627390445.ahead(look_1627390445.smL.s[chckIndx(subInt(look_1627390445.smL.i, 1), 0, (look_1627390445.smL.s).length - 1)], "a", look_1627390445.smL.s[chckIndx(subInt(look_1627390445.smL.i, 1), 0, (look_1627390445.smL.s).length - 1)], "b", capts_1627390441, capts_1627390441_Idx, captx_1627390459, 0, text_1627390443, z_1627390987.subExp.nfa, look_1627390445, i_1627390457, flags2_1627391003));
                                    break;
                                  case 41:
                                    Temporary35 = !((look_1627390445.behind(look_1627390445.smL.s[chckIndx(subInt(look_1627390445.smL.i, 1), 0, (look_1627390445.smL.s).length - 1)], "a", look_1627390445.smL.s[chckIndx(subInt(look_1627390445.smL.i, 1), 0, (look_1627390445.smL.s).length - 1)], "b", capts_1627390441, capts_1627390441_Idx, captx_1627390459, 0, text_1627390443, z_1627390987.subExp.nfa, look_1627390445, i_1627390457, 0, flags2_1627391003) == -1));
                                    break;
                                  case 43:
                                    Temporary35 = (look_1627390445.behind(look_1627390445.smL.s[chckIndx(subInt(look_1627390445.smL.i, 1), 0, (look_1627390445.smL.s).length - 1)], "a", look_1627390445.smL.s[chckIndx(subInt(look_1627390445.smL.i, 1), 0, (look_1627390445.smL.s).length - 1)], "b", capts_1627390441, capts_1627390441_Idx, captx_1627390459, 0, text_1627390443, z_1627390987.subExp.nfa, look_1627390445, i_1627390457, 0, flags2_1627391003) == -1);
                                    break;
                                  default: 
                                    if (true) {
                                    failedAssertImpl_218103864(makeNimstrLit("nfamatch.nim(71, 14) `false` "));
                                    }
                                    
                                    Temporary35 = false;
                                    break;
                                  }
                                  matched_1627390460 = Temporary35;
                                  removeLast_1426064328(look_1627390445.smL);
                                  break;
                                default: 
                                  if (true) {
                                  failedAssertImpl_218103864(makeNimstrLit("nfamatch.nim(113, 20) `false` "));
                                  }
                                  
                                  break;
                                }
                                i_1778387561 = addInt(i_1778387561, 1);
                                if (!(((colontmp__1778387560).length == L_1778387562))) {
                                failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                                }
                                
                              }
                          } while (false);
                        } while (false);
                        if (matched_1627390460) {
                        add_1426064214(smB_1627390440, smB_1627390440_Idx, {Field0: nt_1627390974, Field1: captx_1627390459[0], Field2: HEX2EHEX2E_973079379(i_1627390457, bounds_1627390963.b)});
                        }
                        
                      } while (false);
                      i_1778387565 = addInt(i_1778387565, 1);
                      if (!(((colontmp__1778387564).length == L_1778387566))) {
                      failedAssertImpl_218103864(makeNimstrLit("iterators.nim(173, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                      }
                      
                    }
                } while (false);
              } while (false);
              res_1778387571 = addInt(res_1778387571, 1);
            }
        } while (false);
      } while (false);
    } while (false);
    var Temporary36 = smA_1627390439[smA_1627390439_Idx]; smA_1627390439[smA_1627390439_Idx] = smB_1627390440[smB_1627390440_Idx]; smB_1627390440[smB_1627390440_Idx] = Temporary36;    Label37: do {
      var n_1627391026 = 0;
      var capt_1627391027 = 0;
      var bounds_1627391028 = ({a: 0, b: 0});
      Label38: do {
        var i_1778387577 = 0;
        var colontmp__1778387578 = 0;
        colontmp__1778387578 = subInt(len_1426064241(smA_1627390439[smA_1627390439_Idx]), 1);
        var res_1778387579 = 0;
        Label39: do {
            Label40: while (true) {
            if (!(res_1778387579 <= colontmp__1778387578)) break Label40;
              i_1778387577 = res_1778387579;
              var colontmp__1778387582 = nimCopy(null, smA_1627390439[smA_1627390439_Idx].sx[chckIndx(i_1778387577, 0, (smA_1627390439[smA_1627390439_Idx].sx).length - 1)], NTI1426063871);
              n_1627391026 = colontmp__1778387582["Field0"];
              capt_1627391027 = colontmp__1778387582["Field1"];
              bounds_1627391028 = nimCopy(bounds_1627391028, colontmp__1778387582["Field2"], NTI788529213);
              if ((nfa_1627390444.s[chckIndx(n_1627391026, 0, (nfa_1627390444.s).length - 1)].kind == 45)) {
              if ((flags_1627390448[6] != undefined)) {
              captIdx_1627390442[captIdx_1627390442_Idx] = reverse_1426063537(capts_1627390441, capts_1627390441_Idx, capt_1627391027, captIdx_1627390442[captIdx_1627390442_Idx]);
              }
              else {
                captIdx_1627390442[captIdx_1627390442_Idx] = capt_1627391027;
              }
              
              result_1627390449 = bounds_1627391028.a;
              break BeforeRet;
              }
              
              res_1778387579 = addInt(res_1778387579, 1);
            }
        } while (false);
      } while (false);
    } while (false);
    result_1627390449 = -1;
    break BeforeRet;
  } while (false);

  return result_1627390449;

}

function cap_1426064253(sm_1426064254) {
  var result_1426064255 = 0;

    result_1426064255 = (sm_1426064254.ss).length;

  return result_1426064255;

}

function clear_1610612794(ms_1610612795) {
    ms_1610612795.i = 0;

  
}

function clear_1610612805(ms_1610612806) {
    clear_1426064244(ms_1610612806, "a");
    clear_1426064244(ms_1610612806, "b");
    clear_1610612794(ms_1610612806.m);
    if (ms_1610612806.c.length < 0) { for (var i = ms_1610612806.c.length ; i < 0 ; ++i) ms_1610612806.c.push(({parent: 0, bound: 0, idx: 0})); }
               else { ms_1610612806.c.length = 0; };

  
}

function nsuFindChar(s_654312949, sub_654312950, start_654312951, last_654312952) {
    var Temporary1;

  var result_654312953 = 0;

  BeforeRet: do {
    if ((last_654312952 == 0)) {
    Temporary1 = (s_654312949).length - 1;
    }
    else {
    Temporary1 = last_654312952;
    }
    
    var last_654312954 = Temporary1;
    Label2: do {
      var i_654312964 = 0;
      var colontmp__1778387588 = 0;
      colontmp__1778387588 = start_654312951;
      var res_1778387589 = colontmp__1778387588;
      Label3: do {
          Label4: while (true) {
          if (!(res_1778387589 <= last_654312954)) break Label4;
            i_654312964 = res_1778387589;
            if ((sub_654312950 == s_654312949[chckIndx(i_654312964, 0, (s_654312949).length - 1)])) {
            result_654312953 = i_654312964;
            break BeforeRet;
            }
            
            res_1778387589 = addInt(res_1778387589, 1);
          }
      } while (false);
    } while (false);
    result_654312953 = -1;
    break BeforeRet;
  } while (false);

  return result_654312953;

}

function reversedMatchImpl_1627391037(smA_1627391038, smA_1627391038_Idx, smB_1627391039, smB_1627391039_Idx, text_1627391040, nfa_1627391041, look_1627391042, start_1627391043, limit_1627391044) {
  var result_1627391045 = 0;

    var capts_1627391046 = [[]];
    var captIdx_1627391047 = [-1];
    result_1627391045 = reversedMatchImpl_1627390438(smA_1627391038, smA_1627391038_Idx, smB_1627391039, smB_1627391039_Idx, capts_1627391046, 0, captIdx_1627391047, 0, text_1627391040, nfa_1627391041, look_1627391042, start_1627391043, limit_1627391044, ConstSet66);

  return result_1627391045;

}

function len_1610612760(ms_1610612761) {
  var result_1610612762 = 0;

    result_1610612762 = ms_1610612761.i;

  return result_1610612762;

}

function add_1610612763(ms_1610612764, m_1610612765) {
    var size_1610612766 = 0;
    Label1: do {
      var i_1610612772 = 0;
      var colontmp__1778387605 = 0;
      colontmp__1778387605 = subInt(len_1610612760(ms_1610612764), 1);
      var res_1778387607 = colontmp__1778387605;
      Label2: do {
          Label3: while (true) {
          if (!(0 <= res_1778387607)) break Label3;
            i_1610612772 = res_1778387607;
            if ((nimMax(ms_1610612764.s[chckIndx(i_1610612772, 0, (ms_1610612764.s).length - 1)].Field1.b, ms_1610612764.s[chckIndx(i_1610612772, 0, (ms_1610612764.s).length - 1)].Field1.a) < m_1610612765.Field1.a)) {
            size_1610612766 = addInt(i_1610612772, 1);
            break Label1;
            }
            
            res_1778387607 = subInt(res_1778387607, 1);
          }
      } while (false);
    } while (false);
    ms_1610612764.i = size_1610612766;
    if ((ms_1610612764.i <= subInt((ms_1610612764.s).length, 1))) {
    ms_1610612764.s[chckIndx(ms_1610612764.i, 0, (ms_1610612764.s).length - 1)] = nimCopy(ms_1610612764.s[chckIndx(ms_1610612764.i, 0, (ms_1610612764.s).length - 1)], m_1610612765, NTI1610612740);
    }
    else {
      var Temporary4 = nimCopy(null, m_1610612765, NTI1610612740);
    ms_1610612764.s.push(Temporary4);;
    }
    
    ms_1610612764.i = addInt(ms_1610612764.i, 1);

  
}

function submatch_1610612976(ms_1610612977, text_1610612978, regex_1610612979, i_1610612980, cPrev_1610612981, c_1610612982) {
                      var Temporary7;
                      var Temporary8;
                      var Temporary10;
                              var Temporary13;
                              var Temporary14;

    clear_1426064244(ms_1610612977, "b");
    var captx_1610612992 = [0];
    var matched_1610612993 = true;
    var eoeFound_1610612994 = false;
    var smi_1610612995 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(smi_1610612995 < len_1426064241(ms_1610612977.a))) break Label2;
          Label3: do {
            var nti_1610613001 = 0;
            var nt_1610613002 = 0;
            var colontmp__1778387600 = [];
            colontmp__1778387600 = regex_1610612979.nfa.s[chckIndx(HEX5BHEX5D_1426064203(ms_1610612977.a, smi_1610612995).Field0, 0, (regex_1610612979.nfa.s).length - 1)].next;
            var i_1778387601 = 0;
            var L_1778387602 = (colontmp__1778387600).length;
            Label4: do {
                Label5: while (true) {
                if (!(i_1778387601 < L_1778387602)) break Label5;
                  nti_1610613001 = i_1778387601;
                  nt_1610613002 = colontmp__1778387600[chckIndx(i_1778387601, 0, (colontmp__1778387600).length - 1)];
                  Label6: do {
                    if (hasState_1426064210(ms_1610612977.b, nt_1610613002)) {
                    break Label6;
                    }
                    
                      if (!!((regex_1610612979.nfa.s[chckIndx(nt_1610613002, 0, (regex_1610612979.nfa.s).length - 1)].kind == 45))) Temporary7 = false; else {                        Temporary7 = !(match_1459617923(regex_1610612979.nfa.s[chckIndx(nt_1610613002, 0, (regex_1610612979.nfa.s).length - 1)], c_1610612982));                      }                    if (Temporary7) {
                    break Label6;
                    }
                    
                    matched_1610612993 = true;
                    captx_1610612992[0] = HEX5BHEX5D_1426064203(ms_1610612977.a, smi_1610612995).Field1;
                    if ((-1 < (Temporary8 = regex_1610612979.nfa.t.allZ[chckIndx(HEX5BHEX5D_1426064203(ms_1610612977.a, smi_1610612995).Field0, 0, (regex_1610612979.nfa.t.allZ).length - 1)], Temporary8)[chckIndx(nti_1610613001, 0, (Temporary8).length - 1)])) {
                    Label9: do {
                      var z_1610613010 = null;
                      var colontmp__1778387596 = [];
                      colontmp__1778387596 = regex_1610612979.nfa.t.z[chckIndx((Temporary10 = regex_1610612979.nfa.t.allZ[chckIndx(HEX5BHEX5D_1426064203(ms_1610612977.a, smi_1610612995).Field0, 0, (regex_1610612979.nfa.t.allZ).length - 1)], Temporary10)[chckIndx(nti_1610613001, 0, (Temporary10).length - 1)], 0, (regex_1610612979.nfa.t.z).length - 1)];
                      var i_1778387597 = 0;
                      var L_1778387598 = (colontmp__1778387596).length;
                      Label11: do {
                          Label12: while (true) {
                          if (!(i_1778387597 < L_1778387598)) break Label12;
                            z_1610613010 = colontmp__1778387596[chckIndx(i_1778387597, 0, (colontmp__1778387596).length - 1)];
                            if (!(matched_1610612993)) {
                            break Label9;
                            }
                            
                            switch (z_1610613010.kind) {
                            case 3:
                            case 4:
                              ms_1610612977.c.push({parent: captx_1610612992[0], bound: i_1610612980, idx: z_1610613010.idx});;
                              captx_1610612992[0] = ((subInt((ms_1610612977.c).length, 1)) | 0);
                              break;
                            case 10:
                            case 11:
                            case 12:
                            case 13:
                            case 14:
                            case 15:
                            case 16:
                            case 17:
                            case 28:
                            case 29:
                              matched_1610612993 = match_1459617841(z_1610613010, cPrev_1610612981, c_1610612982);
                              break;
                            case 40:
                            case 41:
                            case 42:
                            case 43:
                              if (z_1610613010.subExp.reverseCapts) {
                              Temporary13 = ConstSet67;
                              }
                              else {
                              Temporary13 = ConstSet68;
                              }
                              
                              var flags2_1610613026 = nimCopy(null, Temporary13, NTI1610612922);
                              grow_1426064303(ms_1610612977.look.smL);
                              setLen_1426064272(ms_1610612977.look.smL.s[chckIndx(subInt(ms_1610612977.look.smL.i, 1), 0, (ms_1610612977.look.smL.s).length - 1)], (z_1610613010.subExp.nfa.s).length);
                              switch (z_1610613010.kind) {
                              case 40:
                                Temporary14 = ms_1610612977.look.ahead(ms_1610612977.look.smL.s[chckIndx(subInt(ms_1610612977.look.smL.i, 1), 0, (ms_1610612977.look.smL.s).length - 1)], "a", ms_1610612977.look.smL.s[chckIndx(subInt(ms_1610612977.look.smL.i, 1), 0, (ms_1610612977.look.smL.s).length - 1)], "b", ms_1610612977, "c", captx_1610612992, 0, text_1610612978, z_1610613010.subExp.nfa, ms_1610612977.look, i_1610612980, flags2_1610613026);
                                break;
                              case 42:
                                Temporary14 = !(ms_1610612977.look.ahead(ms_1610612977.look.smL.s[chckIndx(subInt(ms_1610612977.look.smL.i, 1), 0, (ms_1610612977.look.smL.s).length - 1)], "a", ms_1610612977.look.smL.s[chckIndx(subInt(ms_1610612977.look.smL.i, 1), 0, (ms_1610612977.look.smL.s).length - 1)], "b", ms_1610612977, "c", captx_1610612992, 0, text_1610612978, z_1610613010.subExp.nfa, ms_1610612977.look, i_1610612980, flags2_1610613026));
                                break;
                              case 41:
                                Temporary14 = !((ms_1610612977.look.behind(ms_1610612977.look.smL.s[chckIndx(subInt(ms_1610612977.look.smL.i, 1), 0, (ms_1610612977.look.smL.s).length - 1)], "a", ms_1610612977.look.smL.s[chckIndx(subInt(ms_1610612977.look.smL.i, 1), 0, (ms_1610612977.look.smL.s).length - 1)], "b", ms_1610612977, "c", captx_1610612992, 0, text_1610612978, z_1610613010.subExp.nfa, ms_1610612977.look, i_1610612980, 0, flags2_1610613026) == -1));
                                break;
                              case 43:
                                Temporary14 = (ms_1610612977.look.behind(ms_1610612977.look.smL.s[chckIndx(subInt(ms_1610612977.look.smL.i, 1), 0, (ms_1610612977.look.smL.s).length - 1)], "a", ms_1610612977.look.smL.s[chckIndx(subInt(ms_1610612977.look.smL.i, 1), 0, (ms_1610612977.look.smL.s).length - 1)], "b", ms_1610612977, "c", captx_1610612992, 0, text_1610612978, z_1610613010.subExp.nfa, ms_1610612977.look, i_1610612980, 0, flags2_1610613026) == -1);
                                break;
                              default: 
                                if (true) {
                                failedAssertImpl_218103864(makeNimstrLit("nfamatch.nim(71, 14) `false` "));
                                }
                                
                                Temporary14 = false;
                                break;
                              }
                              matched_1610612993 = Temporary14;
                              removeLast_1426064328(ms_1610612977.look.smL);
                              break;
                            default: 
                              if (true) {
                              failedAssertImpl_218103864(makeNimstrLit("nfafindall.nim(187, 20) `false` "));
                              }
                              
                              break;
                            }
                            i_1778387597 = addInt(i_1778387597, 1);
                            if (!(((colontmp__1778387596).length == L_1778387598))) {
                            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                            }
                            
                          }
                      } while (false);
                    } while (false);
                    }
                    
                    if (matched_1610612993) {
                    if ((regex_1610612979.nfa.s[chckIndx(nt_1610613002, 0, (regex_1610612979.nfa.s).length - 1)].kind == 45)) {
                    add_1610612763(ms_1610612977.m, {Field0: captx_1610612992[0], Field1: HEX2EHEX2E_973079379(HEX5BHEX5D_1426064203(ms_1610612977.a, smi_1610612995).Field2.a, subInt(i_1610612980, 1))});
                    clear_1426064244(ms_1610612977, "a");
                    if (!(eoeFound_1610612994)) {
                    eoeFound_1610612994 = true;
                    add_1426064214(ms_1610612977, "a", {Field0: 0, Field1: -1, Field2: HEX2EHEX2E_973079379(i_1610612980, subInt(i_1610612980, 1))});
                    }
                    
                    smi_1610612995 = -1;
                    break Label3;
                    }
                    
                    add_1426064214(ms_1610612977, "b", {Field0: nt_1610613002, Field1: captx_1610612992[0], Field2: HEX2EHEX2E_973079379(HEX5BHEX5D_1426064203(ms_1610612977.a, smi_1610612995).Field2.a, subInt(i_1610612980, 1))});
                    }
                    
                  } while (false);
                  i_1778387601 = addInt(i_1778387601, 1);
                  if (!(((colontmp__1778387600).length == L_1778387602))) {
                  failedAssertImpl_218103864(makeNimstrLit("iterators.nim(173, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while (false);
          } while (false);
          smi_1610612995 = addInt(smi_1610612995, 1);
        }
    } while (false);
    var Temporary15 = ms_1610612977.a; ms_1610612977.a = ms_1610612977.b; ms_1610612977.b = Temporary15;
  
}

function hasMatches_1610612802(ms_1610612803) {
  var result_1610612804 = false;

  BeforeRet: do {
    result_1610612804 = (0 < len_1610612760(ms_1610612803.m));
    break BeforeRet;
  } while (false);

  return result_1610612804;

}

function findSomeImpl_1610613067(text_1610613068, regex_1610613069, ms_1610613070, start_1610613071, flags_1610613072) {
      var Temporary1;

  var result_1610613073 = 0;

  BeforeRet: do {
    if ((ms_1610613070.a == null)) {
    if (!((ms_1610613070.b == null))) {
    failedAssertImpl_218103864(makeNimstrLit("nfafindall.nim(91, 12) `ms.b == nil` "));
    }
    
    ms_1610613070.a = newSubmatches_1426064136((regex_1610613069.nfa.s).length);
    ms_1610613070.b = newSubmatches_1426064136((regex_1610613069.nfa.s).length);
    ms_1610613070.look = nimCopy(ms_1610613070.look, {ahead: matchImpl_1627389991, behind: reversedMatchImpl_1627390438, smL: ({s: [], i: 0})}, NTI1627389957);
    }
    
      if (!((regex_1610613069.nfa.s).length <= cap_1426064253(ms_1610613070.a))) Temporary1 = false; else {        Temporary1 = ((regex_1610613069.nfa.s).length <= cap_1426064253(ms_1610613070.b));      }    if (!(Temporary1)) {
    failedAssertImpl_218103864(makeNimstrLit("nfafindall.nim(211, 16) `ms.a.cap >= len(regex.nfa.s) and ms.b.cap >= len(regex.nfa.s)` "));
    }
    
    clear_1610612805(ms_1610613070);
    var c_1610613096 = -1;
    var cPrev_1610613097 = -1;
    var i_1610613098 = start_1610613071;
    var iPrev_1610613099 = start_1610613071;
    var optFlag_1610613104 = (flags_1610613072[3] != undefined);
    add_1426064214(ms_1610613070, "a", {Field0: 0, Field1: -1, Field2: HEX2EHEX2E_973079379(i_1610613098, subInt(i_1610613098, 1))});
    if (contains_1308624332(HEX2EHEX2E_973079379(0, subInt((text_1610613068).length, 1)), subInt(start_1610613071, 1))) {
    cPrev_1610613097 = bwRuneAt_1224736810(text_1610613068, subInt(start_1610613071, 1));
    }
    
    Label2: do {
        Label3: while (true) {
        if (!(i_1610613098 < (text_1610613068).length)) break Label3;
          if ((text_1610613068[chckIndx(i_1610613098, 0, (text_1610613068).length - 1)] <= 127)) {
          c_1610613096 = chckRange(text_1610613068[chckIndx(i_1610613098, 0, (text_1610613068).length - 1)], -2147483648, 2147483647);
          i_1610613098 = addInt(i_1610613098, 1);
          }
          else {
          if (((text_1610613068[chckIndx(i_1610613098, 0, (text_1610613068).length - 1)] >>> 5) == 6)) {
          if ((i_1610613098 <= subInt((text_1610613068).length, 2))) {
          c_1610613096 = chckRange((((text_1610613068[chckIndx(i_1610613098, 0, (text_1610613068).length - 1)] & 31) << 6) | (text_1610613068[chckIndx(addInt(i_1610613098, 1), 0, (text_1610613068).length - 1)] & 63)), -2147483648, 2147483647);
          i_1610613098 = addInt(i_1610613098, 2);
          }
          else {
            c_1610613096 = 65533;
            i_1610613098 = addInt(i_1610613098, 1);
          }
          
          }
          else {
          if (((text_1610613068[chckIndx(i_1610613098, 0, (text_1610613068).length - 1)] >>> 4) == 14)) {
          if ((i_1610613098 <= subInt((text_1610613068).length, 3))) {
          c_1610613096 = chckRange(((((text_1610613068[chckIndx(i_1610613098, 0, (text_1610613068).length - 1)] & 15) << 12) | ((text_1610613068[chckIndx(addInt(i_1610613098, 1), 0, (text_1610613068).length - 1)] & 63) << 6)) | (text_1610613068[chckIndx(addInt(i_1610613098, 2), 0, (text_1610613068).length - 1)] & 63)), -2147483648, 2147483647);
          i_1610613098 = addInt(i_1610613098, 3);
          }
          else {
            c_1610613096 = 65533;
            i_1610613098 = addInt(i_1610613098, 1);
          }
          
          }
          else {
          if (((text_1610613068[chckIndx(i_1610613098, 0, (text_1610613068).length - 1)] >>> 3) == 30)) {
          if ((i_1610613098 <= subInt((text_1610613068).length, 4))) {
          c_1610613096 = chckRange((((((text_1610613068[chckIndx(i_1610613098, 0, (text_1610613068).length - 1)] & 7) << 18) | ((text_1610613068[chckIndx(addInt(i_1610613098, 1), 0, (text_1610613068).length - 1)] & 63) << 12)) | ((text_1610613068[chckIndx(addInt(i_1610613098, 2), 0, (text_1610613068).length - 1)] & 63) << 6)) | (text_1610613068[chckIndx(addInt(i_1610613098, 3), 0, (text_1610613068).length - 1)] & 63)), -2147483648, 2147483647);
          i_1610613098 = addInt(i_1610613098, 4);
          }
          else {
            c_1610613096 = 65533;
            i_1610613098 = addInt(i_1610613098, 1);
          }
          
          }
          else {
          if (((text_1610613068[chckIndx(i_1610613098, 0, (text_1610613068).length - 1)] >>> 2) == 62)) {
          if ((i_1610613098 <= subInt((text_1610613068).length, 5))) {
          c_1610613096 = chckRange(((((((text_1610613068[chckIndx(i_1610613098, 0, (text_1610613068).length - 1)] & 3) << 24) | ((text_1610613068[chckIndx(addInt(i_1610613098, 1), 0, (text_1610613068).length - 1)] & 63) << 18)) | ((text_1610613068[chckIndx(addInt(i_1610613098, 2), 0, (text_1610613068).length - 1)] & 63) << 12)) | ((text_1610613068[chckIndx(addInt(i_1610613098, 3), 0, (text_1610613068).length - 1)] & 63) << 6)) | (text_1610613068[chckIndx(addInt(i_1610613098, 4), 0, (text_1610613068).length - 1)] & 63)), -2147483648, 2147483647);
          i_1610613098 = addInt(i_1610613098, 5);
          }
          else {
            c_1610613096 = 65533;
            i_1610613098 = addInt(i_1610613098, 1);
          }
          
          }
          else {
          if (((text_1610613068[chckIndx(i_1610613098, 0, (text_1610613068).length - 1)] >>> 1) == 126)) {
          if ((i_1610613098 <= subInt((text_1610613068).length, 6))) {
          c_1610613096 = chckRange((((((((text_1610613068[chckIndx(i_1610613098, 0, (text_1610613068).length - 1)] & 1) << 30) | ((text_1610613068[chckIndx(addInt(i_1610613098, 1), 0, (text_1610613068).length - 1)] & 63) << 24)) | ((text_1610613068[chckIndx(addInt(i_1610613098, 2), 0, (text_1610613068).length - 1)] & 63) << 18)) | ((text_1610613068[chckIndx(addInt(i_1610613098, 3), 0, (text_1610613068).length - 1)] & 63) << 12)) | ((text_1610613068[chckIndx(addInt(i_1610613098, 4), 0, (text_1610613068).length - 1)] & 63) << 6)) | (text_1610613068[chckIndx(addInt(i_1610613098, 5), 0, (text_1610613068).length - 1)] & 63)), -2147483648, 2147483647);
          i_1610613098 = addInt(i_1610613098, 6);
          }
          else {
            c_1610613096 = 65533;
            i_1610613098 = addInt(i_1610613098, 1);
          }
          
          }
          else {
            c_1610613096 = chckRange(text_1610613068[chckIndx(i_1610613098, 0, (text_1610613068).length - 1)], -2147483648, 2147483647);
            i_1610613098 = addInt(i_1610613098, 1);
          }
          }}}}}
          submatch_1610612976(ms_1610613070, text_1610613068, regex_1610613069, iPrev_1610613099, cPrev_1610613097, c_1610613096);
          if ((len_1426064241(ms_1610613070.a) == 0)) {
          if ((i_1610613098 < (text_1610613068).length)) {
          if (hasMatches_1610612802(ms_1610613070)) {
          result_1610613073 = i_1610613098;
          break BeforeRet;
          }
          
          if (optFlag_1610613104) {
          result_1610613073 = i_1610613098;
          break BeforeRet;
          }
          
          }
          
          }
          
          add_1426064214(ms_1610613070, "a", {Field0: 0, Field1: -1, Field2: HEX2EHEX2E_973079379(i_1610613098, subInt(i_1610613098, 1))});
          iPrev_1610613099 = i_1610613098;
          cPrev_1610613097 = c_1610613096;
        }
    } while (false);
    submatch_1610612976(ms_1610613070, text_1610613068, regex_1610613069, iPrev_1610613099, cPrev_1610613097, -1);
    if (!((len_1426064241(ms_1610613070.a) == 0))) {
    failedAssertImpl_218103864(makeNimstrLit("nfafindall.nim(242, 12) `smA.len == 0` "));
    }
    
    if (hasMatches_1610612802(ms_1610613070)) {
    result_1610613073 = i_1610613098;
    break BeforeRet;
    }
    
    result_1610613073 = -1;
    break BeforeRet;
  } while (false);

  return result_1610613073;

}

function findSomeOptImpl_1610613381(text_1610613382, regex_1610613383, ms_1610613384, start_1610613385) {
      var Temporary1;

  var result_1610613386 = 0;

  BeforeRet: do {
    if (!((0 < (regex_1610613383.litOpt.nfa.s).length))) {
    failedAssertImpl_218103864(makeNimstrLit("nfafindall.nim(265, 12) `opt.nfa.s.len > 0` "));
    }
    
    if ((ms_1610613384.a == null)) {
    if (!((ms_1610613384.b == null))) {
    failedAssertImpl_218103864(makeNimstrLit("nfafindall.nim(91, 12) `ms.b == nil` "));
    }
    
    ms_1610613384.a = newSubmatches_1426064136(nimMax((regex_1610613383.litOpt.nfa.s).length, (regex_1610613383.nfa.s).length));
    ms_1610613384.b = newSubmatches_1426064136(nimMax((regex_1610613383.litOpt.nfa.s).length, (regex_1610613383.nfa.s).length));
    ms_1610613384.look = nimCopy(ms_1610613384.look, {ahead: matchImpl_1627389991, behind: reversedMatchImpl_1627390438, smL: ({s: [], i: 0})}, NTI1627389957);
    }
    
      if (!(nimMax((regex_1610613383.litOpt.nfa.s).length, (regex_1610613383.nfa.s).length) <= cap_1426064253(ms_1610613384.a))) Temporary1 = false; else {        Temporary1 = (nimMax((regex_1610613383.litOpt.nfa.s).length, (regex_1610613383.nfa.s).length) <= cap_1426064253(ms_1610613384.b));      }    if (!(Temporary1)) {
    failedAssertImpl_218103864(makeNimstrLit("nfafindall.nim(266, 16) `ms.a.cap >= max(len(regex.litOpt.nfa.s), len(regex.nfa.s)) and\x0A    ms.b.cap >= max(len(regex.litOpt.nfa.s), len(regex.nfa.s))` "));
    }
    
    clear_1610612805(ms_1610613384);
    var limit_1610613424 = start_1610613385;
    var i_1610613425 = start_1610613385;
    var i2_1610613426 = -1;
    Label2: do {
        Label3: while (true) {
        if (!(i_1610613425 < (text_1610613382).length)) break Label3;
          if (!((i2_1610613426 < i_1610613425))) {
          failedAssertImpl_218103864(makeNimstrLit("nfafindall.nim(272, 14) `i > i2` "));
          }
          
          i2_1610613426 = i_1610613425;
          var litIdx_1610613432 = nsuFindChar(text_1610613382, chckRange(regex_1610613383.litOpt.lit, 0, 255), chckRange(i_1610613425, 0, 2147483647), 0);
          if ((litIdx_1610613432 == -1)) {
          result_1610613386 = -1;
          break BeforeRet;
          }
          
          if (!((i_1610613425 <= litIdx_1610613432))) {
          failedAssertImpl_218103864(makeNimstrLit("nfafindall.nim(279, 14) `litIdx >= i` "));
          }
          
          i_1610613425 = litIdx_1610613432;
          i_1610613425 = reversedMatchImpl_1627391037(ms_1610613384, "a", ms_1610613384, "b", text_1610613382, regex_1610613383.litOpt.nfa, ms_1610613384.look, i_1610613425, limit_1610613424);
          if ((i_1610613425 == -1)) {
          i_1610613425 = addInt(litIdx_1610613432, 1);
          }
          else {
            if (!((i_1610613425 <= litIdx_1610613432))) {
            failedAssertImpl_218103864(makeNimstrLit("nfafindall.nim(286, 16) `i <= litIdx` "));
            }
            
            i_1610613425 = findSomeImpl_1610613067(text_1610613382, regex_1610613383, ms_1610613384, chckRange(i_1610613425, 0, 2147483647), ConstSet69);
            if (hasMatches_1610612802(ms_1610613384)) {
            result_1610613386 = i_1610613425;
            break BeforeRet;
            }
            
            if ((i_1610613425 == -1)) {
            result_1610613386 = -1;
            break BeforeRet;
            }
            
          }
          
        }
    } while (false);
    result_1610613386 = -1;
    break BeforeRet;
  } while (false);

  return result_1610613386;

}

function len_1426063641(t_1426063644) {
  var result_1426063645 = 0;

    result_1426063645 = t_1426063644.counter;

  return result_1426063645;

}

function HEX5BHEX5D_1426063416(s_1426063418, i_1426063419) {
  var result_1426063420 = null;

    result_1426063420 = s_1426063418[chckIndx(subInt((s_1426063418).length, i_1426063419), 0, (s_1426063418).length - 1)];

  return result_1426063420;

}

function reverse_1426063482(a_1426063484, first_1426063485, last_1426063486) {
    var x_1426063487 = first_1426063485;
    var y_1426063488 = last_1426063486;
    Label1: do {
        Label2: while (true) {
        if (!(x_1426063487 < y_1426063488)) break Label2;
          var Temporary3 = a_1426063484[chckIndx(x_1426063487, 0, (a_1426063484).length - 1)]; a_1426063484[chckIndx(x_1426063487, 0, (a_1426063484).length - 1)] = a_1426063484[chckIndx(y_1426063488, 0, (a_1426063484).length - 1)]; a_1426063484[chckIndx(y_1426063488, 0, (a_1426063484).length - 1)] = Temporary3;          y_1426063488 = subInt(y_1426063488, 1);
          x_1426063487 = addInt(x_1426063487, 1);
        }
    } while (false);

  
}

function reverse_1426063476(a_1426063478) {
    reverse_1426063482(a_1426063478, 0, chckRange(nimMax(0, (a_1426063478).length - 1), 0, 2147483647));

  
}

function constructSubmatches_1426063375(captures_1426063376, captures_1426063376_Idx, capts_1426063377, capt_1426063378, size_1426063379) {
  BeforeRet: do {
    if (captures_1426063376[captures_1426063376_Idx].length < chckRange(size_1426063379, 0, 2147483647)) { for (var i = captures_1426063376[captures_1426063376_Idx].length ; i < chckRange(size_1426063379, 0, 2147483647) ; ++i) captures_1426063376[captures_1426063376_Idx].push([]); }
               else { captures_1426063376[captures_1426063376_Idx].length = chckRange(size_1426063379, 0, 2147483647); };
    Label1: do {
      var i_1426063393 = 0;
      var colontmp__1778387610 = 0;
      colontmp__1778387610 = subInt((captures_1426063376[captures_1426063376_Idx]).length, 1);
      var res_1778387611 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_1778387611 <= colontmp__1778387610)) break Label3;
            i_1426063393 = res_1778387611;
            if (captures_1426063376[captures_1426063376_Idx][chckIndx(i_1426063393, 0, (captures_1426063376[captures_1426063376_Idx]).length - 1)].length < 0) { for (var i = captures_1426063376[captures_1426063376_Idx][chckIndx(i_1426063393, 0, (captures_1426063376[captures_1426063376_Idx]).length - 1)].length ; i < 0 ; ++i) captures_1426063376[captures_1426063376_Idx][chckIndx(i_1426063393, 0, (captures_1426063376[captures_1426063376_Idx]).length - 1)].push(({a: 0, b: 0})); }
               else { captures_1426063376[captures_1426063376_Idx][chckIndx(i_1426063393, 0, (captures_1426063376[captures_1426063376_Idx]).length - 1)].length = 0; };
            res_1778387611 = addInt(res_1778387611, 1);
          }
      } while (false);
    } while (false);
    if (((capts_1426063377).length == 0)) {
    break BeforeRet;
    }
    
    var capt_1426063402 = capt_1426063378;
    Label4: do {
        Label5: while (true) {
        if (!!((capt_1426063402 == -1))) break Label5;
          if (((captures_1426063376[captures_1426063376_Idx][chckIndx(capts_1426063377[chckIndx(capt_1426063402, 0, (capts_1426063377).length - 1)].idx, 0, (captures_1426063376[captures_1426063376_Idx]).length - 1)]).length == 0)) {
          captures_1426063376[captures_1426063376_Idx][chckIndx(capts_1426063377[chckIndx(capt_1426063402, 0, (capts_1426063377).length - 1)].idx, 0, (captures_1426063376[captures_1426063376_Idx]).length - 1)].push(HEX2EHEX2E_973079379(-2, -2));;
          }
          
          if (!((HEX5BHEX5D_1426063416(captures_1426063376[captures_1426063376_Idx][chckIndx(capts_1426063377[chckIndx(capt_1426063402, 0, (capts_1426063377).length - 1)].idx, 0, (captures_1426063376[captures_1426063376_Idx]).length - 1)], 1).a == -2))) {
          captures_1426063376[captures_1426063376_Idx][chckIndx(capts_1426063377[chckIndx(capt_1426063402, 0, (capts_1426063377).length - 1)].idx, 0, (captures_1426063376[captures_1426063376_Idx]).length - 1)].push(HEX2EHEX2E_973079379(-2, -2));;
          }
          
          if ((HEX5BHEX5D_1426063416(captures_1426063376[captures_1426063376_Idx][chckIndx(capts_1426063377[chckIndx(capt_1426063402, 0, (capts_1426063377).length - 1)].idx, 0, (captures_1426063376[captures_1426063376_Idx]).length - 1)], 1).b == -2)) {
          HEX5BHEX5D_1426063416(captures_1426063376[captures_1426063376_Idx][chckIndx(capts_1426063377[chckIndx(capt_1426063402, 0, (capts_1426063377).length - 1)].idx, 0, (captures_1426063376[captures_1426063376_Idx]).length - 1)], 1).b = subInt(capts_1426063377[chckIndx(capt_1426063402, 0, (capts_1426063377).length - 1)].bound, 1);
          }
          else {
            HEX5BHEX5D_1426063416(captures_1426063376[captures_1426063376_Idx][chckIndx(capts_1426063377[chckIndx(capt_1426063402, 0, (capts_1426063377).length - 1)].idx, 0, (captures_1426063376[captures_1426063376_Idx]).length - 1)], 1).a = capts_1426063377[chckIndx(capt_1426063402, 0, (capts_1426063377).length - 1)].bound;
          }
          
          capt_1426063402 = ((capts_1426063377[chckIndx(capt_1426063402, 0, (capts_1426063377).length - 1)].parent) | 0);
        }
    } while (false);
    Label6: do {
      var c_1426063475 = null;
      var c_1426063475_Idx = 0;
      var i_1778387616 = 0;
      var L_1778387617 = (captures_1426063376[captures_1426063376_Idx]).length;
      Label7: do {
          Label8: while (true) {
          if (!(i_1778387616 < L_1778387617)) break Label8;
            c_1426063475 = captures_1426063376[captures_1426063376_Idx]; c_1426063475_Idx = chckIndx(i_1778387616, 0, (captures_1426063376[captures_1426063376_Idx]).length - 1);
            reverse_1426063476(c_1426063475[c_1426063475_Idx]);
            i_1778387616 = addInt(i_1778387616, 1);
            if (!(((captures_1426063376[captures_1426063376_Idx]).length == L_1778387617))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(249, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
  } while (false);

  
}

function fillMatchImpl_1610612826(m_1610612827, mi_1610612828, ms_1610612829, regex_1610612830) {
    if (!((len_1426063641(m_1610612827.namedGroups) == len_1426063641(regex_1610612830.namedGroups)))) {
    m_1610612827.namedGroups = nimCopy(m_1610612827.namedGroups, regex_1610612830.namedGroups, NTI1392509010);
    }
    
    constructSubmatches_1426063375(m_1610612827, "captures", ms_1610612829.c, ((ms_1610612829.m.s[chckIndx(mi_1610612828, 0, (ms_1610612829.m.s).length - 1)].Field0) | 0), ((regex_1610612830.groupsCount) | 0));
    m_1610612827.boundaries = nimCopy(m_1610612827.boundaries, ms_1610612829.m.s[chckIndx(mi_1610612828, 0, (ms_1610612829.m.s).length - 1)].Field1, NTI788529213);

  
}

function HEX5BHEX5D_973079404(s_973079407, x_973079408) {
  var result_973079409 = [];

    var a_973079411 = x_973079408.a;
    var L_973079413 = addInt(subInt(x_973079408.b, a_973079411), 1);
    result_973079409 = nimCopy(null, mnewString(chckRange(L_973079413, 0, 2147483647)), NTI33554439);
    Label1: do {
      var i_973079418 = 0;
      var i_1778387634 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_1778387634 < L_973079413)) break Label3;
            i_973079418 = i_1778387634;
            result_973079409[chckIndx(i_973079418, 0, (result_973079409).length - 1)] = s_973079407[chckIndx(addInt(i_973079418, a_973079411), 0, (s_973079407).length - 1)];
            i_1778387634 = addInt(i_1778387634, 1);
          }
      } while (false);
    } while (false);

  return result_973079409;

}

function group_620757071(m_620757072, i_620757073, text_620757074) {
  var result_620757075 = [];

    result_620757075 = nimCopy(null, newSeq_452985301(0), NTI452985127);
    Label1: do {
      var bounds_620757083 = ({a: 0, b: 0});
      Label2: do {
        var capt_1778387628 = null;
        var colontmp__1778387629 = [];
        colontmp__1778387629 = m_620757072.captures[chckIndx(i_620757073, 0, (m_620757072.captures).length - 1)];
        var i_1778387630 = 0;
        var L_1778387631 = (colontmp__1778387629).length;
        Label3: do {
            Label4: while (true) {
            if (!(i_1778387630 < L_1778387631)) break Label4;
              capt_1778387628 = colontmp__1778387629[chckIndx(i_1778387630, 0, (colontmp__1778387629).length - 1)];
              bounds_620757083 = nimCopy(bounds_620757083, capt_1778387628, NTI788529213);
              result_620757075.push(HEX5BHEX5D_973079404(text_620757074, bounds_620757083));;
              i_1778387630 = addInt(i_1778387630, 1);
              if (!(((colontmp__1778387629).length == L_1778387631))) {
              failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while (false);
      } while (false);
    } while (false);

  return result_620757075;

}

function tokenize_603980125(inp_603980126) {
            var Temporary4;
                        var Temporary9;
                        var Temporary10;

  var result_603980127 = [];

    result_603980127 = nimCopy(null, [], NTI603980025);
    Label1: do {
      var m_603980132 = ({captures: [], namedGroups: ({data: [], counter: 0, first: 0, last: 0}), boundaries: ({a: 0, b: 0})});
      var i_1778387471 = 0;
      var i2_1778387472 = -1;
      var m_1778387473 = [({captures: [], namedGroups: ({data: [], counter: 0, first: 0, last: 0}), boundaries: ({a: 0, b: 0})})];
      var ms_1778387474 = [({a: null, b: null, m: ({s: [], i: 0}), c: [], look: ({ahead: null, behind: null, smL: ({s: [], i: 0})})})];
      Label2: do {
          Label3: while (true) {
          if (!(i_1778387471 <= (inp_603980126).length)) break Label3;
            if (!((i2_1778387472 < i_1778387471))) {
            failedAssertImpl_218103864(makeNimstrLit("regex.nim(559, 13) `i > i2` "));
            }
            
            i2_1778387472 = i_1778387471;
            if (canOpt_1442841190(TOKEN_RE_603980061.litOpt)) {
            Temporary4 = findSomeOptImpl_1610613381(inp_603980126, TOKEN_RE_603980061, ms_1778387474[0], chckRange(i_1778387471, 0, 2147483647));
            }
            else {
            Temporary4 = findSomeImpl_1610613067(inp_603980126, TOKEN_RE_603980061, ms_1778387474[0], chckRange(i_1778387471, 0, 2147483647), ConstSet70);
            }
            
            i_1778387471 = Temporary4;
            if ((i_1778387471 < 0)) {
            break Label2;
            }
            
            Label5: do {
              var mi_1778387477 = 0;
              Label6: do {
                var i_1778387479 = 0;
                var colontmp__1778387480 = 0;
                colontmp__1778387480 = subInt(len_1610612760(ms_1778387474[0].m), 1);
                var res_1778387481 = 0;
                Label7: do {
                    Label8: while (true) {
                    if (!(res_1778387481 <= colontmp__1778387480)) break Label8;
                      i_1778387479 = res_1778387481;
                      mi_1778387477 = i_1778387479;
                      fillMatchImpl_1610612826(m_1778387473[0], mi_1778387477, ms_1778387474[0], TOKEN_RE_603980061);
                      m_603980132 = nimCopy(m_603980132, m_1778387473[0], NTI1426063573);
                      var match_603980133 = group_620757071(m_603980132, 0, inp_603980126);
                        if (!(0 < (match_603980133).length)) Temporary10 = false; else {                          Temporary10 = (0 < (match_603980133[chckIndx(0, 0, (match_603980133).length - 1)]).length);                        }                        if (!Temporary10) Temporary9 = false; else {                          Temporary9 = !((match_603980133[chckIndx(0, 0, (match_603980133).length - 1)][chckIndx(0, 0, (match_603980133[chckIndx(0, 0, (match_603980133).length - 1)]).length - 1)] == 59));                        }                      if (Temporary9) {
                      var Temporary11 = nimCopy(null, match_603980133[chckIndx(0, 0, (match_603980133).length - 1)], NTI33554439);
                      result_603980127.push(Temporary11);;
                      }
                      
                      res_1778387481 = addInt(res_1778387481, 1);
                    }
                } while (false);
              } while (false);
            } while (false);
            if ((i_1778387471 == (inp_603980126).length)) {
            break Label2;
            }
            
          }
      } while (false);
    } while (false);

  return result_603980127;

}

function peek_603980119(reader_603980120) {
  var result_603980121 = [];

  BeforeRet: do {
    if ((reader_603980120.position < (reader_603980120.tokens).length)) {
    result_603980121 = nimCopy(null, reader_603980120.tokens[chckIndx(reader_603980120.position, 0, (reader_603980120.tokens).length - 1)], NTI33554439);
    break BeforeRet;
    }
    else {
      result_603980121 = nimCopy(null, makeNimstrLit("\x00"), NTI33554439);
      break BeforeRet;
    }
    
  } while (false);

  return result_603980121;

}

function next_603980113(reader_603980114) {
  var result_603980115 = [];

  BeforeRet: do {
    if ((reader_603980114.position < (reader_603980114.tokens).length)) {
    result_603980115 = nimCopy(null, reader_603980114.tokens[chckIndx(reader_603980114.position, 0, (reader_603980114.tokens).length - 1)], NTI33554439);
    reader_603980114.position = addInt(reader_603980114.position, 1);
    }
    else {
      result_603980115 = nimCopy(null, makeNimstrLit("\x00"), NTI33554439);
      break BeforeRet;
    }
    
  } while (false);

  return result_603980115;

}

function symbol_637535704(x_637535705) {
  var result_637535706 = null;

    result_637535706 = {kind: 6, str: nimCopy(null, x_637535705, NTI33554439), list: [], val: null, number: 0.0, hashmap: ({data: [], counter: 0}), fun: null, is_macro: false, ffun: null, fis_macro: false, ast: null, params: null, env: null, meta: null};

  return result_637535706;

}

function newSeq_603980154(len_603980156) {
  var result_603980157 = [];

    result_603980157 = new Array(len_603980156); for (var i = 0 ; i < len_603980156 ; ++i) { result_603980157[i] = null; }
  return result_603980157;

}

function read_seq_603980145(r_603980146, frm_603980147, to_603980148) {
  var result_603980149 = [];

  BeforeRet: do {
    var elems_603980162 = newSeq_603980154(0);
    if (!(eqStrings(next_603980113(r_603980146), frm_603980147))) {
    failedAssertImpl_218103864(makeNimstrLit("reader.nim(57, 10) `r.next == frm` Read list was expecting a ( character!"));
    }
    
    Label1: do {
        Label2: while (true) {
        if (!!(eqStrings(peek_603980119(r_603980146), to_603980148))) break Label2;
          if (eqStrings(peek_603980119(r_603980146), makeNimstrLit("\x00"))) {
          raiseException({message: (makeNimstrLit("Expected \'") || []).concat(to_603980148 || [],makeNimstrLit("\', got EOF!") || []), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
          }
          
          elems_603980162.push(read_form_603980141(r_603980146));;
        }
    } while (false);
    var _ = next_603980113(r_603980146);
    result_603980149 = nimCopy(null, elems_603980162, NTI603980047);
    break BeforeRet;
  } while (false);

  return result_603980149;

}

function read_list_603980173(r_603980174) {
  var result_603980175 = null;

    result_603980175 = list_637534334(read_seq_603980145(r_603980174, makeNimstrLit("("), makeNimstrLit(")")));

  return result_603980175;

}

function vector_637534346(xs_637534347) {
  var result_637534348 = null;

    result_637534348 = {kind: 8, list: nimCopy(null, xs_637534347, NTI637534295), val: null, number: 0.0, str: [], hashmap: ({data: [], counter: 0}), fun: null, is_macro: false, ffun: null, fis_macro: false, ast: null, params: null, env: null, meta: null};

  return result_637534348;

}

function read_vector_603980176(r_603980177) {
  var result_603980178 = null;

    result_603980178 = vector_637534346(read_seq_603980145(r_603980177, makeNimstrLit("["), makeNimstrLit("]")));

  return result_603980178;

}

function nextPowerOfTwo_771752112(x_771752113) {
  var result_771752114 = 0;

    result_771752114 = (x_771752113 - 1);
    result_771752114 = (result_771752114 | (result_771752114 >> 16));
    result_771752114 = (result_771752114 | (result_771752114 >> 8));
    result_771752114 = (result_771752114 | (result_771752114 >> 4));
    result_771752114 = (result_771752114 | (result_771752114 >> 2));
    result_771752114 = (result_771752114 | (result_771752114 >> 1));
    result_771752114 += (1 + ((x_771752113 <= 0) ? 1 : 0));

  return result_771752114;

}

function slotsNeeded_671088682(count_671088683) {
  var result_671088684 = 0;

    result_671088684 = nextPowerOfTwo_771752112(addInt(divInt(mulInt(count_671088683, 3), 2), 4));

  return result_671088684;

}

function initTable_637534362(initialSize_637534365) {
  var result_637534366 = ({data: [], counter: 0});

    var correctSizeHEX60gensym3_637534368 = slotsNeeded_671088682(chckRange(initialSize_637534365, 0, 2147483647));
    result_637534366.counter = 0;
    result_637534366.data = new Array(chckRange(correctSizeHEX60gensym3_637534368, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym3_637534368, 0, 2147483647) ; ++i) { result_637534366.data[i] = {Field0: 0, Field1: [], Field2: null}; }
  return result_637534366;

}

function toHashKey_637534349(x_637534350) {
      var Temporary1;

  var result_637534351 = [];

  BeforeRet: do {
    switch (x_637534350.kind) {
    case 7:
      var Temporary1 = x_637534350;
      if (ConstSet71[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI637534211)); }
      result_637534351 = nimCopy(null, Temporary1.str, NTI33554439);
      break BeforeRet;
      break;
    default: 
      raiseException({message: makeNimstrLit("Only strings and keywords may be used as HashMap keys."), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
      break;
    }
  } while (false);

  return result_637534351;

}

function mustRehash_637534828(t_637534830) {
  var result_637534831 = false;

    if (!((t_637534830.counter < (t_637534830.data).length))) {
    failedAssertImpl_218103864(makeNimstrLit("hashcommon.nim(29, 9) `\x0At.counter < t.dataLen` "));
    }
    
    result_637534831 = ((mulInt((t_637534830.data).length, 2) < mulInt(t_637534830.counter, 3)) || (subInt((t_637534830.data).length, t_637534830.counter) < 4));

  return result_637534831;

}

function rawInsert_637535277(t_637535281, data_637535282, data_637535282_Idx, key_637535283, val_637535284, hc_637535285, h_637535286) {
    data_637535282[data_637535282_Idx][chckIndx(h_637535286, 0, (data_637535282[data_637535282_Idx]).length - 1)].Field1 = nimCopy(null, key_637535283, NTI33554439);
    data_637535282[data_637535282_Idx][chckIndx(h_637535286, 0, (data_637535282[data_637535282_Idx]).length - 1)].Field2 = val_637535284;
    data_637535282[data_637535282_Idx][chckIndx(h_637535286, 0, (data_637535282[data_637535282_Idx]).length - 1)].Field0 = hc_637535285;

  
}

function enlarge_637534983(t_637534986) {
    var n_637534989 = [];
    n_637534989 = new Array(chckRange(mulInt((t_637534986.data).length, 2), 0, 2147483647)); for (var i = 0 ; i < chckRange(mulInt((t_637534986.data).length, 2), 0, 2147483647) ; ++i) { n_637534989[i] = {Field0: 0, Field1: [], Field2: null}; }    var Temporary1 = t_637534986.data; t_637534986.data = n_637534989; n_637534989 = Temporary1;    Label2: do {
      var i_637535053 = 0;
      var colontmp__1778387643 = 0;
      colontmp__1778387643 = (n_637534989).length - 1;
      var res_1778387644 = 0;
      Label3: do {
          Label4: while (true) {
          if (!(res_1778387644 <= colontmp__1778387643)) break Label4;
            i_637535053 = res_1778387644;
            var eh_637535107 = n_637534989[chckIndx(i_637535053, 0, (n_637534989).length - 1)].Field0;
            if (isFilled_671088671(eh_637535107)) {
            var j_637535111 = (eh_637535107 & (t_637534986.data).length - 1);
            Label5: do {
                Label6: while (true) {
                if (!isFilled_671088671(t_637534986.data[chckIndx(j_637535111, 0, (t_637534986.data).length - 1)].Field0)) break Label6;
                  j_637535111 = nextTry_671088674(j_637535111, (t_637534986.data).length - 1);
                }
            } while (false);
            rawInsert_637535277(t_637534986, t_637534986, "data", n_637534989[chckIndx(i_637535053, 0, (n_637534989).length - 1)].Field1, n_637534989[chckIndx(i_637535053, 0, (n_637534989).length - 1)].Field2, eh_637535107, j_637535111);
            }
            
            res_1778387644 = addInt(res_1778387644, 1);
          }
      } while (false);
    } while (false);

  
}

function rawGetKnownHC_637535446(t_637535449, key_637535450, hc_637535451) {
  var result_637535452 = 0;

  BeforeRet: do {
    if (((t_637535449.data).length == 0)) {
    result_637535452 = -1;
    break BeforeRet;
    }
    
    var h_637535503 = (hc_637535451 & (t_637535449.data).length - 1);
    Label1: do {
        Label2: while (true) {
        if (!isFilled_671088671(t_637535449.data[chckIndx(h_637535503, 0, (t_637535449.data).length - 1)].Field0)) break Label2;
          if (((t_637535449.data[chckIndx(h_637535503, 0, (t_637535449.data).length - 1)].Field0 == hc_637535451) && eqStrings(t_637535449.data[chckIndx(h_637535503, 0, (t_637535449.data).length - 1)].Field1, key_637535450))) {
          result_637535452 = h_637535503;
          break BeforeRet;
          }
          
          h_637535503 = nextTry_671088674(h_637535503, (t_637535449.data).length - 1);
        }
    } while (false);
    result_637535452 = subInt(-1, h_637535503);
  } while (false);

  return result_637535452;

}

function HEX5BHEX5DHEX3D_637534431(t_637534434, key_637534435, val_637534436) {
    if (((t_637534434.data).length == 0)) {
    var correctSizeHEX60gensym6_637534486 = slotsNeeded_671088682(32);
    t_637534434.counter = 0;
    t_637534434.data = new Array(chckRange(correctSizeHEX60gensym6_637534486, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym6_637534486, 0, 2147483647) ; ++i) { t_637534434.data[i] = {Field0: 0, Field1: [], Field2: null}; }    }
    
    var hc_637534491 = [0];
    var index_637534721 = rawGet_637534492(t_637534434, key_637534435, hc_637534491, 0);
    if ((0 <= index_637534721)) {
    t_637534434.data[chckIndx(index_637534721, 0, (t_637534434.data).length - 1)].Field2 = val_637534436;
    }
    else {
      if (((t_637534434.data).length == 0)) {
      var correctSizeHEX60gensym11_637534823 = slotsNeeded_671088682(32);
      t_637534434.counter = 0;
      t_637534434.data = new Array(chckRange(correctSizeHEX60gensym11_637534823, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym11_637534823, 0, 2147483647) ; ++i) { t_637534434.data[i] = {Field0: 0, Field1: [], Field2: null}; }      }
      
      if (mustRehash_637534828(t_637534434)) {
      enlarge_637534983(t_637534434);
      index_637534721 = rawGetKnownHC_637535446(t_637534434, key_637534435, hc_637534491[0]);
      }
      
      index_637534721 = subInt(-1, index_637534721);
      rawInsert_637535277(t_637534434, t_637534434, "data", key_637534435, val_637534436, hc_637534491[0], index_637534721);
      t_637534434.counter = addInt(t_637534434.counter, 1);
    }
    

  
}

function hashMap_637534353(xs_637534354) {
  var result_637534355 = null;

    var size_637534360 = (xs_637534354).length;
    if (!((modInt(size_637534360, 2) == 0))) {
    raiseException({message: makeNimstrLit("Hashmaps must have an even number of elements, unexpected }"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    var table_637534382 = [initTable_637534362(divInt(size_637534360, 2))];
    Label1: do {
      var i_637534388 = 0;
      var colontmp__1778387638 = 0;
      colontmp__1778387638 = subInt(size_637534360, 1);
      var res_1778387639 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_1778387639 <= colontmp__1778387638)) break Label3;
            i_637534388 = res_1778387639;
            var key_637534389 = toHashKey_637534349(xs_637534354[chckIndx(i_637534388, 0, (xs_637534354).length - 1)]);
            var value_637534390 = xs_637534354[chckIndx(addInt(i_637534388, 1), 0, (xs_637534354).length - 1)];
            HEX5BHEX5DHEX3D_637534431(table_637534382[0], key_637534389, value_637534390);
            res_1778387639 = addInt(res_1778387639, 2);
          }
      } while (false);
    } while (false);
    result_637534355 = {kind: 9, hashmap: nimCopy(null, table_637534382[0], NTI637534229), list: [], val: null, number: 0.0, str: [], fun: null, is_macro: false, ffun: null, fis_macro: false, ast: null, params: null, env: null, meta: null};

  return result_637534355;

}

function read_hashmap_603980179(r_603980180) {
  var result_603980181 = null;

    result_603980181 = hashMap_637534353(read_seq_603980145(r_603980180, makeNimstrLit("{"), makeNimstrLit("}")));

  return result_603980181;

}

function clear_1426063697(t_1426063700) {
    Label1: do {
      var i_1426063763 = 0;
      var colontmp__1778387648 = 0;
      colontmp__1778387648 = (t_1426063700.data).length;
      var i_1778387649 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_1778387649 < colontmp__1778387648)) break Label3;
            i_1426063763 = i_1778387649;
            t_1426063700.data[chckIndx(i_1426063763, 0, (t_1426063700.data).length - 1)].Field0 = 0;
            t_1426063700.data[chckIndx(i_1426063763, 0, (t_1426063700.data).length - 1)].Field2 = nimCopy(null, [], NTI33554439);
            t_1426063700.data[chckIndx(i_1426063763, 0, (t_1426063700.data).length - 1)].Field3 = 0;
            i_1778387649 = addInt(i_1778387649, 1);
          }
      } while (false);
    } while (false);
    t_1426063700.counter = 0;
    t_1426063700.first = -1;
    t_1426063700.last = -1;

  
}

function clear_1426063577(m_1426063578) {
    if ((0 < (m_1426063578.captures).length)) {
    if (m_1426063578.captures.length < 0) { for (var i = m_1426063578.captures.length ; i < 0 ; ++i) m_1426063578.captures.push([]); }
               else { m_1426063578.captures.length = 0; };
    }
    
    if ((0 < len_1426063641(m_1426063578.namedGroups))) {
    clear_1426063697(m_1426063578.namedGroups);
    }
    
    m_1426063578.boundaries = nimCopy(m_1426063578.boundaries, HEX2EHEX2E_973079379(0, -1), NTI788529213);

  
}

function matchImpl_1627391058(text_1627391059, regex_1627391060, m_1627391061, start_1627391062) {
  var result_1627391063 = false;

    clear_1426063577(m_1627391061);
    var smA_1627391067 = [newSubmatches_1426064136((regex_1627391060.nfa.s).length)];
    var smB_1627391071 = [newSubmatches_1426064136((regex_1627391060.nfa.s).length)];
    var capts_1627391072 = [[]];
    var capt_1627391073 = [-1];
    var look_1627391074 = [{ahead: matchImpl_1627389991, behind: reversedMatchImpl_1627390438, smL: ({s: [], i: 0})}];
    result_1627391063 = matchImpl_1627389991(smA_1627391067, 0, smB_1627391071, 0, capts_1627391072, 0, capt_1627391073, 0, text_1627391059, regex_1627391060.nfa, look_1627391074[0], start_1627391062, ConstSet72);
    if (result_1627391063) {
    constructSubmatches_1426063375(m_1627391061, "captures", capts_1627391072[0], ((capt_1627391073[0]) | 0), ((regex_1627391060.groupsCount) | 0));
    if ((0 < len_1426063641(regex_1627391060.namedGroups))) {
    m_1627391061.namedGroups = nimCopy(m_1627391061.namedGroups, regex_1627391060.namedGroups, NTI1392509010);
    }
    
    m_1627391061.boundaries = nimCopy(m_1627391061.boundaries, HEX5BHEX5D_1426064203(smA_1627391067[0], 0).Field2, NTI788529213);
    }
    

  return result_1627391063;

}

function match_620758206(s_620758207, pattern_620758208) {
  var result_620758209 = false;

    var m_620758210 = [({captures: [], namedGroups: ({data: [], counter: 0, first: 0, last: 0}), boundaries: ({a: 0, b: 0})})];
    result_620758209 = matchImpl_1627391058(s_620758207, pattern_620758208, m_620758210[0], 0);

  return result_620758209;

}

function parseFloatNative_33557269(a_33557270) {
  var result_33557271 = 0.0;

    var a2_33557272 = toJSStr(a_33557270);
      result_33557271 = Number(a2_33557272);
  

  return result_33557271;

}

function npuParseFloat(s_1006633372, number_1006633373, number_1006633373_Idx, start_1006633374) {
  var result_1006633375 = 0;

    var bf_1006633376 = [0.0];
    result_1006633375 = nimParseBiggestFloat(s_1006633372, bf_1006633376, 0, start_1006633374);
    if (!((result_1006633375 == 0))) {
    number_1006633373[number_1006633373_Idx] = bf_1006633376[0];
    }
    

  return result_1006633375;

}

function nsuParseFloat(s_654312242) {
      var Temporary1;

  var result_654312243 = [0.0];

    result_654312243[0] = 0.0;
    var L_654312244 = npuParseFloat(s_654312242, result_654312243, 0, 0);
      if (!((L_654312244 == (s_654312242).length))) Temporary1 = true; else {        Temporary1 = (L_654312244 == 0);      }    if (Temporary1) {
    raiseException({message: (makeNimstrLit("invalid float: ") || []).concat(s_654312242 || []), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    

  return result_654312243[0];

}

function nsuStartsWith(s_654312737, prefix_654312738) {
            var Temporary3;

  var result_654312739 = false;

  BeforeRet: do {
    var prefixLenHEX60gensym141_654312744 = (prefix_654312738).length;
    var sLenHEX60gensym141_654312745 = (s_654312737).length;
    var iHEX60gensym141_654312746 = 0;
    Label1: do {
        Label2: while (true) {
        if (!true) break Label2;
          if ((prefixLenHEX60gensym141_654312744 <= iHEX60gensym141_654312746)) {
          result_654312739 = true;
          break BeforeRet;
          }
          
            if ((sLenHEX60gensym141_654312745 <= iHEX60gensym141_654312746)) Temporary3 = true; else {              Temporary3 = !((s_654312737[chckIndx(iHEX60gensym141_654312746, 0, (s_654312737).length - 1)] == prefix_654312738[chckIndx(iHEX60gensym141_654312746, 0, (prefix_654312738).length - 1)]));            }          if (Temporary3) {
          result_654312739 = false;
          break BeforeRet;
          }
          
          iHEX60gensym141_654312746 = addInt(iHEX60gensym141_654312746, 1);
        }
    } while (false);
  } while (false);

  return result_654312739;

}

function nsuEndsWith(s_654312756, suffix_654312757) {
          var Temporary3;

  var result_654312758 = false;

  BeforeRet: do {
    var suffixLenHEX60gensym148_654312764 = (suffix_654312757).length;
    var sLenHEX60gensym148_654312765 = (s_654312756).length;
    var iHEX60gensym148_654312766 = 0;
    var jHEX60gensym148_654312767 = subInt(sLenHEX60gensym148_654312765, suffixLenHEX60gensym148_654312764);
    Label1: do {
        Label2: while (true) {
          if (!(0 <= addInt(iHEX60gensym148_654312766, jHEX60gensym148_654312767))) Temporary3 = false; else {            Temporary3 = (addInt(iHEX60gensym148_654312766, jHEX60gensym148_654312767) < sLenHEX60gensym148_654312765);          }        if (!Temporary3) break Label2;
          if (!((s_654312756[chckIndx(addInt(iHEX60gensym148_654312766, jHEX60gensym148_654312767), 0, (s_654312756).length - 1)] == suffix_654312757[chckIndx(iHEX60gensym148_654312766, 0, (suffix_654312757).length - 1)]))) {
          result_654312758 = false;
          break BeforeRet;
          }
          
          iHEX60gensym148_654312766 = addInt(iHEX60gensym148_654312766, 1);
        }
    } while (false);
    if ((suffixLenHEX60gensym148_654312764 <= iHEX60gensym148_654312766)) {
    result_654312758 = true;
    break BeforeRet;
    }
    
  } while (false);

  return result_654312758;

}

function unescape_603980232(x_603980233) {
  var result_603980234 = [];

  BeforeRet: do {
    if (((((x_603980233).length <= 1) || !(nsuStartsWith(x_603980233, makeNimstrLit("\"")))) || !(nsuEndsWith(x_603980233, makeNimstrLit("\""))))) {
    raiseException({message: makeNimstrLit("unbalanced string quote \'\"\'!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    result_603980234 = nimCopy(null, multiReplace_654313162(HEX5BHEX5D_973081768(x_603980233, HEX2EHEX2E_973081741(1, 2)), [{Field0: makeNimstrLit("\\\\"), Field1: makeNimstrLit("\\")}, {Field0: makeNimstrLit("\\n"), Field1: makeNimstrLit("\x0A")}, {Field0: makeNimstrLit("\\\""), Field1: makeNimstrLit("\"")}]), NTI33554439);
    break BeforeRet;
  } while (false);

  return result_603980234;

}

function keyword_637535707(x_637535708) {
  var result_637535709 = null;

    result_637535709 = {kind: 7, str: [255].concat(x_637535708 || []), list: [], val: null, number: 0.0, hashmap: ({data: [], counter: 0}), fun: null, is_macro: false, ffun: null, fis_macro: false, ast: null, params: null, env: null, meta: null};

  return result_637535709;

}

function read_atom_603980143(r_603980144) {
      var Temporary1;

  var result_603980274 = null;

  BeforeRet: do {
    if (((Temporary1 = peek_603980119(r_603980144), Temporary1)[chckIndx(0, 0, (Temporary1).length - 1)] == 59)) {
    var _ = next_603980113(r_603980144);
    result_603980274 = NilToken_637535713;
    break BeforeRet;
    }
    
    var token_603980275 = next_603980113(r_603980144);
    if (match_620758206(token_603980275, NUMBER_RE_603980066)) {
    result_603980274 = number_637535695(nsuParseFloat(token_603980275));
    break BeforeRet;
    }
    else {
    if ((token_603980275[chckIndx(0, 0, (token_603980275).length - 1)] == 34)) {
    if (!(match_620758206(token_603980275, STRING_RE_603980112))) {
    raiseException({message: makeNimstrLit("bad string form, unexpected EOF"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    result_603980274 = toStringToken_637535701(unescape_603980232(token_603980275));
    break BeforeRet;
    }
    else {
    if ((token_603980275[chckIndx(0, 0, (token_603980275).length - 1)] == 58)) {
    result_603980274 = keyword_637535707(token_603980275);
    break BeforeRet;
    }
    else {
    if (eqStrings(token_603980275, makeNimstrLit("nil"))) {
    result_603980274 = NilToken_637535713;
    break BeforeRet;
    }
    else {
    if (eqStrings(token_603980275, makeNimstrLit("true"))) {
    result_603980274 = TrueToken_637535714;
    break BeforeRet;
    }
    else {
    if (eqStrings(token_603980275, makeNimstrLit("false"))) {
    result_603980274 = FalseToken_637535715;
    break BeforeRet;
    }
    else {
      result_603980274 = symbol_637535704(token_603980275);
      break BeforeRet;
    }
    }}}}}
    raiseException({message: (makeNimstrLit("Unexpected token <") || []).concat(token_603980275 || [],makeNimstrLit(">") || []), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
  } while (false);

  return result_603980274;

}

function read_form_603980141(r_603980142) {
  var result_603980184 = null;

    var token_603980185 = peek_603980119(r_603980142);
    switch (toJSStr(token_603980185)) {
    case "'":
      var _ = next_603980113(r_603980142);
      result_603980184 = list_637534334([symbol_637535704(makeNimstrLit("quote")), read_form_603980141(r_603980142)]);
      break;
    case "`":
      var _ = next_603980113(r_603980142);
      result_603980184 = list_637534334([symbol_637535704(makeNimstrLit("quasiquote")), read_form_603980141(r_603980142)]);
      break;
    case "~":
      var _ = next_603980113(r_603980142);
      result_603980184 = list_637534334([symbol_637535704(makeNimstrLit("unquote")), read_form_603980141(r_603980142)]);
      break;
    case "~@":
      var _ = next_603980113(r_603980142);
      result_603980184 = list_637534334([symbol_637535704(makeNimstrLit("splice-unquote")), read_form_603980141(r_603980142)]);
      break;
    case "^":
      var _ = next_603980113(r_603980142);
      var meta_603980202 = read_form_603980141(r_603980142);
      result_603980184 = list_637534334([symbol_637535704(makeNimstrLit("with-meta")), read_form_603980141(r_603980142), meta_603980202]);
      break;
    case "@":
      var _ = next_603980113(r_603980142);
      result_603980184 = list_637534334([symbol_637535704(makeNimstrLit("deref")), read_form_603980141(r_603980142)]);
      break;
    case "(":
      result_603980184 = read_list_603980173(r_603980142);
      break;
    case ")":
      raiseException({message: makeNimstrLit("Unexpected \')\'!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
      break;
    case "[":
      result_603980184 = read_vector_603980176(r_603980142);
      break;
    case "]":
      raiseException({message: makeNimstrLit("Unexpected \']\'!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
      break;
    case "{":
      result_603980184 = read_hashmap_603980179(r_603980142);
      break;
    case "}":
      raiseException({message: makeNimstrLit("Unexpected \'}\'!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
      break;
    default: 
      result_603980184 = read_atom_603980143(r_603980142);
      break;
    }

  return result_603980184;

}

function read_str_603980278(inp_603980279) {
  var result_603980280 = null;

  BeforeRet: do {
    var reader_603980281 = [{position: 0, tokens: tokenize_603980125(inp_603980279)}];
    result_603980280 = read_form_603980141(reader_603980281[0]);
    break BeforeRet;
  } while (false);

  return result_603980280;

}

function read_string_1778385109(xs_1778385110) {
    var Temporary1;

  var result_1778385111 = null;

  BeforeRet: do {
    if (!(((xs_1778385110).length == 1))) {
    raiseException({message: makeNimstrLit("read-string takes only one argument!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    var Temporary1 = xs_1778385110[chckIndx(0, 0, (xs_1778385110).length - 1)];
    if (ConstSet80[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI637534211)); }
    result_1778385111 = read_str_603980278(Temporary1.str);
    break BeforeRet;
  } while (false);

  return result_1778385111;

}

function open_452985194(f_452985195, f_452985195_Idx, filename_452985196, mode_452985197, bufSize_452985198) {
    var Temporary1;
      var Temporary2;

  var result_452985199 = false;

    var p_452985200 = (Temporary1 = fopen(toJSStr(filename_452985196), FormatOpen_452985184[chckIndx(mode_452985197, 0, (FormatOpen_452985184).length - 1)]), Temporary1)[0], p_452985200_Idx = Temporary1[1];
    if (!((p_452985200 == null && p_452985200_Idx == 0))) {
    var f2_452985201 = p_452985200;
    result_452985199 = true;
    f_452985195[f_452985195_Idx] = p_452985200;
      if (!(0 < bufSize_452985198)) Temporary2 = false; else {        Temporary2 = (bufSize_452985198 <= 2147483647);      }    if (Temporary2) {
    var _ = setvbuf(f_452985195[f_452985195_Idx], null, 0, _IOFBF, (bufSize_452985198 >>> 0));
    }
    else {
    if ((bufSize_452985198 == 0)) {
    var _ = setvbuf(f_452985195[f_452985195_Idx], null, 0, _IONBF, 0);
    }
    }
    }
    

  return result_452985199;

}

function rawFileSize_452985150(file_452985151) {
  var result_452985152 = 0;

    var oldPos_452985153 = ftello(file_452985151);
    var _ = fseeko(file_452985151, 0, 2);
    result_452985152 = ftello(file_452985151);
    var _ = fseeko(file_452985151, oldPos_452985153, 0);

  return result_452985152;

}

function raiseEIO_452984912(msg_452984913) {
    raiseException({message: nimCopy(null, msg_452984913, NTI33554439), parent: null, m_type: NTI33555115, name: null, trace: [], up: null}, "IOError");

  
}

function checkErr_452984957(f_452984958) {
    if (!((ferror(f_452984958) == 0))) {
    var msg_452984959 = (makeNimstrLit("errno: ") || []).concat(HEX24_335544323(((errno) | 0)) || [],makeNimstrLit(" `") || [],cstrToNimstr(strerror(errno)) || [],makeNimstrLit("`") || []);
    clearerr(f_452984958);
    raiseEIO_452984912(msg_452984959);
    }
    

  
}

function readBuffer_452984960(f_452984961, buffer_452984962, buffer_452984962_Idx, len_452984963) {
  var result_452984964 = 0;

    result_452984964 = (fread(buffer_452984962, buffer_452984962_Idx, 1, (len_452984963 >>> 0), f_452984961) | 0);
    if (!((result_452984964 == len_452984963))) {
    checkErr_452984957(f_452984961);
    }
    

  return result_452984964;

}

function endOfFile_452985154(f_452985155) {
  var result_452985156 = false;

  BeforeRet: do {
    var c_452985157 = fgetc(f_452985155);
    var _ = ungetc(c_452985157, f_452985155);
    result_452985156 = (c_452985157 < 0);
    break BeforeRet;
  } while (false);

  return result_452985156;

}

function readAllBuffer_452985145(file_452985146) {
  var result_452985147 = [];

    result_452985147 = nimCopy(null, [], NTI33554439);
    var buffer_452985148 = mnewString(4000);
    Label1: do {
        Label2: while (true) {
        if (!true) break Label2;
          var bytesRead_452985149 = readBuffer_452984960(file_452985146, buffer_452985148, chckIndx(0, 0, (buffer_452985148).length - 1), 4000);
          if ((bytesRead_452985149 == 4000)) {
          result_452985147.push.apply(result_452985147, buffer_452985148);;
          }
          else {
            (buffer_452985148.length = chckRange(bytesRead_452985149, 0, 2147483647));
            result_452985147.push.apply(result_452985147, buffer_452985148);;
            break Label1;
          }
          
        }
    } while (false);

  return result_452985147;

}

function readAllFile_452985158(file_452985159, len_452985160) {
  var result_452985161 = [];

    result_452985161 = nimCopy(null, mnewString(chckRange(len_452985160, 0, 2147483647)), NTI33554439);
    var bytes_452985162 = readBuffer_452984960(file_452985159, result_452985161, chckIndx(0, 0, (result_452985161).length - 1), chckRange(len_452985160, 0, 2147483647));
    if (endOfFile_452985154(file_452985159)) {
    if ((bytes_452985162 < len_452985160)) {
    (result_452985161.length = chckRange(bytes_452985162, 0, 2147483647));
    }
    
    }
    else {
    result_452985161.push.apply(result_452985161, readAllBuffer_452985145(file_452985159));;
    }
    

  return result_452985161;

}

function readAll_452985167(file_452985168) {
  var result_452985169 = [];

    var len_452985170 = rawFileSize_452985150(file_452985168);
    if ((0 < len_452985170)) {
    result_452985169 = nimCopy(null, readAllFile_452985158(file_452985168, len_452985170), NTI33554439);
    }
    else {
      result_452985169 = nimCopy(null, readAllBuffer_452985145(file_452985168), NTI33554439);
    }
    

  return result_452985169;

}

function close_452985037(f_452985038) {
    if (!((f_452985038 == null))) {
    var _ = fclose(f_452985038);
    }
    

  
}

function readFile_452985260(filename_452985261) {
    var Temporary2;

  var result_452985262 = [];

    var f_452985263 = [null];
    if (open_452985194(f_452985263, 0, filename_452985261, 0, -1)) {
    Temporary2 = framePtr;
    try {
    result_452985262 = nimCopy(null, readAll_452985167(f_452985263[0]), NTI33554439);
    } finally {
    framePtr = Temporary2;
    close_452985037(f_452985263[0]);
    }
    }
    else {
      raiseException({message: (makeNimstrLit("cannot open: ") || []).concat(filename_452985261 || []), parent: null, m_type: NTI33555115, name: null, trace: [], up: null}, "IOError");
    }
    

  return result_452985262;

}

function slurp_1778385116(xs_1778385117) {
    var Temporary1;

  var result_1778385118 = null;

  BeforeRet: do {
    if (!(((xs_1778385117).length == 1))) {
    raiseException({message: makeNimstrLit("slurp takes only one argument!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    var Temporary1 = xs_1778385117[chckIndx(0, 0, (xs_1778385117).length - 1)];
    if (ConstSet81[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI637534211)); }
    result_1778385118 = toStringToken_637535701(readFile_452985260(Temporary1.str));
    break BeforeRet;
  } while (false);

  return result_1778385118;

}

function atom_637534331(x_637534332) {
  var result_637534333 = null;

    result_637534333 = {kind: 1, val: x_637534332, list: [], number: 0.0, str: [], hashmap: ({data: [], counter: 0}), fun: null, is_macro: false, ffun: null, fis_macro: false, ast: null, params: null, env: null, meta: null};

  return result_637534333;

}

function deref_1778385123(xs_1778385124) {
    var Temporary1;

  var result_1778385125 = null;

  BeforeRet: do {
    if (!(((xs_1778385124).length == 1))) {
    raiseException({message: makeNimstrLit("deref takes only one argument!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    if (!((xs_1778385124[chckIndx(0, 0, (xs_1778385124).length - 1)].kind == 1))) {
    raiseException({message: makeNimstrLit("Can only deref Atoms!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    var Temporary1 = xs_1778385124[chckIndx(0, 0, (xs_1778385124).length - 1)];
    if (ConstSet84[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'val\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI637534211)); }
    result_1778385125 = Temporary1.val;
    break BeforeRet;
  } while (false);

  return result_1778385125;

}

function reset_1778385135(xs_1778385136) {
    var Temporary1;

  var result_1778385137 = null;

  BeforeRet: do {
    if (!(((xs_1778385136).length == 2))) {
    raiseException({message: makeNimstrLit("reset! takes two arguments!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    if (!((xs_1778385136[chckIndx(0, 0, (xs_1778385136).length - 1)].kind == 1))) {
    raiseException({message: makeNimstrLit("Can only reset! atoms!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    var Temporary1 = xs_1778385136[chckIndx(0, 0, (xs_1778385136).length - 1)];
    if (ConstSet85[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'val\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI637534211)); }
    Temporary1.val = xs_1778385136[chckIndx(1, 0, (xs_1778385136).length - 1)];
    result_1778385137 = xs_1778385136[chckIndx(1, 0, (xs_1778385136).length - 1)];
    break BeforeRet;
  } while (false);

  return result_1778385137;

}

function getFun_1778385147(xs_1778385148) {
      var Temporary1;
      var Temporary2;

  var result_1778385149 = null;

  BeforeRet: do {
    switch (xs_1778385148.kind) {
    case 10:
      var Temporary1 = xs_1778385148;
      if (ConstSet88[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'fun\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI637534211)); }
      result_1778385149 = Temporary1.fun;
      break BeforeRet;
      break;
    case 11:
      var Temporary2 = xs_1778385148;
      if (ConstSet89[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'ffun\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI637534211)); }
      result_1778385149 = Temporary2.ffun;
      break BeforeRet;
      break;
    default: 
      raiseException({message: (pr_str_1744830524(xs_1778385148, true) || []).concat(makeNimstrLit(" is not a function type!") || []), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
      break;
    }
  } while (false);

  return result_1778385149;

}

function swap_1778385157(xs_1778385158) {
    var Temporary1;
    var Temporary5;

  var result_1778385159 = null;

    if (!((xs_1778385158[chckIndx(0, 0, (xs_1778385158).length - 1)].kind == 1))) {
    raiseException({message: makeNimstrLit("Can only swap Atoms!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    if (!((ConstSet86[xs_1778385158[chckIndx(1, 0, (xs_1778385158).length - 1)].kind] != undefined))) {
    raiseException({message: makeNimstrLit("Can only swap with functions!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    var Temporary1 = xs_1778385158[chckIndx(0, 0, (xs_1778385158).length - 1)];
    if (ConstSet87[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'val\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI637534211)); }
    var args_1778385174 = [Temporary1.val];
    Label2: do {
      var arg_1778385193 = null;
      var arg_1778385193_Idx = 0;
      var colontmp__1778387661 = [];
      colontmp__1778387661 = HEX5BHEX5D_1761607998(xs_1778385158, HEX2EHEX2E_973081741(2, 1));
      var i_1778387662 = 0;
      var L_1778387663 = (colontmp__1778387661).length;
      Label3: do {
          Label4: while (true) {
          if (!(i_1778387662 < L_1778387663)) break Label4;
            arg_1778385193 = colontmp__1778387661; arg_1778385193_Idx = chckIndx(i_1778387662, 0, (colontmp__1778387661).length - 1);
            args_1778385174.push(arg_1778385193[arg_1778385193_Idx]);;
            i_1778387662 = addInt(i_1778387662, 1);
            if (!(((colontmp__1778387661).length == L_1778387663))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    result_1778385159 = getFun_1778385147(xs_1778385158[chckIndx(1, 0, (xs_1778385158).length - 1)])(args_1778385174);
    var Temporary5 = xs_1778385158[chckIndx(0, 0, (xs_1778385158).length - 1)];
    if (ConstSet90[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'val\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI637534211)); }
    Temporary5.val = result_1778385159;

  return result_1778385159;

}

function empty_1778384957(xs_1778384958) {
      var Temporary1;

  var result_1778384959 = null;

  BeforeRet: do {
    if (!(((xs_1778384958).length == 1))) {
    raiseException({message: makeNimstrLit("empty? takes only one argument!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    if ((ConstSet94[xs_1778384958[chckIndx(0, 0, (xs_1778384958).length - 1)].kind] != undefined)) {
      var Temporary1 = xs_1778384958[chckIndx(0, 0, (xs_1778384958).length - 1)];
      if (ConstSet95[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI637534211)); }
    if (((Temporary1.list).length == 0)) {
    result_1778384959 = TrueToken_637535714;
    break BeforeRet;
    }
    else {
      result_1778384959 = FalseToken_637535715;
      break BeforeRet;
    }
    
    }
    else {
    if ((xs_1778384958[chckIndx(0, 0, (xs_1778384958).length - 1)].kind == 3)) {
    result_1778384959 = TrueToken_637535714;
    break BeforeRet;
    }
    else {
      raiseException({message: makeNimstrLit("empty? only takes lists as arguments."), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    }
  } while (false);

  return result_1778384959;

}

function funIsMacro_1778385151(xs_1778385152) {
      var Temporary1;
      var Temporary2;

  var result_1778385153 = false;

  BeforeRet: do {
    if ((xs_1778385152 == null)) {
    result_1778385153 = false;
    break BeforeRet;
    }
    
    switch (xs_1778385152.kind) {
    case 10:
      var Temporary1 = xs_1778385152;
      if (ConstSet100[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'is_macro\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI637534211)); }
      result_1778385153 = Temporary1.is_macro;
      break BeforeRet;
      break;
    case 11:
      var Temporary2 = xs_1778385152;
      if (ConstSet101[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'fis_macro\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI637534211)); }
      result_1778385153 = Temporary2.fis_macro;
      break BeforeRet;
      break;
    default: 
      result_1778385153 = false;
      break BeforeRet;
      break;
    }
  } while (false);

  return result_1778385153;

}

function toBool_637535716(x_637535717) {
    var Temporary1;

  var result_637535718 = null;

    if (x_637535717) {
    Temporary1 = TrueToken_637535714;
    }
    else {
    Temporary1 = FalseToken_637535715;
    }
    
    result_637535718 = Temporary1;

  return result_637535718;

}

function concat_1778385225(seqs_1778385227) {
  var result_1778385228 = [];

    var L_1778385229 = 0;
    Label1: do {
      var seqitm_1778385242 = null;
      var seqitm_1778385242_Idx = 0;
      var i_1778387667 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_1778387667 < (seqs_1778385227).length)) break Label3;
            seqitm_1778385242 = seqs_1778385227; seqitm_1778385242_Idx = chckIndx(i_1778387667, 0, (seqs_1778385227).length - 1);
            L_1778385229 = addInt(L_1778385229, (seqitm_1778385242[seqitm_1778385242_Idx]).length);
            i_1778387667 = addInt(i_1778387667, 1);
          }
      } while (false);
    } while (false);
    result_1778385228 = new Array(chckRange(L_1778385229, 0, 2147483647)); for (var i = 0 ; i < chckRange(L_1778385229, 0, 2147483647) ; ++i) { result_1778385228[i] = null; }    var i_1778385254 = 0;
    Label4: do {
      var s_1778385258 = null;
      var s_1778385258_Idx = 0;
      var i_1778387674 = 0;
      Label5: do {
          Label6: while (true) {
          if (!(i_1778387674 < (seqs_1778385227).length)) break Label6;
            s_1778385258 = seqs_1778385227; s_1778385258_Idx = chckIndx(i_1778387674, 0, (seqs_1778385227).length - 1);
            Label7: do {
              var itm_1778385262 = null;
              var itm_1778385262_Idx = 0;
              var i_1778387671 = 0;
              var L_1778387672 = (s_1778385258[s_1778385258_Idx]).length;
              Label8: do {
                  Label9: while (true) {
                  if (!(i_1778387671 < L_1778387672)) break Label9;
                    itm_1778385262 = s_1778385258[s_1778385258_Idx]; itm_1778385262_Idx = chckIndx(i_1778387671, 0, (s_1778385258[s_1778385258_Idx]).length - 1);
                    result_1778385228[chckIndx(i_1778385254, 0, (result_1778385228).length - 1)] = itm_1778385262[itm_1778385262_Idx];
                    i_1778385254 = addInt(i_1778385254, 1);
                    i_1778387671 = addInt(i_1778387671, 1);
                    if (!(((s_1778385258[s_1778385258_Idx]).length == L_1778387672))) {
                    failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                    }
                    
                  }
              } while (false);
            } while (false);
            i_1778387674 = addInt(i_1778387674, 1);
          }
      } while (false);
    } while (false);

  return result_1778385228;

}

function cons_1778385209(xs_1778385210) {
    var Temporary1;

  var result_1778385211 = null;

    if (!(((xs_1778385210).length == 2))) {
    raiseException({message: makeNimstrLit("cons takes two arguments!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    if (!((ConstSet102[xs_1778385210[chckIndx(1, 0, (xs_1778385210).length - 1)].kind] != undefined))) {
    raiseException({message: makeNimstrLit("cons takes a list or vector as its second argument!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    var Temporary1 = xs_1778385210[chckIndx(1, 0, (xs_1778385210).length - 1)];
    if (ConstSet103[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI637534211)); }
    result_1778385211 = list_637534334(concat_1778385225([[xs_1778385210[chckIndx(0, 0, (xs_1778385210).length - 1)]], nimCopy(null, Temporary1.list, NTI1778385211)]));

  return result_1778385211;

}

function concat_1778385294(xs_1778385295) {
            var Temporary4;

  var result_1778385296 = null;

  BeforeRet: do {
    var ans_1778385301 = [];
    Label1: do {
      var x_1778385305 = null;
      var x_1778385305_Idx = 0;
      var i_1778387677 = 0;
      var L_1778387678 = (xs_1778385295).length;
      Label2: do {
          Label3: while (true) {
          if (!(i_1778387677 < L_1778387678)) break Label3;
            x_1778385305 = xs_1778385295; x_1778385305_Idx = chckIndx(i_1778387677, 0, (xs_1778385295).length - 1);
            var Temporary4 = x_1778385305[x_1778385305_Idx];
            if (ConstSet104[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI637534211)); }
            ans_1778385301 = nimCopy(null, concat_1778385225([nimCopy(null, ans_1778385301, NTI1778385282), nimCopy(null, Temporary4.list, NTI1778385288)]), NTI1778385217);
            i_1778387677 = addInt(i_1778387677, 1);
            if (!(((xs_1778385295).length == L_1778387678))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    result_1778385296 = list_637534334(ans_1778385301);
    break BeforeRet;
  } while (false);

  return result_1778385296;

}

function conj_1778385309(xs_1778385310) {
    var Temporary1;
    var Temporary5;

  var result_1778385311 = null;

  BeforeRet: do {
    if (((xs_1778385310).length < 2)) {
    raiseException({message: makeNimstrLit("conj takes at least two arguments!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    if ((xs_1778385310[chckIndx(0, 0, (xs_1778385310).length - 1)].kind == 0)) {
    var Temporary1 = xs_1778385310[chckIndx(0, 0, (xs_1778385310).length - 1)];
    if (ConstSet105[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI637534211)); }
    var lst_1778385320 = nimCopy(null, Temporary1.list, NTI637534221);
    Label2: do {
      var other_1778385339 = null;
      var other_1778385339_Idx = 0;
      var colontmp__1778387681 = [];
      colontmp__1778387681 = HEX5BHEX5D_1761607998(xs_1778385310, HEX2EHEX2E_973081741(1, 1));
      var i_1778387682 = 0;
      var L_1778387683 = (colontmp__1778387681).length;
      Label3: do {
          Label4: while (true) {
          if (!(i_1778387682 < L_1778387683)) break Label4;
            other_1778385339 = colontmp__1778387681; other_1778385339_Idx = chckIndx(i_1778387682, 0, (colontmp__1778387681).length - 1);
            lst_1778385320 = nimCopy(null, concat_1778385225([[other_1778385339[other_1778385339_Idx]], nimCopy(null, lst_1778385320, NTI1778385334)]), NTI1778385217);
            i_1778387682 = addInt(i_1778387682, 1);
            if (!(((colontmp__1778387681).length == L_1778387683))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    result_1778385311 = list_637534334(lst_1778385320);
    break BeforeRet;
    }
    else {
    if ((xs_1778385310[chckIndx(0, 0, (xs_1778385310).length - 1)].kind == 8)) {
    var Temporary5 = xs_1778385310[chckIndx(0, 0, (xs_1778385310).length - 1)];
    if (ConstSet106[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI637534211)); }
    var vec_1778385351 = nimCopy(null, Temporary5.list, NTI637534221);
    Label6: do {
      var other_1778385370 = null;
      var other_1778385370_Idx = 0;
      var colontmp__1778387686 = [];
      colontmp__1778387686 = HEX5BHEX5D_1761607998(xs_1778385310, HEX2EHEX2E_973081741(1, 1));
      var i_1778387687 = 0;
      var L_1778387688 = (colontmp__1778387686).length;
      Label7: do {
          Label8: while (true) {
          if (!(i_1778387687 < L_1778387688)) break Label8;
            other_1778385370 = colontmp__1778387686; other_1778385370_Idx = chckIndx(i_1778387687, 0, (colontmp__1778387686).length - 1);
            vec_1778385351.push(other_1778385370[other_1778385370_Idx]);;
            i_1778387687 = addInt(i_1778387687, 1);
            if (!(((colontmp__1778387686).length == L_1778387688))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    result_1778385311 = vector_637534346(vec_1778385351);
    break BeforeRet;
    }
    else {
      raiseException({message: makeNimstrLit("conj only takes sequential first arguments!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    }
  } while (false);

  return result_1778385311;

}

function seq_core_1778385376(xs_1778385377) {
      var Temporary1;
        var Temporary4;
      var Temporary11;
      var Temporary12;
    var Temporary13;

  var result_1778385378 = null;

  BeforeRet: do {
    if (!(((xs_1778385377).length == 1))) {
    raiseException({message: makeNimstrLit("seq takes only one argument!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    if ((xs_1778385377[chckIndx(0, 0, (xs_1778385377).length - 1)].kind == 3)) {
    result_1778385378 = NilToken_637535713;
    break BeforeRet;
    }
    else {
    if ((xs_1778385377[chckIndx(0, 0, (xs_1778385377).length - 1)].kind == 7)) {
      var Temporary1 = xs_1778385377[chckIndx(0, 0, (xs_1778385377).length - 1)];
      if (ConstSet107[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI637534211)); }
    if (eqStrings(Temporary1.str, [])) {
    result_1778385378 = NilToken_637535713;
    break BeforeRet;
    }
    
    Label2: do {
      Label3: do {
        var Temporary4 = xs_1778385377[chckIndx(0, 0, (xs_1778385377).length - 1)];
        if (ConstSet108[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI637534211)); }
        var HEX3Atmp_1778385404 = nimCopy(null, Temporary4.str, NTI33554439);
        var iHEX60gensym70_1778385407 = 0;
        var resultHEX60gensym70_1778385411 = newSeq_603980154(chckRange((HEX3Atmp_1778385404).length, 0, 2147483647));
        Label5: do {
          var it_1778385412 = 0;
          var i_1778387693 = 0;
          var L_1778387694 = (HEX3Atmp_1778385404).length;
          Label6: do {
              Label7: while (true) {
              if (!(i_1778387693 < L_1778387694)) break Label7;
                it_1778385412 = HEX3Atmp_1778385404[chckIndx(i_1778387693, 0, (HEX3Atmp_1778385404).length - 1)];
                resultHEX60gensym70_1778385411[chckIndx(iHEX60gensym70_1778385407, 0, (resultHEX60gensym70_1778385411).length - 1)] = toStringToken_637535701(nimCharToStr(it_1778385412));
                iHEX60gensym70_1778385407 = addInt(iHEX60gensym70_1778385407, 1);
                i_1778387693 = addInt(i_1778387693, 1);
                if (!(((HEX3Atmp_1778385404).length == L_1778387694))) {
                failedAssertImpl_218103864(makeNimstrLit("iterators.nim(258, 11) `len(a) == L` the length of the string changed while iterating over it"));
                }
                
              }
          } while (false);
        } while (false);
      } while (false);
      var HEX3Atmp_1778385475 = nimCopy(null, resultHEX60gensym70_1778385411, NTI603980047);
      var iHEX60gensym77_1778385478 = 0;
      var resultHEX60gensym77_1778385485 = newSeq_603980154(chckRange((HEX3Atmp_1778385475).length, 0, 2147483647));
      Label8: do {
        var itHEX60gensym77_1778385489 = null;
        var itHEX60gensym77_1778385489_Idx = 0;
        var i_1778387697 = 0;
        var L_1778387698 = (HEX3Atmp_1778385475).length;
        Label9: do {
            Label10: while (true) {
            if (!(i_1778387697 < L_1778387698)) break Label10;
              itHEX60gensym77_1778385489 = HEX3Atmp_1778385475; itHEX60gensym77_1778385489_Idx = chckIndx(i_1778387697, 0, (HEX3Atmp_1778385475).length - 1);
              resultHEX60gensym77_1778385485[chckIndx(iHEX60gensym77_1778385478, 0, (resultHEX60gensym77_1778385485).length - 1)] = itHEX60gensym77_1778385489[itHEX60gensym77_1778385489_Idx];
              iHEX60gensym77_1778385478 = addInt(iHEX60gensym77_1778385478, 1);
              i_1778387697 = addInt(i_1778387697, 1);
              if (!(((HEX3Atmp_1778385475).length == L_1778387698))) {
              failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while (false);
      } while (false);
    } while (false);
    result_1778385378 = list_637534334(resultHEX60gensym77_1778385485);
    break BeforeRet;
    }
    else {
    if ((xs_1778385377[chckIndx(0, 0, (xs_1778385377).length - 1)].kind == 0)) {
      var Temporary11 = xs_1778385377[chckIndx(0, 0, (xs_1778385377).length - 1)];
      if (ConstSet109[Temporary11.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary11.kind, NTI637534211)); }
    if (((Temporary11.list).length == 0)) {
    result_1778385378 = NilToken_637535713;
    break BeforeRet;
    }
    
    result_1778385378 = xs_1778385377[chckIndx(0, 0, (xs_1778385377).length - 1)];
    break BeforeRet;
    }
    else {
    if ((xs_1778385377[chckIndx(0, 0, (xs_1778385377).length - 1)].kind == 8)) {
      var Temporary12 = xs_1778385377[chckIndx(0, 0, (xs_1778385377).length - 1)];
      if (ConstSet110[Temporary12.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary12.kind, NTI637534211)); }
    if (((Temporary12.list).length == 0)) {
    result_1778385378 = NilToken_637535713;
    break BeforeRet;
    }
    
    var Temporary13 = xs_1778385377[chckIndx(0, 0, (xs_1778385377).length - 1)];
    if (ConstSet111[Temporary13.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary13.kind, NTI637534211)); }
    result_1778385378 = list_637534334(Temporary13.list);
    break BeforeRet;
    }
    else {
      raiseException({message: makeNimstrLit("seq only takes sequences or strings!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    }}}
  } while (false);

  return result_1778385378;

}

function throw_1778385509(xs_1778385510) {
    var Temporary1;

  var result_1778385511 = null;

    if (((xs_1778385510).length == 0)) {
    Temporary1 = NilToken_637535713;
    }
    else {
    Temporary1 = xs_1778385510[chckIndx(0, 0, (xs_1778385510).length - 1)];
    }
    
    raiseException({t: Temporary1, m_type: NTI637534217, parent: null, name: null, message: [], trace: [], up: null}, "MalError");

  return result_1778385511;

}

function HEX5BHEX5D_1778385545(s_1778385547, i_1778385548) {
  var result_1778385549 = null;

    result_1778385549 = s_1778385547[chckIndx(subInt((s_1778385547).length, i_1778385548), 0, (s_1778385547).length - 1)];

  return result_1778385549;

}

function apply_1778385533(xs_1778385534) {
    var Temporary1;

  var result_1778385535 = null;

  BeforeRet: do {
    if (((xs_1778385534).length < 2)) {
    raiseException({message: makeNimstrLit("apply takes at least two arguments!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    if (!((ConstSet112[xs_1778385534[chckIndx(0, 0, (xs_1778385534).length - 1)].kind] != undefined))) {
    raiseException({message: makeNimstrLit("apply\'s first argument must be a function!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    if (!((ConstSet113[HEX5BHEX5D_1778385545(xs_1778385534, 1).kind] != undefined))) {
    raiseException({message: makeNimstrLit("apply\'s last argument must be sequential!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    var Temporary1 = HEX5BHEX5D_1778385545(xs_1778385534, 1);
    if (ConstSet114[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI637534211)); }
    result_1778385535 = getFun_1778385147(xs_1778385534[chckIndx(0, 0, (xs_1778385534).length - 1)])(concat_1778385225([HEX5BHEX5D_1761607998(xs_1778385534, HEX2EHEX2E_973081741(1, 2)), nimCopy(null, Temporary1.list, NTI1778385557)]));
    break BeforeRet;
  } while (false);

  return result_1778385535;

}

function map_core_1778385582(xs_1778385583) {
      var Temporary2;

  var result_1778385584 = null;

  BeforeRet: do {
    if (!(((xs_1778385583).length == 2))) {
    raiseException({message: makeNimstrLit("map takes two arguments!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    if (!((ConstSet115[xs_1778385583[chckIndx(0, 0, (xs_1778385583).length - 1)].kind] != undefined))) {
    raiseException({message: makeNimstrLit("map\'s first argument must be a function!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    if (!((ConstSet116[HEX5BHEX5D_1778385545(xs_1778385583, 1).kind] != undefined))) {
    raiseException({message: makeNimstrLit("maps\'s second argument must be sequential!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    Label1: do {
      var Temporary2 = HEX5BHEX5D_1778385545(xs_1778385583, 1);
      if (ConstSet117[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI637534211)); }
      var HEX3Atmp_1778385630 = nimCopy(null, Temporary2.list, NTI637534221);
      var iHEX60gensym98_1778385633 = 0;
      var resultHEX60gensym98_1778385640 = newSeq_603980154(chckRange((HEX3Atmp_1778385630).length, 0, 2147483647));
      Label3: do {
        var it_1778385644 = null;
        var it_1778385644_Idx = 0;
        var i_1778387702 = 0;
        var L_1778387703 = (HEX3Atmp_1778385630).length;
        Label4: do {
            Label5: while (true) {
            if (!(i_1778387702 < L_1778387703)) break Label5;
              it_1778385644 = HEX3Atmp_1778385630; it_1778385644_Idx = chckIndx(i_1778387702, 0, (HEX3Atmp_1778385630).length - 1);
              resultHEX60gensym98_1778385640[chckIndx(iHEX60gensym98_1778385633, 0, (resultHEX60gensym98_1778385640).length - 1)] = getFun_1778385147(xs_1778385583[chckIndx(0, 0, (xs_1778385583).length - 1)])([it_1778385644[it_1778385644_Idx]]);
              iHEX60gensym98_1778385633 = addInt(iHEX60gensym98_1778385633, 1);
              i_1778387702 = addInt(i_1778387702, 1);
              if (!(((HEX3Atmp_1778385630).length == L_1778387703))) {
              failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while (false);
      } while (false);
    } while (false);
    result_1778385584 = list_637534334(resultHEX60gensym98_1778385640);
    break BeforeRet;
  } while (false);

  return result_1778385584;

}

function hashmap_core_1778385655(xs_1778385656) {
  var result_1778385657 = null;

  BeforeRet: do {
    if (!((modInt((xs_1778385656).length, 2) == 0))) {
    raiseException({message: makeNimstrLit("hash-map takes an even number of arguments!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    result_1778385657 = hashMap_637534353(xs_1778385656);
    break BeforeRet;
  } while (false);

  return result_1778385657;

}

function hashMapFromTable_637535692(table_637535693) {
  var result_637535694 = null;

    result_637535694 = {kind: 9, hashmap: nimCopy(null, table_637535693, NTI637534229), list: [], val: null, number: 0.0, str: [], fun: null, is_macro: false, ffun: null, fis_macro: false, ast: null, params: null, env: null, meta: null};

  return result_637535694;

}

function assoc_1778385662(xs_1778385663) {
    var Temporary1;
      var Temporary3;

  var result_1778385664 = null;

  BeforeRet: do {
    if (((xs_1778385663).length < 3)) {
    raiseException({message: makeNimstrLit("assoc takes at least three arguments!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    if (!((modInt((xs_1778385663).length, 2) == 1))) {
    raiseException({message: makeNimstrLit("assoc requires an even number of key-value pairs!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    if (!((xs_1778385663[chckIndx(0, 0, (xs_1778385663).length - 1)].kind == 9))) {
    raiseException({message: makeNimstrLit("assoc\'s first argument must be a hashmap!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    var Temporary1 = xs_1778385663[chckIndx(0, 0, (xs_1778385663).length - 1)];
    if (ConstSet118[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'hashmap\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI637534211)); }
    var old_1778385678 = [nimCopy(null, Temporary1.hashmap, NTI637534229)];
    var newhm_1778385694 = hashMap_637534353(HEX5BHEX5D_1761607998(xs_1778385663, HEX2EHEX2E_973081741(1, 1)));
    Label2: do {
      var key_1778385699 = [];
      var value_1778385700 = null;
      var colontmp__1778387706 = ({data: [], counter: 0});
      var Temporary3 = newhm_1778385694;
      if (ConstSet119[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'hashmap\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI637534211)); }
      colontmp__1778387706 = nimCopy(colontmp__1778387706, Temporary3.hashmap, NTI637534229);
      var L_1778387707 = len_637535859(colontmp__1778387706);
      Label4: do {
        var h_1778387709 = 0;
        var colontmp__1778387710 = 0;
        colontmp__1778387710 = (colontmp__1778387706.data).length - 1;
        var res_1778387711 = 0;
        Label5: do {
            Label6: while (true) {
            if (!(res_1778387711 <= colontmp__1778387710)) break Label6;
              h_1778387709 = res_1778387711;
              if (isFilled_671088671(colontmp__1778387706.data[chckIndx(h_1778387709, 0, (colontmp__1778387706.data).length - 1)].Field0)) {
              var colontmp__1778387714 = nimCopy(null, {Field0: nimCopy(null, colontmp__1778387706.data[chckIndx(h_1778387709, 0, (colontmp__1778387706.data).length - 1)].Field1, NTI33554439), Field1: colontmp__1778387706.data[chckIndx(h_1778387709, 0, (colontmp__1778387706.data).length - 1)].Field2}, NTI637535046);
              key_1778385699 = colontmp__1778387714["Field0"];
              value_1778385700 = colontmp__1778387714["Field1"];
              HEX5BHEX5DHEX3D_637534431(old_1778385678[0], key_1778385699, value_1778385700);
              if (!((len_637535859(colontmp__1778387706) == L_1778387707))) {
              failedAssertImpl_218103864(makeNimstrLit("tables.nim(698, 13) `len(t) == L` the length of the table changed while iterating over it"));
              }
              
              }
              
              res_1778387711 = addInt(res_1778387711, 1);
            }
        } while (false);
      } while (false);
    } while (false);
    result_1778385664 = hashMapFromTable_637535692(old_1778385678[0]);
    break BeforeRet;
  } while (false);

  return result_1778385664;

}

function isEmpty_671088668(hcode_671088669) {
  var result_671088670 = false;

    result_671088670 = (hcode_671088669 == 0);

  return result_671088670;

}

function del_1778385819(t_1778385822, key_1778385823) {
                    var Temporary6;
                    var Temporary7;
                    var Temporary8;
                      var Temporary9;
                      var Temporary10;

    var hc_1778385824 = [0];
    var i_1778385831 = rawGet_637534492(t_1778385822, key_1778385823, hc_1778385824, 0);
    var mskHEX60gensym36_1778385835 = (t_1778385822.data).length - 1;
    if ((0 <= i_1778385831)) {
    t_1778385822.counter = subInt(t_1778385822.counter, 1);
    Label1: do {
      Label2: do {
          Label3: while (true) {
          if (!true) break Label3;
            var jHEX60gensym36_1778385841 = i_1778385831;
            var rHEX60gensym36_1778385842 = jHEX60gensym36_1778385841;
            t_1778385822.data[chckIndx(i_1778385831, 0, (t_1778385822.data).length - 1)].Field0 = 0;
            t_1778385822.data[chckIndx(i_1778385831, 0, (t_1778385822.data).length - 1)].Field1 = nimCopy(null, [], NTI33554439);
            t_1778385822.data[chckIndx(i_1778385831, 0, (t_1778385822.data).length - 1)].Field2 = null;
            Label4: do {
                Label5: while (true) {
                if (!true) break Label5;
                  i_1778385831 = (addInt(i_1778385831, 1) & mskHEX60gensym36_1778385835);
                  if (isEmpty_671088668(t_1778385822.data[chckIndx(i_1778385831, 0, (t_1778385822.data).length - 1)].Field0)) {
                  break Label1;
                  }
                  
                  rHEX60gensym36_1778385842 = (t_1778385822.data[chckIndx(i_1778385831, 0, (t_1778385822.data).length - 1)].Field0 & mskHEX60gensym36_1778385835);
                    if (!(rHEX60gensym36_1778385842 <= i_1778385831)) Temporary8 = false; else {                      Temporary8 = (jHEX60gensym36_1778385841 < rHEX60gensym36_1778385842);                    }                    if (Temporary8) Temporary7 = true; else {                      if (!(jHEX60gensym36_1778385841 < rHEX60gensym36_1778385842)) Temporary9 = false; else {                        Temporary9 = (i_1778385831 < jHEX60gensym36_1778385841);                      }                      Temporary7 = Temporary9;                    }                    if (Temporary7) Temporary6 = true; else {                      if (!(i_1778385831 < jHEX60gensym36_1778385841)) Temporary10 = false; else {                        Temporary10 = (rHEX60gensym36_1778385842 <= i_1778385831);                      }                      Temporary6 = Temporary10;                    }                  if (!(Temporary6)) {
                  break Label4;
                  }
                  
                }
            } while (false);
            t_1778385822.data[chckIndx(jHEX60gensym36_1778385841, 0, (t_1778385822.data).length - 1)] = nimCopy(t_1778385822.data[chckIndx(jHEX60gensym36_1778385841, 0, (t_1778385822.data).length - 1)], t_1778385822.data[chckIndx(i_1778385831, 0, (t_1778385822.data).length - 1)], NTI637534235);
          }
      } while (false);
    } while (false);
    }
    

  
}

function dissoc_1778385747(xs_1778385748) {
    var Temporary1;

  var result_1778385749 = null;

  BeforeRet: do {
    if (((xs_1778385748).length < 2)) {
    raiseException({message: makeNimstrLit("dissoc takes at least two arguments!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    if (!((xs_1778385748[chckIndx(0, 0, (xs_1778385748).length - 1)].kind == 9))) {
    raiseException({message: makeNimstrLit("dissoc\'s first argument must be a hashmap!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    var Temporary1 = xs_1778385748[chckIndx(0, 0, (xs_1778385748).length - 1)];
    if (ConstSet120[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'hashmap\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI637534211)); }
    var old_1778385759 = [nimCopy(null, Temporary1.hashmap, NTI637534229)];
    Label2: do {
      var x_1778385778 = null;
      var x_1778385778_Idx = 0;
      var colontmp__1778387716 = [];
      colontmp__1778387716 = HEX5BHEX5D_1761607998(xs_1778385748, HEX2EHEX2E_973081741(1, 1));
      var i_1778387717 = 0;
      var L_1778387718 = (colontmp__1778387716).length;
      Label3: do {
          Label4: while (true) {
          if (!(i_1778387717 < L_1778387718)) break Label4;
            x_1778385778 = colontmp__1778387716; x_1778385778_Idx = chckIndx(i_1778387717, 0, (colontmp__1778387716).length - 1);
            del_1778385819(old_1778385759[0], toHashKey_637534349(x_1778385778[x_1778385778_Idx]));
            i_1778387717 = addInt(i_1778387717, 1);
            if (!(((colontmp__1778387716).length == L_1778387718))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    result_1778385749 = hashMapFromTable_637535692(old_1778385759[0]);
    break BeforeRet;
  } while (false);

  return result_1778385749;

}

function getOrDefault_1778386407(t_1778386410, key_1778386411, default_1778386412) {
    var Temporary1;

  var result_1778386413 = null;

    var hcHEX60gensym119_1778386416 = [0];
    var indexHEX60gensym119_1778386423 = rawGet_637534492(t_1778386410, key_1778386411, hcHEX60gensym119_1778386416, 0);
    if ((0 <= indexHEX60gensym119_1778386423)) {
    Temporary1 = t_1778386410.data[chckIndx(indexHEX60gensym119_1778386423, 0, (t_1778386410.data).length - 1)].Field2;
    }
    else {
    Temporary1 = default_1778386412;
    }
    
    result_1778386413 = Temporary1;

  return result_1778386413;

}

function get_1778386325(xs_1778386326) {
    var Temporary1;

  var result_1778386327 = null;

  BeforeRet: do {
    if (!(((xs_1778386326).length == 2))) {
    raiseException({message: makeNimstrLit("get takes two arguments!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    if ((xs_1778386326[chckIndx(0, 0, (xs_1778386326).length - 1)].kind == 3)) {
    result_1778386327 = NilToken_637535713;
    break BeforeRet;
    }
    
    if (!((xs_1778386326[chckIndx(0, 0, (xs_1778386326).length - 1)].kind == 9))) {
    raiseException({message: makeNimstrLit("get\'s first argument must be a hashmap!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    var Temporary1 = xs_1778386326[chckIndx(0, 0, (xs_1778386326).length - 1)];
    if (ConstSet121[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'hashmap\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI637534211)); }
    result_1778386327 = getOrDefault_1778386407(Temporary1.hashmap, toHashKey_637534349(xs_1778386326[chckIndx(1, 0, (xs_1778386326).length - 1)]), NilToken_637535713);
    break BeforeRet;
  } while (false);

  return result_1778386327;

}

function contains_core_1778386477(xs_1778386478) {
    var Temporary1;

  var result_1778386479 = null;

  BeforeRet: do {
    if (!(((xs_1778386478).length == 2))) {
    raiseException({message: makeNimstrLit("contains takes two arguments!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    if ((xs_1778386478[chckIndx(0, 0, (xs_1778386478).length - 1)].kind == 3)) {
    result_1778386479 = FalseToken_637535715;
    break BeforeRet;
    }
    
    if (!((xs_1778386478[chckIndx(0, 0, (xs_1778386478).length - 1)].kind == 9))) {
    raiseException({message: makeNimstrLit("contains\'s first argument must be a hashmap!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    var Temporary1 = xs_1778386478[chckIndx(0, 0, (xs_1778386478).length - 1)];
    if (ConstSet122[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'hashmap\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI637534211)); }
    result_1778386479 = toBool_637535716(hasKey_637536136(Temporary1.hashmap, toHashKey_637534349(xs_1778386478[chckIndx(1, 0, (xs_1778386478).length - 1)])));
    break BeforeRet;
  } while (false);

  return result_1778386479;

}

function map_1778386786(s_1778386789, op_1778386791) {
  var result_1778386792 = [];

    result_1778386792 = new Array(chckRange((s_1778386789).length, 0, 2147483647)); for (var i = 0 ; i < chckRange((s_1778386789).length, 0, 2147483647) ; ++i) { result_1778386792[i] = null; }    Label1: do {
      var i_1778386807 = 0;
      var colontmp__1778387735 = 0;
      colontmp__1778387735 = (s_1778386789).length;
      var i_1778387736 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_1778387736 < colontmp__1778387735)) break Label3;
            i_1778386807 = i_1778387736;
            result_1778386792[chckIndx(i_1778386807, 0, (result_1778386792).length - 1)] = op_1778386791(s_1778386789[chckIndx(i_1778386807, 0, (s_1778386789).length - 1)]);
            i_1778387736 = addInt(i_1778387736, 1);
          }
      } while (false);
    } while (false);

  return result_1778386792;

}

function keys_core_1778386538(xs_1778386539) {
      var Temporary2;

  var result_1778386540 = null;

  BeforeRet: do {
    if (!(((xs_1778386539).length == 1))) {
    raiseException({message: makeNimstrLit("keys takes one argument!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    if (!((xs_1778386539[chckIndx(0, 0, (xs_1778386539).length - 1)].kind == 9))) {
    raiseException({message: makeNimstrLit("keys\'s first argument must be a hashmap!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    var resultHEX60gensym131_1778386779 = [];
    Label1: do {
      var xHEX60gensym131_1778386780 = null;
      var xHEX60gensym131_1778386780_Idx = 0;
      var colontmp__1778387723 = ({data: [], counter: 0});
      var Temporary2 = xs_1778386539[chckIndx(0, 0, (xs_1778386539).length - 1)];
      if (ConstSet123[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'hashmap\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI637534211)); }
      colontmp__1778387723 = nimCopy(colontmp__1778387723, Temporary2.hashmap, NTI637534229);
      var L_1778387728 = len_637535859(colontmp__1778387723);
      Label3: do {
        var h_1778387730 = 0;
        var colontmp__1778387731 = 0;
        colontmp__1778387731 = (colontmp__1778387723.data).length - 1;
        var res_1778387732 = 0;
        Label4: do {
            Label5: while (true) {
            if (!(res_1778387732 <= colontmp__1778387731)) break Label5;
              h_1778387730 = res_1778387732;
              if (isFilled_671088671(colontmp__1778387723.data[chckIndx(h_1778387730, 0, (colontmp__1778387723.data).length - 1)].Field0)) {
              xHEX60gensym131_1778386780 = colontmp__1778387723.data[chckIndx(h_1778387730, 0, (colontmp__1778387723.data).length - 1)]; xHEX60gensym131_1778386780_Idx = "Field1";
              var Temporary6 = nimCopy(null, xHEX60gensym131_1778386780[xHEX60gensym131_1778386780_Idx], NTI33554439);
              resultHEX60gensym131_1778386779.push(Temporary6);;
              if (!((len_637535859(colontmp__1778387723) == L_1778387728))) {
              failedAssertImpl_218103864(makeNimstrLit("tables.nim(741, 13) `len(t) == L` the length of the table changed while iterating over it"));
              }
              
              }
              
              res_1778387732 = addInt(res_1778387732, 1);
            }
        } while (false);
      } while (false);
    } while (false);
    result_1778386540 = list_637534334(map_1778386786(resultHEX60gensym131_1778386779, toStringToken_637535701));
    break BeforeRet;
  } while (false);

  return result_1778386540;

}

function vals_core_1778386826(xs_1778386827) {
      var Temporary2;

  var result_1778386828 = null;

  BeforeRet: do {
    if (!(((xs_1778386827).length == 1))) {
    raiseException({message: makeNimstrLit("vals takes one argument!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    if (!((xs_1778386827[chckIndx(0, 0, (xs_1778386827).length - 1)].kind == 9))) {
    raiseException({message: makeNimstrLit("vals\'s first argument must be a hashmap!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    var resultHEX60gensym138_1778387067 = [];
    Label1: do {
      var xHEX60gensym138_1778387068 = null;
      var xHEX60gensym138_1778387068_Idx = 0;
      var colontmp__1778387739 = ({data: [], counter: 0});
      var Temporary2 = xs_1778386827[chckIndx(0, 0, (xs_1778386827).length - 1)];
      if (ConstSet124[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'hashmap\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI637534211)); }
      colontmp__1778387739 = nimCopy(colontmp__1778387739, Temporary2.hashmap, NTI637534229);
      var L_1778387744 = len_637535859(colontmp__1778387739);
      Label3: do {
        var h_1778387746 = 0;
        var colontmp__1778387747 = 0;
        colontmp__1778387747 = (colontmp__1778387739.data).length - 1;
        var res_1778387748 = 0;
        Label4: do {
            Label5: while (true) {
            if (!(res_1778387748 <= colontmp__1778387747)) break Label5;
              h_1778387746 = res_1778387748;
              if (isFilled_671088671(colontmp__1778387739.data[chckIndx(h_1778387746, 0, (colontmp__1778387739.data).length - 1)].Field0)) {
              xHEX60gensym138_1778387068 = colontmp__1778387739.data[chckIndx(h_1778387746, 0, (colontmp__1778387739.data).length - 1)]; xHEX60gensym138_1778387068_Idx = "Field2";
              resultHEX60gensym138_1778387067.push(xHEX60gensym138_1778387068[xHEX60gensym138_1778387068_Idx]);;
              if (!((len_637535859(colontmp__1778387739) == L_1778387744))) {
              failedAssertImpl_218103864(makeNimstrLit("tables.nim(762, 13) `len(t) == L` the length of the table changed while iterating over it"));
              }
              
              }
              
              res_1778387748 = addInt(res_1778387748, 1);
            }
        } while (false);
      } while (false);
    } while (false);
    result_1778386828 = list_637534334(resultHEX60gensym138_1778387067);
    break BeforeRet;
  } while (false);

  return result_1778386828;

}

function toFloat_33556001(i_33556002) {
  var result_33556003 = 0.0;

    result_33556003 = i_33556002;

  return result_33556003;

}

function HEX2F_33557576(x_33557577, y_33557578) {
  var result_33557579 = 0.0;

    result_33557579 = (toFloat_33556001(x_33557577) / toFloat_33556001(y_33557578));

  return result_33557579;

}

function epochTime_1795165502() {
  var result_1795165503 = 0.0;

    result_1795165503 = HEX2F_33557576(new Date().getTime(), 1000);

  return result_1795165503;

}

function time_ms_1778387073(xs_1778387074) {
  var result_1778387075 = null;

    result_1778387075 = number_637535695(round_1744830510((epochTime_1795165502() * 1000.0)));

  return result_1778387075;

}

function meta_1778387079(xs_1778387080) {
    var Temporary1;

  var result_1778387081 = null;

    if (!(((xs_1778387080).length == 1))) {
    raiseException({message: makeNimstrLit("meta takes one argument!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    result_1778387081 = xs_1778387080[chckIndx(0, 0, (xs_1778387080).length - 1)].meta;
    if ((result_1778387081 == null)) {
    Temporary1 = NilToken_637535713;
    }
    else {
    Temporary1 = result_1778387081;
    }
    
    result_1778387081 = Temporary1;

  return result_1778387081;

}

function with_meta_1778387089(xs_1778387090) {
  var result_1778387091 = null;

    if (!(((xs_1778387090).length == 2))) {
    raiseException({message: makeNimstrLit("with-meta takes two arguments!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    result_1778387091 = ({kind: 0, list: [], val: null, number: 0.0, str: [], hashmap: ({data: [], counter: 0}), fun: null, is_macro: false, ffun: null, fis_macro: false, ast: null, params: null, env: null, meta: null});
    result_1778387091 = nimCopy(result_1778387091, xs_1778387090[chckIndx(0, 0, (xs_1778387090).length - 1)], NTI637534220);
    result_1778387091.meta = xs_1778387090[chckIndx(1, 0, (xs_1778387090).length - 1)];

  return result_1778387091;

}

function HEX3Aanonymous_1778387100(xsHEX60gensym143_1778387101) {
    var Temporary1;
    var Temporary2;

  var result_1778387102 = null;

    var Temporary1 = xsHEX60gensym143_1778387101[chckIndx(0, 0, (xsHEX60gensym143_1778387101).length - 1)];
    if (ConstSet1[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'number\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI637534211)); }
    var Temporary2 = xsHEX60gensym143_1778387101[chckIndx(1, 0, (xsHEX60gensym143_1778387101).length - 1)];
    if (ConstSet3[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'number\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI637534211)); }
    result_1778387102 = number_637535695((Temporary1.number + Temporary2.number));

  return result_1778387102;

}

function HEX3Aanonymous_1778387104(xsHEX60gensym144_1778387105) {
    var Temporary1;
    var Temporary2;

  var result_1778387106 = null;

    var Temporary1 = xsHEX60gensym144_1778387105[chckIndx(0, 0, (xsHEX60gensym144_1778387105).length - 1)];
    if (ConstSet4[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'number\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI637534211)); }
    var Temporary2 = xsHEX60gensym144_1778387105[chckIndx(1, 0, (xsHEX60gensym144_1778387105).length - 1)];
    if (ConstSet5[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'number\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI637534211)); }
    result_1778387106 = number_637535695((Temporary1.number - Temporary2.number));

  return result_1778387106;

}

function HEX3Aanonymous_1778387108(xsHEX60gensym145_1778387109) {
    var Temporary1;
    var Temporary2;

  var result_1778387110 = null;

    var Temporary1 = xsHEX60gensym145_1778387109[chckIndx(0, 0, (xsHEX60gensym145_1778387109).length - 1)];
    if (ConstSet6[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'number\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI637534211)); }
    var Temporary2 = xsHEX60gensym145_1778387109[chckIndx(1, 0, (xsHEX60gensym145_1778387109).length - 1)];
    if (ConstSet7[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'number\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI637534211)); }
    result_1778387110 = number_637535695((Temporary1.number * Temporary2.number));

  return result_1778387110;

}

function HEX3Aanonymous_1778387112(xsHEX60gensym146_1778387113) {
    var Temporary1;
    var Temporary2;

  var result_1778387114 = null;

    var Temporary1 = xsHEX60gensym146_1778387113[chckIndx(0, 0, (xsHEX60gensym146_1778387113).length - 1)];
    if (ConstSet8[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'number\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI637534211)); }
    var Temporary2 = xsHEX60gensym146_1778387113[chckIndx(1, 0, (xsHEX60gensym146_1778387113).length - 1)];
    if (ConstSet9[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'number\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI637534211)); }
    result_1778387114 = number_637535695((Temporary1.number / Temporary2.number));

  return result_1778387114;

}

function HEX3Aanonymous_1778387116(xsHEX60gensym147_1778387117) {
      var Temporary1;
      var Temporary2;

  var result_1778387118 = null;

  BeforeRet: do {
      var Temporary1 = xsHEX60gensym147_1778387117[chckIndx(0, 0, (xsHEX60gensym147_1778387117).length - 1)];
      if (ConstSet10[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'number\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI637534211)); }
      var Temporary2 = xsHEX60gensym147_1778387117[chckIndx(1, 0, (xsHEX60gensym147_1778387117).length - 1)];
      if (ConstSet11[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'number\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI637534211)); }
    if ((Temporary1.number < Temporary2.number)) {
    result_1778387118 = TrueToken_637535714;
    break BeforeRet;
    }
    else {
      result_1778387118 = FalseToken_637535715;
      break BeforeRet;
    }
    
  } while (false);

  return result_1778387118;

}

function HEX3Aanonymous_1778387120(xsHEX60gensym148_1778387121) {
      var Temporary1;
      var Temporary2;

  var result_1778387122 = null;

  BeforeRet: do {
      var Temporary1 = xsHEX60gensym148_1778387121[chckIndx(1, 0, (xsHEX60gensym148_1778387121).length - 1)];
      if (ConstSet12[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'number\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI637534211)); }
      var Temporary2 = xsHEX60gensym148_1778387121[chckIndx(0, 0, (xsHEX60gensym148_1778387121).length - 1)];
      if (ConstSet13[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'number\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI637534211)); }
    if ((Temporary1.number < Temporary2.number)) {
    result_1778387122 = TrueToken_637535714;
    break BeforeRet;
    }
    else {
      result_1778387122 = FalseToken_637535715;
      break BeforeRet;
    }
    
  } while (false);

  return result_1778387122;

}

function HEX3Aanonymous_1778387124(xsHEX60gensym150_1778387125) {
      var Temporary1;
      var Temporary2;

  var result_1778387126 = null;

  BeforeRet: do {
      var Temporary1 = xsHEX60gensym150_1778387125[chckIndx(0, 0, (xsHEX60gensym150_1778387125).length - 1)];
      if (ConstSet14[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'number\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI637534211)); }
      var Temporary2 = xsHEX60gensym150_1778387125[chckIndx(1, 0, (xsHEX60gensym150_1778387125).length - 1)];
      if (ConstSet15[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'number\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI637534211)); }
    if ((Temporary1.number <= Temporary2.number)) {
    result_1778387126 = TrueToken_637535714;
    break BeforeRet;
    }
    else {
      result_1778387126 = FalseToken_637535715;
      break BeforeRet;
    }
    
  } while (false);

  return result_1778387126;

}

function HEX3Aanonymous_1778387128(xsHEX60gensym151_1778387129) {
      var Temporary1;
      var Temporary2;

  var result_1778387130 = null;

  BeforeRet: do {
      var Temporary1 = xsHEX60gensym151_1778387129[chckIndx(1, 0, (xsHEX60gensym151_1778387129).length - 1)];
      if (ConstSet16[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'number\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI637534211)); }
      var Temporary2 = xsHEX60gensym151_1778387129[chckIndx(0, 0, (xsHEX60gensym151_1778387129).length - 1)];
      if (ConstSet17[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'number\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI637534211)); }
    if ((Temporary1.number <= Temporary2.number)) {
    result_1778387130 = TrueToken_637535714;
    break BeforeRet;
    }
    else {
      result_1778387130 = FalseToken_637535715;
      break BeforeRet;
    }
    
  } while (false);

  return result_1778387130;

}

function HEX3Aanonymous_1778387131(xs_1778387132) {
  var result_1778387133 = null;

    result_1778387133 = list_637534334(xs_1778387132);

  return result_1778387133;

}

function HEX3Aanonymous_1778387134(xs_1778387135) {
    var Temporary1;
      var Temporary2;
    var Temporary3;

  var result_1778387136 = null;

      if (!((xs_1778387135).length == 1)) Temporary2 = false; else {        Temporary2 = (ConstSet82[xs_1778387135[chckIndx(0, 0, (xs_1778387135).length - 1)].kind] != undefined);      }    if (Temporary2) {
    var Temporary3 = xs_1778387135[chckIndx(0, 0, (xs_1778387135).length - 1)];
    if (ConstSet83[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI637534211)); }
    Temporary1 = vector_637534346(Temporary3.list);
    }
    else {
      raiseException({message: makeNimstrLit("vec only takes a single list or vector argument!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    result_1778387136 = Temporary1;

  return result_1778387136;

}

function HEX3Aanonymous_1778387145(xs_1778387146) {
  var result_1778387147 = null;

    result_1778387147 = vector_637534346(xs_1778387146);

  return result_1778387147;

}

function HEX3Aanonymous_1778387148(xs_1778387149) {
  var result_1778387150 = null;

  BeforeRet: do {
    if (!(((xs_1778387149).length == 1))) {
    raiseException({message: makeNimstrLit("atom takes only one argument!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    result_1778387150 = atom_637534331(xs_1778387149[chckIndx(0, 0, (xs_1778387149).length - 1)]);
    break BeforeRet;
  } while (false);

  return result_1778387150;

}

function HEX3Aanonymous_1778387155(xs_1778387156) {
    var Temporary1;

  var result_1778387157 = null;

    if (!(((xs_1778387156).length == 1))) {
    raiseException({message: makeNimstrLit("symbol takes only one argument!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    if (!((xs_1778387156[chckIndx(0, 0, (xs_1778387156).length - 1)].kind == 7))) {
    raiseException({message: makeNimstrLit("symbol only takes a string argument!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    var Temporary1 = xs_1778387156[chckIndx(0, 0, (xs_1778387156).length - 1)];
    if (ConstSet91[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI637534211)); }
    result_1778387157 = symbol_637535704(Temporary1.str);

  return result_1778387157;

}

function HEX3Aanonymous_1778387167(xs_1778387168) {
      var Temporary1;
      var Temporary2;

  var result_1778387169 = null;

  BeforeRet: do {
    if (!(((xs_1778387168).length == 1))) {
    raiseException({message: makeNimstrLit("keyword takes only one argument!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    if ((xs_1778387168[chckIndx(0, 0, (xs_1778387168).length - 1)].kind == 7)) {
      var Temporary1 = xs_1778387168[chckIndx(0, 0, (xs_1778387168).length - 1)];
      if (ConstSet92[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI637534211)); }
    if (isKeywordString_637535710(Temporary1.str)) {
    result_1778387169 = xs_1778387168[chckIndx(0, 0, (xs_1778387168).length - 1)];
    break BeforeRet;
    }
    else {
      var Temporary2 = xs_1778387168[chckIndx(0, 0, (xs_1778387168).length - 1)];
      if (ConstSet93[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI637534211)); }
      result_1778387169 = keyword_637535707((makeNimstrLit(":") || []).concat(Temporary2.str || []));
      break BeforeRet;
    }
    
    }
    else {
      raiseException({message: makeNimstrLit("keyword only takes strings and keywords!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
  } while (false);

  return result_1778387169;

}

function HEX3Aanonymous_1778387179(xs_1778387180) {
    var Temporary1;

  var result_1778387181 = null;

  BeforeRet: do {
    if (!(((xs_1778387180).length == 1))) {
    raiseException({message: makeNimstrLit("list? takes only one argument!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    if ((xs_1778387180[chckIndx(0, 0, (xs_1778387180).length - 1)].kind == 0)) {
    Temporary1 = TrueToken_637535714;
    }
    else {
    Temporary1 = FalseToken_637535715;
    }
    
    result_1778387181 = Temporary1;
    break BeforeRet;
  } while (false);

  return result_1778387181;

}

function HEX3Aanonymous_1778387190(xs_1778387191) {
    var Temporary1;

  var result_1778387192 = null;

  BeforeRet: do {
    if (!(((xs_1778387191).length == 1))) {
    raiseException({message: makeNimstrLit("vector? takes only one argument!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    if ((xs_1778387191[chckIndx(0, 0, (xs_1778387191).length - 1)].kind == 8)) {
    Temporary1 = TrueToken_637535714;
    }
    else {
    Temporary1 = FalseToken_637535715;
    }
    
    result_1778387192 = Temporary1;
    break BeforeRet;
  } while (false);

  return result_1778387192;

}

function HEX3Aanonymous_1778387201(xs_1778387202) {
    var Temporary1;

  var result_1778387203 = null;

  BeforeRet: do {
    if (!(((xs_1778387202).length == 1))) {
    raiseException({message: makeNimstrLit("atom? takes only one argument!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    if ((xs_1778387202[chckIndx(0, 0, (xs_1778387202).length - 1)].kind == 1)) {
    Temporary1 = TrueToken_637535714;
    }
    else {
    Temporary1 = FalseToken_637535715;
    }
    
    result_1778387203 = Temporary1;
    break BeforeRet;
  } while (false);

  return result_1778387203;

}

function HEX3Aanonymous_1778387212(xs_1778387213) {
    var Temporary1;

  var result_1778387214 = null;

  BeforeRet: do {
    if (!(((xs_1778387213).length == 1))) {
    raiseException({message: makeNimstrLit("nil? takes only one argument!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    if ((xs_1778387213[chckIndx(0, 0, (xs_1778387213).length - 1)].kind == 3)) {
    Temporary1 = TrueToken_637535714;
    }
    else {
    Temporary1 = FalseToken_637535715;
    }
    
    result_1778387214 = Temporary1;
    break BeforeRet;
  } while (false);

  return result_1778387214;

}

function HEX3Aanonymous_1778387223(xs_1778387224) {
    var Temporary1;

  var result_1778387225 = null;

  BeforeRet: do {
    if (!(((xs_1778387224).length == 1))) {
    raiseException({message: makeNimstrLit("true? takes only one argument!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    if ((xs_1778387224[chckIndx(0, 0, (xs_1778387224).length - 1)].kind == 4)) {
    Temporary1 = TrueToken_637535714;
    }
    else {
    Temporary1 = FalseToken_637535715;
    }
    
    result_1778387225 = Temporary1;
    break BeforeRet;
  } while (false);

  return result_1778387225;

}

function HEX3Aanonymous_1778387234(xs_1778387235) {
    var Temporary1;

  var result_1778387236 = null;

  BeforeRet: do {
    if (!(((xs_1778387235).length == 1))) {
    raiseException({message: makeNimstrLit("false? takes only one argument!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    if ((xs_1778387235[chckIndx(0, 0, (xs_1778387235).length - 1)].kind == 5)) {
    Temporary1 = TrueToken_637535714;
    }
    else {
    Temporary1 = FalseToken_637535715;
    }
    
    result_1778387236 = Temporary1;
    break BeforeRet;
  } while (false);

  return result_1778387236;

}

function HEX3Aanonymous_1778387245(xs_1778387246) {
      var Temporary1;
        var Temporary2;

  var result_1778387247 = null;

  BeforeRet: do {
    if (!(((xs_1778387246).length == 1))) {
    raiseException({message: makeNimstrLit("keyword? takes only one argument!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
      if (!(xs_1778387246[chckIndx(0, 0, (xs_1778387246).length - 1)].kind == 7)) Temporary1 = false; else {        var Temporary2 = xs_1778387246[chckIndx(0, 0, (xs_1778387246).length - 1)];
        if (ConstSet96[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI637534211)); }
        Temporary1 = isKeywordString_637535710(Temporary2.str);      }    if (Temporary1) {
    result_1778387247 = TrueToken_637535714;
    break BeforeRet;
    }
    
    result_1778387247 = FalseToken_637535715;
    break BeforeRet;
  } while (false);

  return result_1778387247;

}

function HEX3Aanonymous_1778387256(xs_1778387257) {
    var Temporary1;

  var result_1778387258 = null;

  BeforeRet: do {
    if (!(((xs_1778387257).length == 1))) {
    raiseException({message: makeNimstrLit("symbol? takes only one argument!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    if ((xs_1778387257[chckIndx(0, 0, (xs_1778387257).length - 1)].kind == 6)) {
    Temporary1 = TrueToken_637535714;
    }
    else {
    Temporary1 = FalseToken_637535715;
    }
    
    result_1778387258 = Temporary1;
    break BeforeRet;
  } while (false);

  return result_1778387258;

}

function HEX3Aanonymous_1778387267(xs_1778387268) {
    var Temporary1;

  var result_1778387269 = null;

  BeforeRet: do {
    if (!(((xs_1778387268).length == 1))) {
    raiseException({message: makeNimstrLit("sequential? takes only one argument!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    if ((ConstSet97[xs_1778387268[chckIndx(0, 0, (xs_1778387268).length - 1)].kind] != undefined)) {
    Temporary1 = TrueToken_637535714;
    }
    else {
    Temporary1 = FalseToken_637535715;
    }
    
    result_1778387269 = Temporary1;
    break BeforeRet;
  } while (false);

  return result_1778387269;

}

function HEX3Aanonymous_1778387278(xs_1778387279) {
    var Temporary1;

  var result_1778387280 = null;

  BeforeRet: do {
    if (!(((xs_1778387279).length == 1))) {
    raiseException({message: makeNimstrLit("map? takes only one argument!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    if ((xs_1778387279[chckIndx(0, 0, (xs_1778387279).length - 1)].kind == 9)) {
    Temporary1 = TrueToken_637535714;
    }
    else {
    Temporary1 = FalseToken_637535715;
    }
    
    result_1778387280 = Temporary1;
    break BeforeRet;
  } while (false);

  return result_1778387280;

}

function HEX3Aanonymous_1778387289(xs_1778387290) {
    var Temporary1;
      var Temporary2;
        var Temporary3;

  var result_1778387291 = null;

  BeforeRet: do {
    if (!(((xs_1778387290).length == 1))) {
    raiseException({message: makeNimstrLit("string? takes only one argument!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
      if (!(xs_1778387290[chckIndx(0, 0, (xs_1778387290).length - 1)].kind == 7)) Temporary2 = false; else {        var Temporary3 = xs_1778387290[chckIndx(0, 0, (xs_1778387290).length - 1)];
        if (ConstSet98[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI637534211)); }
        Temporary2 = !(isKeywordString_637535710(Temporary3.str));      }    if (Temporary2) {
    Temporary1 = TrueToken_637535714;
    }
    else {
    Temporary1 = FalseToken_637535715;
    }
    
    result_1778387291 = Temporary1;
    break BeforeRet;
  } while (false);

  return result_1778387291;

}

function HEX3Aanonymous_1778387300(xs_1778387301) {
    var Temporary1;

  var result_1778387302 = null;

  BeforeRet: do {
    if (!(((xs_1778387301).length == 1))) {
    raiseException({message: makeNimstrLit("number? takes only one argument!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    if ((xs_1778387301[chckIndx(0, 0, (xs_1778387301).length - 1)].kind == 2)) {
    Temporary1 = TrueToken_637535714;
    }
    else {
    Temporary1 = FalseToken_637535715;
    }
    
    result_1778387302 = Temporary1;
    break BeforeRet;
  } while (false);

  return result_1778387302;

}

function HEX3Aanonymous_1778387311(xs_1778387312) {
    var Temporary1;
      var Temporary2;

  var result_1778387313 = null;

  BeforeRet: do {
    if (!(((xs_1778387312).length == 1))) {
    raiseException({message: makeNimstrLit("fn? takes only one argument!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
      if (!(ConstSet99[xs_1778387312[chckIndx(0, 0, (xs_1778387312).length - 1)].kind] != undefined)) Temporary2 = false; else {        Temporary2 = !(funIsMacro_1778385151(xs_1778387312[chckIndx(0, 0, (xs_1778387312).length - 1)]));      }    if (Temporary2) {
    Temporary1 = TrueToken_637535714;
    }
    else {
    Temporary1 = FalseToken_637535715;
    }
    
    result_1778387313 = Temporary1;
    break BeforeRet;
  } while (false);

  return result_1778387313;

}

function HEX3Aanonymous_1778387322(xs_1778387323) {
  var result_1778387324 = null;

  BeforeRet: do {
    if (!(((xs_1778387323).length == 1))) {
    raiseException({message: makeNimstrLit("macro? takes only one argument!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    result_1778387324 = toBool_637535716(funIsMacro_1778385151(xs_1778387323[chckIndx(0, 0, (xs_1778387323).length - 1)]));
    break BeforeRet;
  } while (false);

  return result_1778387324;

}
var ns_1778387329 = [nimCopy(null, {Field0: makeNimstrLit("+"), Field1: fun_637534264(HEX3Aanonymous_1778387100, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("-"), Field1: fun_637534264(HEX3Aanonymous_1778387104, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("*"), Field1: fun_637534264(HEX3Aanonymous_1778387108, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("/"), Field1: fun_637534264(HEX3Aanonymous_1778387112, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("<"), Field1: fun_637534264(HEX3Aanonymous_1778387116, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit(">"), Field1: fun_637534264(HEX3Aanonymous_1778387120, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("<="), Field1: fun_637534264(HEX3Aanonymous_1778387124, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit(">="), Field1: fun_637534264(HEX3Aanonymous_1778387128, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("round"), Field1: fun_637534264(round_1778384995, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("not"), Field1: fun_637534264(not_impl_1778384946, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("pr-str"), Field1: fun_637534264(pr_str_1778384910, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("str"), Field1: fun_637534264(str_1778384921, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("prn"), Field1: fun_637534264(prn_1778384932, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("println"), Field1: fun_637534264(println_1778384935, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("list"), Field1: fun_637534264(HEX3Aanonymous_1778387131, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("count"), Field1: fun_637534264(count_1778384976, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("nth"), Field1: fun_637534264(nth_1778385010, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("first"), Field1: fun_637534264(first_1778385039, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("rest"), Field1: fun_637534264(rest_1778385059, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("="), Field1: fun_637534264(eq_1778385102, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("read-string"), Field1: fun_637534264(read_string_1778385109, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("slurp"), Field1: fun_637534264(slurp_1778385116, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("vec"), Field1: fun_637534264(HEX3Aanonymous_1778387134, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("vector"), Field1: fun_637534264(HEX3Aanonymous_1778387145, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("atom"), Field1: fun_637534264(HEX3Aanonymous_1778387148, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("deref"), Field1: fun_637534264(deref_1778385123, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("reset!"), Field1: fun_637534264(reset_1778385135, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("swap!"), Field1: fun_637534264(swap_1778385157, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("symbol"), Field1: fun_637534264(HEX3Aanonymous_1778387155, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("keyword"), Field1: fun_637534264(HEX3Aanonymous_1778387167, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("list?"), Field1: fun_637534264(HEX3Aanonymous_1778387179, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("empty?"), Field1: fun_637534264(empty_1778384957, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("vector?"), Field1: fun_637534264(HEX3Aanonymous_1778387190, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("atom?"), Field1: fun_637534264(HEX3Aanonymous_1778387201, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("nil?"), Field1: fun_637534264(HEX3Aanonymous_1778387212, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("true?"), Field1: fun_637534264(HEX3Aanonymous_1778387223, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("false?"), Field1: fun_637534264(HEX3Aanonymous_1778387234, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("keyword?"), Field1: fun_637534264(HEX3Aanonymous_1778387245, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("symbol?"), Field1: fun_637534264(HEX3Aanonymous_1778387256, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("sequential?"), Field1: fun_637534264(HEX3Aanonymous_1778387267, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("map?"), Field1: fun_637534264(HEX3Aanonymous_1778387278, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("string?"), Field1: fun_637534264(HEX3Aanonymous_1778387289, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("number?"), Field1: fun_637534264(HEX3Aanonymous_1778387300, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("fn?"), Field1: fun_637534264(HEX3Aanonymous_1778387311, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("macro?"), Field1: fun_637534264(HEX3Aanonymous_1778387322, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("cons"), Field1: fun_637534264(cons_1778385209, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("concat"), Field1: fun_637534264(concat_1778385294, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("conj"), Field1: fun_637534264(conj_1778385309, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("seq"), Field1: fun_637534264(seq_core_1778385376, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("throw"), Field1: fun_637534264(throw_1778385509, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("apply"), Field1: fun_637534264(apply_1778385533, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("map"), Field1: fun_637534264(map_core_1778385582, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("hash-map"), Field1: fun_637534264(hashmap_core_1778385655, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("assoc"), Field1: fun_637534264(assoc_1778385662, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("dissoc"), Field1: fun_637534264(dissoc_1778385747, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("get"), Field1: fun_637534264(get_1778386325, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("contains?"), Field1: fun_637534264(contains_core_1778386477, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("keys"), Field1: fun_637534264(keys_core_1778386538, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("vals"), Field1: fun_637534264(vals_core_1778386826, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("time-ms"), Field1: fun_637534264(time_ms_1778387073, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("meta"), Field1: fun_637534264(meta_1778387079, false)}, NTI1778386429), nimCopy(null, {Field0: makeNimstrLit("with-meta"), Field1: fun_637534264(with_meta_1778387089, false)}, NTI1778386429)];

function newEnv_1761607933(parent_1761607934, binds_1761607939, exprs_1761607940) {
              var Temporary4;
            var Temporary5;
              var Temporary6;

  var result_1761607941 = null;

    result_1761607941 = {outer: parent_1761607934, data: initTable_637534362(32)};
    Label1: do {
      var i_1761607977 = 0;
      var x_1761607978 = null;
      var i_469762666 = 0;
      var L_469762667 = (binds_1761607939).length;
      Label2: do {
          Label3: while (true) {
          if (!(i_469762666 < L_469762667)) break Label3;
            i_1761607977 = i_469762666;
            x_1761607978 = binds_1761607939[chckIndx(i_469762666, 0, (binds_1761607939).length - 1)];
            if (!((x_1761607978.kind == 6))) {
            raiseException({message: makeNimstrLit("Can only bind to keywords!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
            }
            
              var Temporary4 = x_1761607978;
              if (ConstSet125[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI637534211)); }
            if (eqStrings(Temporary4.str, makeNimstrLit("&"))) {
            var Temporary5 = binds_1761607939[chckIndx(addInt(i_1761607977, 1), 0, (binds_1761607939).length - 1)];
            if (ConstSet126[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI637534211)); }
            HEX5BHEX5DHEX3D_637534431(result_1761607941.data, Temporary5.str, list_637534334(HEX5BHEX5D_1761607998(exprs_1761607940, HEX2EHEX2E_973081741(i_1761607977, 1))));
            break Label1;
            }
            else {
              var Temporary6 = binds_1761607939[chckIndx(i_1761607977, 0, (binds_1761607939).length - 1)];
              if (ConstSet127[Temporary6.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary6.kind, NTI637534211)); }
            HEX5BHEX5DHEX3D_637534431(result_1761607941.data, Temporary6.str, exprs_1761607940[chckIndx(i_1761607977, 0, (exprs_1761607940).length - 1)]);
            }
            
            i_469762666 = addInt(i_469762666, 1);
            if (!(((binds_1761607939).length == L_469762667))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(173, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);

  return result_1761607941;

}

function set_1761607687(e_1761607688, key_1761607689, value_1761607690) {
    HEX5BHEX5DHEX3D_637534431(e_1761607688.data, key_1761607689, value_1761607690);

  
}

function find_1761607737(e_1761607738, key_1761607739) {
  var result_1761607740 = null;

  BeforeRet: do {
    if (hasKey_637536136(e_1761607738.data, key_1761607739)) {
    result_1761607740 = e_1761607738;
    break BeforeRet;
    }
    else {
    if (!((e_1761607738.outer == null))) {
    result_1761607740 = find_1761607737(e_1761607738.outer, key_1761607739);
    break BeforeRet;
    }
    }
  } while (false);

  return result_1761607740;

}

function raiseKeyError_620757492(key_620757494) {
    raiseException({message: (makeNimstrLit("key not found: ") || []).concat(key_620757494 || []), parent: null, m_type: NTI33555126, name: null, trace: [], up: null}, "KeyError");

  
}

function HEX5BHEX5D_1761607854(t_1761607857, key_1761607858) {
  var result_1761607859 = null;
  var result_1761607859_Idx = 0;

    var hcHEX60gensym22_1761607860 = [0];
    var indexHEX60gensym22_1761607867 = rawGet_637534492(t_1761607857, key_1761607858, hcHEX60gensym22_1761607860, 0);
    if ((0 <= indexHEX60gensym22_1761607867)) {
    result_1761607859 = t_1761607857.data[chckIndx(indexHEX60gensym22_1761607867, 0, (t_1761607857.data).length - 1)]; result_1761607859_Idx = "Field2";
    }
    else {
    raiseKeyError_620757492(key_1761607858);
    }
    

  return [result_1761607859, result_1761607859_Idx];

}

function get_1761607790(e_1761607791, key_1761607792, default_nil_1761607793) {
      var Temporary1;

  var result_1761607794 = null;

  BeforeRet: do {
    var where_1761607795 = find_1761607737(e_1761607791, key_1761607792);
    if ((where_1761607795 == null)) {
    if (default_nil_1761607793) {
    result_1761607794 = null;
    break BeforeRet;
    }
    else {
      raiseException({message: (makeNimstrLit("\'") || []).concat(key_1761607792 || [],makeNimstrLit("\' not found") || []), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    }
    else {
      result_1761607794 = (Temporary1 = HEX5BHEX5D_1761607854(where_1761607795.data, key_1761607792), Temporary1)[0][Temporary1[1]];
      break BeforeRet;
    }
    
  } while (false);

  return result_1761607794;

}

function is_macro_call_469762166(ast_469762167, env_469762168) {
      var Temporary1;
      var Temporary2;
        var Temporary3;
        var Temporary4;
        var Temporary5;
    var Temporary6;
    var Temporary7;
    var Temporary8;

  var result_469762169 = false;

  BeforeRet: do {
      if (!(ast_469762167.kind == 0)) Temporary2 = false; else {        var Temporary3 = ast_469762167;
        if (ConstSet128[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI637534211)); }
        Temporary2 = (0 < (Temporary3.list).length);      }      if (!Temporary2) Temporary1 = false; else {        var Temporary4 = ast_469762167;
        if (ConstSet129[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI637534211)); }
        Temporary1 = ((Temporary5 = Temporary4.list, Temporary5)[chckIndx(0, 0, (Temporary5).length - 1)].kind == 6);      }    if (Temporary1) {
    var Temporary6 = ast_469762167;
    if (ConstSet131[Temporary6.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary6.kind, NTI637534211)); }
    var Temporary8 = (Temporary7 = Temporary6.list, Temporary7)[chckIndx(0, 0, (Temporary7).length - 1)];
    if (ConstSet130[Temporary8.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary8.kind, NTI637534211)); }
    result_469762169 = funIsMacro_1778385151(get_1761607790(env_469762168, Temporary8.str, true));
    break BeforeRet;
    }
    
    result_469762169 = false;
    break BeforeRet;
  } while (false);

  return result_469762169;

}

function macroexpand_469762181(ast_469762182, env_469762183) {
          var Temporary3;
          var Temporary4;
          var Temporary5;
          var Temporary6;

  var result_469762184 = null;

  BeforeRet: do {
    var ast_469762185 = ast_469762182;
    Label1: do {
        Label2: while (true) {
        if (!is_macro_call_469762166(ast_469762185, env_469762183)) break Label2;
          var Temporary3 = ast_469762185;
          if (ConstSet133[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI637534211)); }
          var Temporary5 = (Temporary4 = Temporary3.list, Temporary4)[chckIndx(0, 0, (Temporary4).length - 1)];
          if (ConstSet132[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI637534211)); }
          var mac_469762186 = get_1761607790(env_469762183, Temporary5.str, false);
          var Temporary6 = ast_469762185;
          if (ConstSet134[Temporary6.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary6.kind, NTI637534211)); }
          ast_469762185 = getFun_1778385147(mac_469762186)(HEX5BHEX5D_1761607998(Temporary6.list, HEX2EHEX2E_973081741(1, 1)));
        }
    } while (false);
    result_469762184 = ast_469762185;
    break BeforeRet;
  } while (false);

  return result_469762184;

}

function toKey_1761607683(x_1761607684) {
      var Temporary1;

  var result_1761607685 = [];

  BeforeRet: do {
    switch (x_1761607684.kind) {
    case 6:
      var Temporary1 = x_1761607684;
      if (ConstSet140[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI637534211)); }
      result_1761607685 = nimCopy(null, Temporary1.str, NTI33554439);
      break BeforeRet;
      break;
    default: 
      raiseException({message: makeNimstrLit("Only symbols can be used for vars."), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
      break;
    }
  } while (false);

  return result_1761607685;

}

function makeMacro_469762448(fun_469762450) {
    var Temporary1;
    var Temporary2;
    var Temporary3;
    var Temporary4;

  var result_469762451 = null;

    var Temporary1 = fun_469762450;
    if (ConstSet144[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'ffun\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI637534211)); }
    var Temporary2 = fun_469762450;
    if (ConstSet145[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'ast\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI637534211)); }
    var Temporary3 = fun_469762450;
    if (ConstSet146[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'params\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI637534211)); }
    var Temporary4 = fun_469762450;
    if (ConstSet147[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'env\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI637534211)); }
    result_469762451 = {kind: 11, ffun: Temporary1.ffun, fis_macro: true, ast: Temporary2.ast, params: Temporary3.params, env: Temporary4.env, list: [], val: null, number: 0.0, str: [], hashmap: ({data: [], counter: 0}), fun: null, is_macro: false, meta: null};

  return result_469762451;

}

function HEX5BHEX5D_469762494(s_469762496, i_469762497) {
  var result_469762498 = null;
  var result_469762498_Idx = 0;

    result_469762498 = s_469762496; result_469762498_Idx = chckIndx(subInt((s_469762496).length, i_469762497), 0, (s_469762496).length - 1);

  return [result_469762498, result_469762498_Idx];

}

function reversed_469762079(a_469762081) {
  var result_469762082 = [];

    var n_469762086 = (a_469762081).length;
    if (result_469762082.length < chckRange(n_469762086, 0, 2147483647)) { for (var i = result_469762082.length ; i < chckRange(n_469762086, 0, 2147483647) ; ++i) result_469762082.push(null); }
               else { result_469762082.length = chckRange(n_469762086, 0, 2147483647); };
    Label1: do {
      var i_469762095 = 0;
      var i_469762691 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_469762691 < n_469762086)) break Label3;
            i_469762095 = i_469762691;
            result_469762082[chckIndx(i_469762095, 0, (result_469762082).length - 1)] = a_469762081[chckIndx(subInt(n_469762086, addInt(i_469762095, 1)), 0, (a_469762081).length - 1)];
            i_469762691 = addInt(i_469762691, 1);
          }
      } while (false);
    } while (false);

  return result_469762082;

}

function quasiquote_469762060(ast_469762061) {
      var Temporary1;
      var Temporary2;
      var Temporary3;
        var Temporary4;
        var Temporary5;
        var Temporary6;
        var Temporary7;
        var Temporary8;
    var Temporary9;
    var Temporary10;
        var Temporary12;
                var Temporary15;
                var Temporary16;
                var Temporary17;
                  var Temporary18;
                  var Temporary19;
                  var Temporary20;
                  var Temporary21;
                  var Temporary22;
                  var Temporary23;
              var Temporary24;
              var Temporary25;
      var Temporary27;
              var Temporary30;
              var Temporary31;
              var Temporary32;
                var Temporary33;
                var Temporary34;
                var Temporary35;
                var Temporary36;
                var Temporary37;
                var Temporary38;
            var Temporary39;
            var Temporary40;

  var result_469762062 = null;

  BeforeRet: do {
    if ((ast_469762061.kind == 0)) {
      var Temporary3 = ast_469762061;
      if (ConstSet163[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI637534211)); }
      if (!(0 < (Temporary3.list).length)) Temporary2 = false; else {        var Temporary4 = ast_469762061;
        if (ConstSet164[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI637534211)); }
        Temporary2 = ((Temporary5 = Temporary4.list, Temporary5)[chckIndx(0, 0, (Temporary5).length - 1)].kind == 6);      }      if (!Temporary2) Temporary1 = false; else {        var Temporary6 = ast_469762061;
        if (ConstSet166[Temporary6.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary6.kind, NTI637534211)); }
        var Temporary8 = (Temporary7 = Temporary6.list, Temporary7)[chckIndx(0, 0, (Temporary7).length - 1)];
        if (ConstSet165[Temporary8.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary8.kind, NTI637534211)); }
        Temporary1 = eqStrings(Temporary8.str, makeNimstrLit("unquote"));      }    if (Temporary1) {
    var Temporary9 = ast_469762061;
    if (ConstSet167[Temporary9.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary9.kind, NTI637534211)); }
    result_469762062 = (Temporary10 = Temporary9.list, Temporary10)[chckIndx(1, 0, (Temporary10).length - 1)];
    break BeforeRet;
    }
    else {
      var output_469762078 = [];
      Label11: do {
        var elt_469762099 = null;
        var elt_469762099_Idx = 0;
        var colontmp__469762681 = [];
        var Temporary12 = ast_469762061;
        if (ConstSet168[Temporary12.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary12.kind, NTI637534211)); }
        colontmp__469762681 = reversed_469762079(Temporary12.list);
        var i_469762682 = 0;
        var L_469762683 = (colontmp__469762681).length;
        Label13: do {
            Label14: while (true) {
            if (!(i_469762682 < L_469762683)) break Label14;
              elt_469762099 = colontmp__469762681; elt_469762099_Idx = chckIndx(i_469762682, 0, (colontmp__469762681).length - 1);
                if (!(elt_469762099[elt_469762099_Idx].kind == 0)) Temporary17 = false; else {                  var Temporary18 = elt_469762099[elt_469762099_Idx];
                  if (ConstSet169[Temporary18.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary18.kind, NTI637534211)); }
                  Temporary17 = (0 < (Temporary18.list).length);                }                if (!Temporary17) Temporary16 = false; else {                  var Temporary19 = elt_469762099[elt_469762099_Idx];
                  if (ConstSet170[Temporary19.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary19.kind, NTI637534211)); }
                  Temporary16 = ((Temporary20 = Temporary19.list, Temporary20)[chckIndx(0, 0, (Temporary20).length - 1)].kind == 6);                }                if (!Temporary16) Temporary15 = false; else {                  var Temporary21 = elt_469762099[elt_469762099_Idx];
                  if (ConstSet172[Temporary21.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary21.kind, NTI637534211)); }
                  var Temporary23 = (Temporary22 = Temporary21.list, Temporary22)[chckIndx(0, 0, (Temporary22).length - 1)];
                  if (ConstSet171[Temporary23.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary23.kind, NTI637534211)); }
                  Temporary15 = eqStrings(Temporary23.str, makeNimstrLit("splice-unquote"));                }              if (Temporary15) {
              var Temporary24 = elt_469762099[elt_469762099_Idx];
              if (ConstSet173[Temporary24.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary24.kind, NTI637534211)); }
              output_469762078 = nimCopy(null, [symbol_637535704(makeNimstrLit("concat")), (Temporary25 = Temporary24.list, Temporary25)[chckIndx(1, 0, (Temporary25).length - 1)], list_637534334(output_469762078)], NTI603980107);
              }
              else {
                output_469762078 = nimCopy(null, [symbol_637535704(makeNimstrLit("cons")), quasiquote_469762060(elt_469762099[elt_469762099_Idx]), list_637534334(output_469762078)], NTI603980107);
              }
              
              i_469762682 = addInt(i_469762682, 1);
              if (!(((colontmp__469762681).length == L_469762683))) {
              failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while (false);
      } while (false);
      result_469762062 = list_637534334(output_469762078);
      break BeforeRet;
    }
    
    }
    else {
    if ((ast_469762061.kind == 8)) {
    var output_469762127 = [];
    Label26: do {
      var elt_469762134 = null;
      var elt_469762134_Idx = 0;
      var colontmp__469762686 = [];
      var Temporary27 = ast_469762061;
      if (ConstSet174[Temporary27.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary27.kind, NTI637534211)); }
      colontmp__469762686 = reversed_469762079(Temporary27.list);
      var i_469762687 = 0;
      var L_469762688 = (colontmp__469762686).length;
      Label28: do {
          Label29: while (true) {
          if (!(i_469762687 < L_469762688)) break Label29;
            elt_469762134 = colontmp__469762686; elt_469762134_Idx = chckIndx(i_469762687, 0, (colontmp__469762686).length - 1);
              if (!(elt_469762134[elt_469762134_Idx].kind == 0)) Temporary32 = false; else {                var Temporary33 = elt_469762134[elt_469762134_Idx];
                if (ConstSet175[Temporary33.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary33.kind, NTI637534211)); }
                Temporary32 = (0 < (Temporary33.list).length);              }              if (!Temporary32) Temporary31 = false; else {                var Temporary34 = elt_469762134[elt_469762134_Idx];
                if (ConstSet176[Temporary34.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary34.kind, NTI637534211)); }
                Temporary31 = ((Temporary35 = Temporary34.list, Temporary35)[chckIndx(0, 0, (Temporary35).length - 1)].kind == 6);              }              if (!Temporary31) Temporary30 = false; else {                var Temporary36 = elt_469762134[elt_469762134_Idx];
                if (ConstSet178[Temporary36.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary36.kind, NTI637534211)); }
                var Temporary38 = (Temporary37 = Temporary36.list, Temporary37)[chckIndx(0, 0, (Temporary37).length - 1)];
                if (ConstSet177[Temporary38.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary38.kind, NTI637534211)); }
                Temporary30 = eqStrings(Temporary38.str, makeNimstrLit("splice-unquote"));              }            if (Temporary30) {
            var Temporary39 = elt_469762134[elt_469762134_Idx];
            if (ConstSet179[Temporary39.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary39.kind, NTI637534211)); }
            output_469762127 = nimCopy(null, [symbol_637535704(makeNimstrLit("concat")), (Temporary40 = Temporary39.list, Temporary40)[chckIndx(1, 0, (Temporary40).length - 1)], list_637534334(output_469762127)], NTI603980107);
            }
            else {
              output_469762127 = nimCopy(null, [symbol_637535704(makeNimstrLit("cons")), quasiquote_469762060(elt_469762134[elt_469762134_Idx]), list_637534334(output_469762127)], NTI603980107);
            }
            
            i_469762687 = addInt(i_469762687, 1);
            if (!(((colontmp__469762686).length == L_469762688))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    result_469762062 = list_637534334([symbol_637535704(makeNimstrLit("vec")), list_637534334(output_469762127)]);
    break BeforeRet;
    }
    else {
    if ((ConstSet180[ast_469762061.kind] != undefined)) {
    result_469762062 = list_637534334([symbol_637535704(makeNimstrLit("quote")), ast_469762061]);
    break BeforeRet;
    }
    else {
      result_469762062 = ast_469762061;
      break BeforeRet;
    }
    }}
  } while (false);

  return result_469762062;

}

function isNimException_33556520() {
    return lastJSError && lastJSError.m_type;

  
}

function getCurrentException() {
  var result_33556523 = null;

    if (isNimException_33556520()) {
    result_33556523 = lastJSError;
    }
    

  return result_33556523;

}

function getCurrentExceptionMsg_33556533() {
  var result_33556534 = [];

  BeforeRet: do {
    if (!((lastJSError == null))) {
    if (isNimException_33556520()) {
    result_33556534 = nimCopy(null, lastJSError.message, NTI33554439);
    break BeforeRet;
    }
    else {
      var msg_33556539 = null;
            if (lastJSError.message !== undefined) {
        msg_33556539 = lastJSError.message;
      }
      
      if (!((msg_33556539 == null))) {
      result_33556534 = nimCopy(null, cstrToNimstr(msg_33556539), NTI33554439);
      break BeforeRet;
      }
      
    }
    
    }
    
    result_33556534 = nimCopy(null, [], NTI33554439);
    break BeforeRet;
  } while (false);

  return result_33556534;

}

function fn_637534309(f_637534312, is_macro_637534313, ast_637534314, params_637534315, env_637534316) {
  var result_637534317 = null;

    result_637534317 = {kind: 11, ffun: f_637534312, fis_macro: is_macro_637534313, ast: ast_637534314, params: params_637534315, env: env_637534316, list: [], val: null, number: 0.0, str: [], hashmap: ({data: [], counter: 0}), fun: null, is_macro: false, meta: null};

  return result_637534317;

}

function eval_ast_469762290(ast_469762291, env_469762292) {
      var Temporary1;
        var Temporary3;
        var Temporary8;
        var Temporary13;
                var Temporary17;

  var result_469762293 = null;

    switch (ast_469762291.kind) {
    case 6:
      var Temporary1 = ast_469762291;
      if (ConstSet210[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI637534211)); }
      result_469762293 = get_1761607790(env_469762292, Temporary1.str, false);
      break;
    case 0:
      Label2: do {
        var Temporary3 = ast_469762291;
        if (ConstSet211[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI637534211)); }
        var HEX3Atmp_469762313 = nimCopy(null, Temporary3.list, NTI637534221);
        var iHEX60gensym7_469762316 = 0;
        var resultHEX60gensym7_469762323 = newSeq_603980154(chckRange((HEX3Atmp_469762313).length, 0, 2147483647));
        Label4: do {
          var it_469762327 = null;
          var it_469762327_Idx = 0;
          var i_469762696 = 0;
          var L_469762697 = (HEX3Atmp_469762313).length;
          Label5: do {
              Label6: while (true) {
              if (!(i_469762696 < L_469762697)) break Label6;
                it_469762327 = HEX3Atmp_469762313; it_469762327_Idx = chckIndx(i_469762696, 0, (HEX3Atmp_469762313).length - 1);
                resultHEX60gensym7_469762323[chckIndx(iHEX60gensym7_469762316, 0, (resultHEX60gensym7_469762323).length - 1)] = eval_469762204(it_469762327[it_469762327_Idx], env_469762292);
                iHEX60gensym7_469762316 = addInt(iHEX60gensym7_469762316, 1);
                i_469762696 = addInt(i_469762696, 1);
                if (!(((HEX3Atmp_469762313).length == L_469762697))) {
                failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while (false);
        } while (false);
      } while (false);
      result_469762293 = list_637534334(resultHEX60gensym7_469762323);
      break;
    case 8:
      Label7: do {
        var Temporary8 = ast_469762291;
        if (ConstSet212[Temporary8.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary8.kind, NTI637534211)); }
        var HEX3Atmp_469762351 = nimCopy(null, Temporary8.list, NTI637534221);
        var iHEX60gensym10_469762354 = 0;
        var resultHEX60gensym10_469762361 = newSeq_603980154(chckRange((HEX3Atmp_469762351).length, 0, 2147483647));
        Label9: do {
          var it_469762365 = null;
          var it_469762365_Idx = 0;
          var i_469762701 = 0;
          var L_469762702 = (HEX3Atmp_469762351).length;
          Label10: do {
              Label11: while (true) {
              if (!(i_469762701 < L_469762702)) break Label11;
                it_469762365 = HEX3Atmp_469762351; it_469762365_Idx = chckIndx(i_469762701, 0, (HEX3Atmp_469762351).length - 1);
                resultHEX60gensym10_469762361[chckIndx(iHEX60gensym10_469762354, 0, (resultHEX60gensym10_469762361).length - 1)] = eval_469762204(it_469762365[it_469762365_Idx], env_469762292);
                iHEX60gensym10_469762354 = addInt(iHEX60gensym10_469762354, 1);
                i_469762701 = addInt(i_469762701, 1);
                if (!(((HEX3Atmp_469762351).length == L_469762702))) {
                failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while (false);
        } while (false);
      } while (false);
      result_469762293 = vector_637534346(resultHEX60gensym10_469762361);
      break;
    case 9:
      result_469762293 = hashMap_637534353([]);
      Label12: do {
        var k_469762378 = [];
        var v_469762379 = null;
        var colontmp__469762705 = ({data: [], counter: 0});
        var Temporary13 = ast_469762291;
        if (ConstSet213[Temporary13.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'hashmap\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary13.kind, NTI637534211)); }
        colontmp__469762705 = nimCopy(colontmp__469762705, Temporary13.hashmap, NTI637534229);
        var L_469762706 = len_637535859(colontmp__469762705);
        Label14: do {
          var h_469762708 = 0;
          var colontmp__469762709 = 0;
          colontmp__469762709 = (colontmp__469762705.data).length - 1;
          var res_469762710 = 0;
          Label15: do {
              Label16: while (true) {
              if (!(res_469762710 <= colontmp__469762709)) break Label16;
                h_469762708 = res_469762710;
                if (isFilled_671088671(colontmp__469762705.data[chckIndx(h_469762708, 0, (colontmp__469762705.data).length - 1)].Field0)) {
                k_469762378 = colontmp__469762705.data[chckIndx(h_469762708, 0, (colontmp__469762705.data).length - 1)].Field1;
                v_469762379 = colontmp__469762705.data[chckIndx(h_469762708, 0, (colontmp__469762705.data).length - 1)].Field2;
                var Temporary17 = result_469762293;
                if (ConstSet214[Temporary17.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'hashmap\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary17.kind, NTI637534211)); }
                HEX5BHEX5DHEX3D_637534431(Temporary17.hashmap, k_469762378, eval_469762204(v_469762379, env_469762292));
                if (!((len_637535859(colontmp__469762705) == L_469762706))) {
                failedAssertImpl_218103864(makeNimstrLit("tables.nim(698, 13) `len(t) == L` the length of the table changed while iterating over it"));
                }
                
                }
                
                res_469762710 = addInt(res_469762710, 1);
              }
          } while (false);
        } while (false);
      } while (false);
      break;
    default: 
      result_469762293 = ast_469762291;
      break;
    }

  return result_469762293;

}

function eval_469762204(ast_469762205, env_469762206) {
              var Temporary3;
            var Temporary4;
            var Temporary5;
              var Temporary6;
              var Temporary7;
            var Temporary8;
            var Temporary9;
            var Temporary10;
            var Temporary11;
              var Temporary12;
              var Temporary13;
            var Temporary14;
            var Temporary15;
            var Temporary16;
            var Temporary17;
              var Temporary18;
              var Temporary19;
              var Temporary20;
              var Temporary21;
            var Temporary22;
            var Temporary23;
            var Temporary24;
            var Temporary28;
            var Temporary29;
              var Temporary30;
              var Temporary32;
            var Temporary35;
            var Temporary36;
              var Temporary37;
            var Temporary38;
            var Temporary39;
              var Temporary40;
            var Temporary41;
            var Temporary42;
              var Temporary43;
            var Temporary44;
            var Temporary45;
              var Temporary46;
            var Temporary47;
            var Temporary48;
              var Temporary49;
            var Temporary50;
            var Temporary51;
              var Temporary52;
            var Temporary53;
            var Temporary54;
              var Temporary55;
              var Temporary56;
              var Temporary57;
            var Temporary59;
            var Temporary60;
            var Temporary61;
            var Temporary62;
            var Temporary63;
            var Temporary64;
            var Temporary65;
            var Temporary66;
            var Temporary67;
              var Temporary68;
              var Temporary69;
            var Temporary70;
            var Temporary71;
              var Temporary72;
            var Temporary73;
            var Temporary74;
              var Temporary75;
              var Temporary76;
              var Temporary77;
              var Temporary78;
            var Temporary79;
            var Temporary80;
            var Temporary81;
            var Temporary82;
            var Temporary83;
            
function HEX3Aanonymous_469762556(a_469762557) {
              var result_469762558 = null;

              BeforeRet: do {
                var fnEnv_469762559 = newEnv_1761607933(env_469762431, bindingList_469762554, a_469762557);
                result_469762558 = eval_469762204(body_469762555, fnEnv_469762559);
                break BeforeRet;
              } while (false);

              return result_469762558;

            }
              var Temporary84;
              var Temporary85;
              var Temporary86;
              var Temporary87;
              var Temporary88;
              var Temporary89;
              var Temporary90;
                var Temporary91;
                var Temporary92;
                var Temporary93;
                var Temporary94;
              var Temporary95;
              var Temporary96;
              var Temporary97;
              var Temporary98;
              var Temporary99;
              var Temporary100;
              var Temporary101;
                var Temporary102;
                var Temporary103;
                var Temporary104;
                var Temporary105;

  var result_469762429 = null;

  BeforeRet: do {
    var ast_469762430 = ast_469762205;
    var env_469762431 = env_469762206;
    Label1: do {
        Label2: while (true) {
        if (!true) break Label2;
          ast_469762430 = macroexpand_469762181(ast_469762430, env_469762431);
          switch (ast_469762430.kind) {
          case 0:
              var Temporary3 = ast_469762430;
              if (ConstSet135[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI637534211)); }
            if (((Temporary3.list).length == 0)) {
            result_469762429 = ast_469762430;
            break BeforeRet;
            }
            
            var Temporary4 = ast_469762430;
            if (ConstSet136[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI637534211)); }
            var first_469762435 = (Temporary5 = Temporary4.list, Temporary5)[chckIndx(0, 0, (Temporary5).length - 1)];
            if ((first_469762435.kind == 6)) {
              var Temporary6 = first_469762435;
              if (ConstSet137[Temporary6.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary6.kind, NTI637534211)); }
            if (eqStrings(Temporary6.str, makeNimstrLit("def!"))) {
              var Temporary7 = ast_469762430;
              if (ConstSet138[Temporary7.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary7.kind, NTI637534211)); }
            if (!(((Temporary7.list).length == 3))) {
            raiseException({message: makeNimstrLit("def! takes only two arguments!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
            }
            
            var Temporary8 = ast_469762430;
            if (ConstSet139[Temporary8.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary8.kind, NTI637534211)); }
            result_469762429 = eval_469762204((Temporary9 = Temporary8.list, Temporary9)[chckIndx(2, 0, (Temporary9).length - 1)], env_469762431);
            var Temporary10 = ast_469762430;
            if (ConstSet141[Temporary10.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary10.kind, NTI637534211)); }
            set_1761607687(env_469762431, toKey_1761607683((Temporary11 = Temporary10.list, Temporary11)[chckIndx(1, 0, (Temporary11).length - 1)]), result_469762429);
            break BeforeRet;
            }
            else {
              var Temporary12 = first_469762435;
              if (ConstSet142[Temporary12.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary12.kind, NTI637534211)); }
            if (eqStrings(Temporary12.str, makeNimstrLit("defmacro!"))) {
              var Temporary13 = ast_469762430;
              if (ConstSet143[Temporary13.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary13.kind, NTI637534211)); }
            if (!(((Temporary13.list).length == 3))) {
            raiseException({message: makeNimstrLit("defmacro! takes only two arguments!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
            }
            
            var Temporary14 = ast_469762430;
            if (ConstSet148[Temporary14.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary14.kind, NTI637534211)); }
            result_469762429 = makeMacro_469762448(eval_469762204((Temporary15 = Temporary14.list, Temporary15)[chckIndx(2, 0, (Temporary15).length - 1)], env_469762431));
            var Temporary16 = ast_469762430;
            if (ConstSet149[Temporary16.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary16.kind, NTI637534211)); }
            set_1761607687(env_469762431, toKey_1761607683((Temporary17 = Temporary16.list, Temporary17)[chckIndx(1, 0, (Temporary17).length - 1)]), result_469762429);
            break BeforeRet;
            }
            else {
              var Temporary18 = first_469762435;
              if (ConstSet150[Temporary18.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary18.kind, NTI637534211)); }
            if (eqStrings(Temporary18.str, makeNimstrLit("let*"))) {
              var Temporary19 = ast_469762430;
              if (ConstSet151[Temporary19.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary19.kind, NTI637534211)); }
            if (!(((Temporary19.list).length == 3))) {
            raiseException({message: makeNimstrLit("let* takes only two arguments!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
            }
            
              var Temporary20 = ast_469762430;
              if (ConstSet153[Temporary20.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary20.kind, NTI637534211)); }
            if (!((ConstSet152[(Temporary21 = Temporary20.list, Temporary21)[chckIndx(1, 0, (Temporary21).length - 1)].kind] != undefined))) {
            raiseException({message: makeNimstrLit("let*\'s bindings must be a list or vector!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
            }
            
            var letEnv_469762461 = newEnv_1761607933(env_469762431, [], []);
            var Temporary22 = ast_469762430;
            if (ConstSet155[Temporary22.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary22.kind, NTI637534211)); }
            var Temporary24 = (Temporary23 = Temporary22.list, Temporary23)[chckIndx(1, 0, (Temporary23).length - 1)];
            if (ConstSet154[Temporary24.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary24.kind, NTI637534211)); }
            var bindings_469762462 = nimCopy(null, Temporary24.list, NTI637534221);
            var num_469762466 = (bindings_469762462).length;
            if (!((modInt(num_469762466, 2) == 0))) {
            raiseException({message: makeNimstrLit("let* bindings must come in pairs!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
            }
            
            Label25: do {
              var i_469762473 = 0;
              var colontmp__469762671 = 0;
              colontmp__469762671 = subInt(num_469762466, 1);
              var res_469762672 = 0;
              Label26: do {
                  Label27: while (true) {
                  if (!(res_469762672 <= colontmp__469762671)) break Label27;
                    i_469762473 = res_469762672;
                    var val_469762474 = eval_469762204(bindings_469762462[chckIndx(addInt(i_469762473, 1), 0, (bindings_469762462).length - 1)], letEnv_469762461);
                    set_1761607687(letEnv_469762461, toKey_1761607683(bindings_469762462[chckIndx(i_469762473, 0, (bindings_469762462).length - 1)]), val_469762474);
                    res_469762672 = addInt(res_469762672, 2);
                  }
              } while (false);
            } while (false);
            env_469762431 = letEnv_469762461;
            var Temporary28 = ast_469762430;
            if (ConstSet156[Temporary28.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary28.kind, NTI637534211)); }
            ast_469762430 = (Temporary29 = Temporary28.list, Temporary29)[chckIndx(2, 0, (Temporary29).length - 1)];
            }
            else {
              var Temporary30 = first_469762435;
              if (ConstSet157[Temporary30.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary30.kind, NTI637534211)); }
            if (eqStrings(Temporary30.str, makeNimstrLit("do"))) {
            Label31: do {
              var elem_469762493 = null;
              var elem_469762493_Idx = 0;
              var colontmp__469762675 = [];
              var Temporary32 = ast_469762430;
              if (ConstSet158[Temporary32.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary32.kind, NTI637534211)); }
              colontmp__469762675 = HEX5BHEX5D_1761607998(Temporary32.list, HEX2EHEX2E_973081741(1, 2));
              var i_469762676 = 0;
              var L_469762677 = (colontmp__469762675).length;
              Label33: do {
                  Label34: while (true) {
                  if (!(i_469762676 < L_469762677)) break Label34;
                    elem_469762493 = colontmp__469762675; elem_469762493_Idx = chckIndx(i_469762676, 0, (colontmp__469762675).length - 1);
                    var _ = eval_469762204(elem_469762493[elem_469762493_Idx], env_469762431);
                    i_469762676 = addInt(i_469762676, 1);
                    if (!(((colontmp__469762675).length == L_469762677))) {
                    failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                    }
                    
                  }
              } while (false);
            } while (false);
            var Temporary35 = ast_469762430;
            if (ConstSet159[Temporary35.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary35.kind, NTI637534211)); }
            ast_469762430 = (Temporary36 = HEX5BHEX5D_469762494(Temporary35.list, 1), Temporary36)[0][Temporary36[1]];
            }
            else {
              var Temporary37 = first_469762435;
              if (ConstSet160[Temporary37.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary37.kind, NTI637534211)); }
            if (eqStrings(Temporary37.str, makeNimstrLit("quote"))) {
            var Temporary38 = ast_469762430;
            if (ConstSet161[Temporary38.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary38.kind, NTI637534211)); }
            result_469762429 = (Temporary39 = Temporary38.list, Temporary39)[chckIndx(1, 0, (Temporary39).length - 1)];
            break BeforeRet;
            }
            else {
              var Temporary40 = first_469762435;
              if (ConstSet162[Temporary40.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary40.kind, NTI637534211)); }
            if (eqStrings(Temporary40.str, makeNimstrLit("quasiquoteexpand"))) {
            var Temporary41 = ast_469762430;
            if (ConstSet181[Temporary41.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary41.kind, NTI637534211)); }
            result_469762429 = quasiquote_469762060((Temporary42 = Temporary41.list, Temporary42)[chckIndx(1, 0, (Temporary42).length - 1)]);
            break BeforeRet;
            }
            else {
              var Temporary43 = first_469762435;
              if (ConstSet182[Temporary43.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary43.kind, NTI637534211)); }
            if (eqStrings(Temporary43.str, makeNimstrLit("quasiquote"))) {
            var Temporary44 = ast_469762430;
            if (ConstSet183[Temporary44.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary44.kind, NTI637534211)); }
            ast_469762430 = quasiquote_469762060((Temporary45 = Temporary44.list, Temporary45)[chckIndx(1, 0, (Temporary45).length - 1)]);
            }
            else {
              var Temporary46 = first_469762435;
              if (ConstSet184[Temporary46.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary46.kind, NTI637534211)); }
            if (eqStrings(Temporary46.str, makeNimstrLit("macroexpand"))) {
            var Temporary47 = ast_469762430;
            if (ConstSet185[Temporary47.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary47.kind, NTI637534211)); }
            result_469762429 = macroexpand_469762181((Temporary48 = Temporary47.list, Temporary48)[chckIndx(1, 0, (Temporary48).length - 1)], env_469762431);
            break BeforeRet;
            }
            else {
              var Temporary49 = first_469762435;
              if (ConstSet186[Temporary49.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary49.kind, NTI637534211)); }
            if (eqStrings(Temporary49.str, makeNimstrLit("try*"))) {
            var Temporary50 = ast_469762430;
            if (ConstSet187[Temporary50.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary50.kind, NTI637534211)); }
            var a1_469762502 = (Temporary51 = Temporary50.list, Temporary51)[chckIndx(1, 0, (Temporary51).length - 1)];
              var Temporary52 = ast_469762430;
              if (ConstSet188[Temporary52.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary52.kind, NTI637534211)); }
            if (((Temporary52.list).length <= 2)) {
            result_469762429 = eval_469762204(a1_469762502, env_469762431);
            break BeforeRet;
            }
            
            var Temporary53 = ast_469762430;
            if (ConstSet189[Temporary53.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary53.kind, NTI637534211)); }
            var a2_469762506 = (Temporary54 = Temporary53.list, Temporary54)[chckIndx(2, 0, (Temporary54).length - 1)];
              var Temporary55 = a2_469762506;
              if (ConstSet191[Temporary55.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary55.kind, NTI637534211)); }
              var Temporary57 = (Temporary56 = Temporary55.list, Temporary56)[chckIndx(0, 0, (Temporary56).length - 1)];
              if (ConstSet190[Temporary57.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary57.kind, NTI637534211)); }
            if (eqStrings(Temporary57.str, makeNimstrLit("catch*"))) {
++excHandler;
            Temporary59 = framePtr;
            try {
            result_469762429 = eval_469762204(a1_469762502, env_469762431);
            break BeforeRet;
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
            framePtr = Temporary59;
            if (lastJSError && (isObj(lastJSError.m_type, NTI637534217))) {
            var exc_469762507 = getCurrentException();
            var Temporary60 = a2_469762506;
            if (ConstSet192[Temporary60.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary60.kind, NTI637534211)); }
            var catchEnv_469762516 = newEnv_1761607933(env_469762431, [(Temporary61 = Temporary60.list, Temporary61)[chckIndx(1, 0, (Temporary61).length - 1)]], [exc_469762507.t]);
            var Temporary62 = a2_469762506;
            if (ConstSet193[Temporary62.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary62.kind, NTI637534211)); }
            result_469762429 = eval_469762204((Temporary63 = Temporary62.list, Temporary63)[chckIndx(2, 0, (Temporary63).length - 1)], catchEnv_469762516);
            break BeforeRet;
            }
            else {
            var exc_469762517 = getCurrentExceptionMsg_33556533();
            var Temporary64 = a2_469762506;
            if (ConstSet194[Temporary64.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary64.kind, NTI637534211)); }
            var catchEnv_469762526 = newEnv_1761607933(env_469762431, [(Temporary65 = Temporary64.list, Temporary65)[chckIndx(1, 0, (Temporary65).length - 1)]], [toStringToken_637535701(exc_469762517)]);
            var Temporary66 = a2_469762506;
            if (ConstSet195[Temporary66.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary66.kind, NTI637534211)); }
            result_469762429 = eval_469762204((Temporary67 = Temporary66.list, Temporary67)[chckIndx(2, 0, (Temporary67).length - 1)], catchEnv_469762526);
            break BeforeRet;
            }
            lastJSError = prevJSError;
            } finally {
            framePtr = Temporary59;
            }
            }
            else {
              result_469762429 = eval_469762204(a1_469762502, env_469762431);
              break BeforeRet;
            }
            
            }
            else {
              var Temporary68 = first_469762435;
              if (ConstSet196[Temporary68.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary68.kind, NTI637534211)); }
            if (eqStrings(Temporary68.str, makeNimstrLit("if"))) {
              var Temporary69 = ast_469762430;
              if (ConstSet198[Temporary69.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary69.kind, NTI637534211)); }
            if (!((ConstSet197[chckRange((Temporary69.list).length, 0, 65535)] != undefined))) {
            raiseException({message: makeNimstrLit("if requires 2 or 3 arguments!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
            }
            
            var Temporary70 = ast_469762430;
            if (ConstSet199[Temporary70.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary70.kind, NTI637534211)); }
            var cond_469762535 = (Temporary71 = Temporary70.list, Temporary71)[chckIndx(1, 0, (Temporary71).length - 1)];
            var which_469762536 = eval_469762204(cond_469762535, env_469762431);
            if ((ConstSet200[which_469762536.kind] != undefined)) {
              var Temporary72 = ast_469762430;
              if (ConstSet201[Temporary72.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary72.kind, NTI637534211)); }
            if (((Temporary72.list).length == 4)) {
            var Temporary73 = ast_469762430;
            if (ConstSet202[Temporary73.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary73.kind, NTI637534211)); }
            ast_469762430 = (Temporary74 = Temporary73.list, Temporary74)[chckIndx(3, 0, (Temporary74).length - 1)];
            }
            else {
              ast_469762430 = NilToken_637535713;
            }
            
            }
            else {
              var Temporary75 = ast_469762430;
              if (ConstSet203[Temporary75.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary75.kind, NTI637534211)); }
              ast_469762430 = (Temporary76 = Temporary75.list, Temporary76)[chckIndx(2, 0, (Temporary76).length - 1)];
            }
            
            }
            else {
              var Temporary77 = first_469762435;
              if (ConstSet204[Temporary77.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary77.kind, NTI637534211)); }
            if (eqStrings(Temporary77.str, makeNimstrLit("fn*"))) {
              var Temporary78 = ast_469762430;
              if (ConstSet205[Temporary78.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary78.kind, NTI637534211)); }
            if (!(((Temporary78.list).length == 3))) {
            raiseException({message: makeNimstrLit("if requires 2 arguments (fn* bindings exprs)!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
            }
            
            var Temporary79 = ast_469762430;
            if (ConstSet206[Temporary79.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary79.kind, NTI637534211)); }
            var bindings_469762548 = (Temporary80 = Temporary79.list, Temporary80)[chckIndx(1, 0, (Temporary80).length - 1)];
            if (!((ConstSet207[bindings_469762548.kind] != undefined))) {
            raiseException({message: makeNimstrLit("if bindings must be Vector or List!"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
            }
            
            var Temporary81 = bindings_469762548;
            if (ConstSet208[Temporary81.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary81.kind, NTI637534211)); }
            var bindingList_469762554 = nimCopy(null, Temporary81.list, NTI637534221);
            var Temporary82 = ast_469762430;
            if (ConstSet209[Temporary82.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary82.kind, NTI637534211)); }
            var body_469762555 = (Temporary83 = Temporary82.list, Temporary83)[chckIndx(2, 0, (Temporary83).length - 1)];
            var innerFn_469762560 = HEX3Aanonymous_469762556;
            result_469762429 = fn_637534309(innerFn_469762560, false, body_469762555, bindings_469762548, env_469762431);
            break BeforeRet;
            }
            else {
              var form_469762561 = eval_ast_469762290(ast_469762430, env_469762431);
              var Temporary84 = form_469762561;
              if (ConstSet215[Temporary84.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary84.kind, NTI637534211)); }
              var f_469762562 = (Temporary85 = Temporary84.list, Temporary85)[chckIndx(0, 0, (Temporary85).length - 1)];
              if ((f_469762562.kind == 11)) {
              var Temporary86 = f_469762562;
              if (ConstSet216[Temporary86.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'ast\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary86.kind, NTI637534211)); }
              ast_469762430 = Temporary86.ast;
              var Temporary87 = f_469762562;
              if (ConstSet217[Temporary87.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'env\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary87.kind, NTI637534211)); }
              var Temporary88 = f_469762562;
              if (ConstSet219[Temporary88.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'params\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary88.kind, NTI637534211)); }
              var Temporary89 = Temporary88.params;
              if (ConstSet218[Temporary89.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary89.kind, NTI637534211)); }
              var Temporary90 = form_469762561;
              if (ConstSet220[Temporary90.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary90.kind, NTI637534211)); }
              env_469762431 = newEnv_1761607933(Temporary87.env, Temporary89.list, HEX5BHEX5D_1761607998(Temporary90.list, HEX2EHEX2E_973081741(1, 1)));
              }
              else {
                var Temporary91 = form_469762561;
                if (ConstSet222[Temporary91.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary91.kind, NTI637534211)); }
                var Temporary93 = (Temporary92 = Temporary91.list, Temporary92)[chckIndx(0, 0, (Temporary92).length - 1)];
                if (ConstSet221[Temporary93.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'fun\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary93.kind, NTI637534211)); }
                var Temporary94 = form_469762561;
                if (ConstSet223[Temporary94.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary94.kind, NTI637534211)); }
                result_469762429 = Temporary93.fun(HEX5BHEX5D_1761607998(Temporary94.list, HEX2EHEX2E_973081741(1, 1)));
                break BeforeRet;
              }
              
            }
            }}}}}}}}}}
            }
            else {
              var form_469762597 = eval_ast_469762290(ast_469762430, env_469762431);
              var Temporary95 = form_469762597;
              if (ConstSet224[Temporary95.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary95.kind, NTI637534211)); }
              var f_469762598 = (Temporary96 = Temporary95.list, Temporary96)[chckIndx(0, 0, (Temporary96).length - 1)];
              if ((f_469762598.kind == 11)) {
              var Temporary97 = f_469762598;
              if (ConstSet225[Temporary97.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'ast\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary97.kind, NTI637534211)); }
              ast_469762430 = Temporary97.ast;
              var Temporary98 = f_469762598;
              if (ConstSet226[Temporary98.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'env\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary98.kind, NTI637534211)); }
              var Temporary99 = f_469762598;
              if (ConstSet228[Temporary99.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'params\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary99.kind, NTI637534211)); }
              var Temporary100 = Temporary99.params;
              if (ConstSet227[Temporary100.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary100.kind, NTI637534211)); }
              var Temporary101 = form_469762597;
              if (ConstSet229[Temporary101.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary101.kind, NTI637534211)); }
              env_469762431 = newEnv_1761607933(Temporary98.env, Temporary100.list, HEX5BHEX5D_1761607998(Temporary101.list, HEX2EHEX2E_973081741(1, 1)));
              }
              else {
                var Temporary102 = form_469762597;
                if (ConstSet231[Temporary102.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary102.kind, NTI637534211)); }
                var Temporary104 = (Temporary103 = Temporary102.list, Temporary103)[chckIndx(0, 0, (Temporary103).length - 1)];
                if (ConstSet230[Temporary104.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'fun\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary104.kind, NTI637534211)); }
                var Temporary105 = form_469762597;
                if (ConstSet232[Temporary105.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'list\' is not accessible for type \'MalType\' using \'kind = "), reprDiscriminant(Temporary105.kind, NTI637534211)); }
                result_469762429 = Temporary104.fun(HEX5BHEX5D_1761607998(Temporary105.list, HEX2EHEX2E_973081741(1, 1)));
                break BeforeRet;
              }
              
            }
            
            break;
          default: 
            result_469762429 = eval_ast_469762290(ast_469762430, env_469762431);
            break BeforeRet;
            break;
          }
        }
    } while (false);
  } while (false);

  return result_469762429;

}

function baseEnv_469762207() {
    
function HEX3Aanonymous_469762286(xs_469762287) {
      var result_469762288 = null;

        result_469762288 = eval_469762204(xs_469762287[chckIndx(0, 0, (xs_469762287).length - 1)], env_469762209);

      return result_469762288;

    }

  var result_469762208 = null;

  BeforeRet: do {
    var env_469762209 = newEnv_1761607933(null, [], []);
    Label1: do {
      var sym_469762284 = [];
      var fn_469762285 = null;
      var i_469762661 = 0;
      Label2: do {
          Label3: while (true) {
          if (!true) break Label3;
            var colontmp__469762664 = nimCopy(null, ns_1778387329[chckIndx(i_469762661, 0, (ns_1778387329).length - 1)], NTI1778386429);
            sym_469762284 = colontmp__469762664["Field0"];
            fn_469762285 = colontmp__469762664["Field1"];
            set_1761607687(env_469762209, sym_469762284, fn_469762285);
            if ((61 <= i_469762661)) {
            break Label2;
            }
            
            i_469762661 = addInt(i_469762661, 1);
          }
      } while (false);
    } while (false);
    set_1761607687(env_469762209, makeNimstrLit("eval"), fun_637534264(HEX3Aanonymous_469762286, false));
    result_469762208 = env_469762209;
    break BeforeRet;
  } while (false);

  return result_469762208;

}

function print_469762646(inp_469762647) {
  var result_469762648 = [];

    result_469762648 = nimCopy(null, pr_str_1744830524(inp_469762647, true), NTI33554439);

  return result_469762648;

}

function read_469762057(inp_469762058) {
  var result_469762059 = null;

    result_469762059 = read_str_603980278(inp_469762058);

  return result_469762059;

}

function rep_469762651(inp_469762652) {
  var result_469762653 = [];

    result_469762653 = nimCopy(null, print_469762646(eval_469762204(read_469762057(inp_469762652), e_469762650[0])), NTI33554439);

  return result_469762653;

}

function resetEnv() {
    e_469762650[0] = baseEnv_469762207();
    var _ = rep_469762651(makeNimstrLit("(defmacro! cond (fn* (& xs) (if (> (count xs) 0) (list \'if (first xs) (if (> (count xs) 1) (nth xs 1) (throw \"odd number of forms to cond\")) (cons \'cond (rest (rest xs)))))))"));
    var _ = rep_469762651(makeNimstrLit("(def! *host-language* \"lispeto\")"));

  
}

function lispeto(inp_469762656) {
    var Temporary1;
    var Temporary3;

  var result_469762657 = null;

  BeforeRet: do {
++excHandler;
    Temporary3 = framePtr;
    try {
    Temporary1 = toJSStr(rep_469762651(cstrToNimstr(inp_469762656)));
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
    framePtr = Temporary3;
    if (lastJSError && (isObj(lastJSError.m_type, NTI637534217))) {
    var exc_469762658 = getCurrentException();
    result_469762657 = toJSStr((makeNimstrLit("!!Exception: ") || []).concat(pr_str_1744830524(exc_469762658.t, true) || []));
    break BeforeRet;
    }
    else {
    result_469762657 = toJSStr((makeNimstrLit("!!RawException: ") || []).concat(getCurrentExceptionMsg_33556533() || []));
    break BeforeRet;
    }
    lastJSError = prevJSError;
    } finally {
    framePtr = Temporary3;
    }
    result_469762657 = Temporary1;
  } while (false);

  return result_469762657;

}
console.log("Loaded!");
var e_469762650 = [baseEnv_469762207()];
var _ = rep_469762651(makeNimstrLit("(defmacro! cond (fn* (& xs) (if (> (count xs) 0) (list \'if (first xs) (if (> (count xs) 1) (nth xs 1) (throw \"odd number of forms to cond\")) (cons \'cond (rest (rest xs)))))))"));
var _ = rep_469762651(makeNimstrLit("(def! *host-language* \"lispeto\")"));
